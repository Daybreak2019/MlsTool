message,fuzzy
"['surplus', 'trace', 'stack', 'suppress', 'assertionerror', 'entryobeys', 'trace', 'stack', 'available', 'attribute', 'everywherepiperorigin', 'revidchange']",{'stack': 100}
"['aliassince', 'number', 'comment', 'assertsvalue', 'incorrect', 'unintentionalpiperorigin', 'revidchange', 'ifedbfdafcfdd']",{'incorrect': 100}
"['expensive', 'expose', 'computation', 'allowcondition', 'expensive', 'level', 'pattern', 'message', 'generation', 'commonpiperorigin', 'revid']","{'expose': 100, 'generation': 100}"
"['class', 'multiobject', 'styleaccepts', 'class', 'public', 'format', 'usage', 'representation', 'consumption', 'string', 'content', 'value', 'acrobatics', 'print', 'enums', 'integer', 'primitivecommand', 'subclass', 'multiflag', 'future', 'separator', 'ingestionpiperorigin', 'revid']",{'integer': 100}
"['versionfeaturefunction', 'register', 'calledprogram', 'initialization', 'loggingbetter', 'unittest', 'aliasavailablevalue', 'return', 'allowprevents', 'deadlock', 'reentrant', 'stoptestframework', 'customizeunicode', 'helpfullpiperorigin', 'revid']",{'deadlock': 100}
"['thread', 'entrant', 'safetydeadlock', 'python', 'potential', 'customizations', 'scenario', 'frameworkpiperorigin', 'revid']",{'thread': 100}
"['issue', 'bazelbuild', 'workaround', 'bazelpiperorigin', 'revid']",{'issue': 100}
