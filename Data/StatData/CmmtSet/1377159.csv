message,fuzzy
"['reuse', 'expose']",{'expose': 100}
"['message', 'native', 'overflow', 'ocaml', 'compiler', 'stackppedrot']",{'overflow': 100}
"['error', 'message', 'native', 'overflow', 'ocaml', 'compiler', 'stack']","{'overflow': 100, 'stack': 100}"
"['status', 'template', 'proof', 'decideproof', 'table', 'activate', 'equality', 'selectivelyeventual', 'featuretemplate', 'backwards', 'carefulsyntactic', 'fragile', 'particular', 'preservation', 'proofinternals', 'sensitive', 'conversion', 'innocent', 'order']",{'Sensitive': 100}
"['mergesphinx', 'buffer']",{'buffer': 100}
"['declaration', 'expose', 'inductiveskyskimmer']",{'expose': 100}
"['expose', 'declaration', 'inductive']",{'expose': 100}
"['sphinx', 'buffer', 'output', 'buildsphinx', 'master', 'warningduplicate', 'extractionfirst', 'duplicate', 'ssreflectduplicateduplicate', 'ssreflectduplicate', 'ssreflect', 'applyduplicateduplicateduplicateduplicate', 'ssreflectunlock', 'duplicatecongr', 'duplicateduplicate', 'applyprenex', 'duplicate', 'implicitsargument', 'duplicate', 'number', 'rightcurrent', 'hypothesis', 'duplicatehypothesis', 'duplicatehypothesis', 'ident', 'duplicatehypothesis', 'duplicatehypothesis', 'duplicatealready', 'ident', 'duplicateassumption', 'duplicateproduct', 'inductive', 'duplicateequal', 'duplicateequal', 'duplicate', 'universeunable', 'duplicate', 'unifyduplicate', 'progress', 'proof', 'editingpython', 'script', 'package', 'theme', 'insert', 'modifysuper']",{'buffer': 100}
"['expose', 'project']",{'expose': 100}
"['representation', 'stack', 'abstract']",{'stack': 100}
"['object', 'instance', 'sanitizelibobject', 'stack', 'local', 'storetypeclass']",{'stack': 100}
"['storebytecode', 'execution', 'array', 'persistent', 'modify', 'value', 'meantvalue', 'issue', 'table', 'storestructural', 'equality']",{'issue': 100}
"['expose', 'interface']",{'expose': 100}
"['expose', 'coercipn']",{'expose': 100}
"['integer', 'primitive', 'signedinteger', 'primitive', 'definedinteger', 'theory', 'module', 'primitive', 'primitive', 'dependingdefault']",{'integer': 100}
"['declaremods', 'object', 'recursive', 'collection', 'vernacjscoq', 'upstream', 'patch', 'overflow', 'stackjscoq', 'patchvernac']",{'overflow': 100}
"['injection', 'coqargs', 'emacs', 'standard', 'print', 'option']",{'injection': 100}
"['standard', 'option', 'injection']",{'injection': 100}
"['injection', 'coqargs', 'mangle', 'standard', 'option']",{'injection': 100}
"['coqargs', 'option', 'injection']",{'injection': 100}
"['freshness', 'issue', 'introductionbuild', 'final', 'sequence', 'earlierintroduction']",{'issue': 100}
"['pushingchange', 'representation', 'function', 'printer', 'expose', 'ugraphsignature', 'abstract']",{'expose': 100}
"['length', 'check']",{'length': 100}
"['integer', 'notation', 'number', 'document', 'primitive']",{'integer': 100}
"['printer', 'stack']",{'stack': 100}
"['incorrect', 'binder']",{'incorrect': 100}
"['expose', 'plugin', 'micromega']",{'expose': 100}
"['incorrect', 'binder']",{'incorrect': 100}
"['eceaeda', 'mergeextra', 'incorrect', 'globenv', 'avoidppedrot']",{'incorrect': 100}
"['respect', 'optimize', 'stack', 'handlinginteger', 'plain', 'point', 'markingrestore', 'stackocaml']",{'stack': 100}
"['incorrect', 'globenv']",{'incorrect': 100}
"['ocaml', 'constantprinter', 'parser', 'enablemaintain', 'integer', 'multipliedinteger', 'printerdecimal', 'representation', 'exponent', 'choice', 'exponent', 'decimal', 'rationaldivision', 'product', 'power']",{'integer': 100}
"['dfdecf', 'mergemerge', 'pattern', 'notation', 'overflow']",{'overflow': 100}
"['cclosure', 'stackmachine', 'stack']",{'stack': 100}
"['issue', 'example']",{'issue': 100}
"['resolver', 'functor', 'parameter', 'module', 'storedifferent', 'delta', 'environment', 'featuremodule', 'actual', 'parameterpurpose', 'equation', 'parameter', 'sincealready', 'present', 'instanciation', 'wouldparameter', 'behave', 'module', 'requireddelta', 'resolvers', 'module', 'dependend', 'module', 'storegiven', 'patch', 'issue', 'chainredundant', 'constraint']",{'issue': 100}
"['integer', 'compile', 'mangle', 'number', 'modify', 'abstractbitwise', 'tactic']",{'integer': 100}
"['integer', 'compile', 'mangle', 'number', 'modify', 'abstract']",{'integer': 100}
"['integer', 'compile', 'mangle', 'number', 'modify', 'abstract']",{'integer': 100}
"['integer', 'compile', 'mangle', 'number', 'modify', 'abstract']",{'integer': 100}
"['integer', 'compile', 'mangle', 'number', 'modify', 'abstract']",{'integer': 100}
"['integer', 'compile', 'mangle', 'number', 'modify', 'abstract']",{'integer': 100}
"['integer', 'compile', 'mangle', 'number', 'modify', 'abstract']",{'integer': 100}
"['integer', 'compile', 'mangle', 'number', 'modify', 'abstract']",{'integer': 100}
"['integer', 'compile', 'mangle', 'number', 'modify', 'abstract']",{'integer': 100}
"['integer', 'compile', 'mangle', 'number', 'modify', 'abstract']",{'integer': 100}
"['integer', 'compile', 'mangle', 'number', 'modify', 'abstract']",{'integer': 100}
"['integer', 'compile', 'mangle', 'number', 'modify']",{'integer': 100}
"['issue', 'wouldocaml', 'characterocaml', 'insteadsince', 'stream', 'function', 'module', 'quitelookup', 'character', 'function']",{'issue': 100}
"['closure', 'layout', 'memoryexecution', 'accumulator', 'directlybytecode', 'issue', 'environmentargument', 'accumulator']",{'issue': 100}
"['rename', 'integer', 'refman']",{'integer': 100}
"['edbcefe', 'mergemerge', 'freshness', 'comment', 'induction', 'issue', 'destructralfjungjashugppedrot']",{'issue': 100}
"['incorrect', 'record', 'debruijn']",{'incorrect': 100}
"['mangle', 'issue', 'induction']",{'issue': 100}
"['freshness', 'issue', 'comment', 'callingcomputation', 'avoidseveral', 'compute']",{'issue': 100}
"['explicit', 'stack', 'evarmap']",{'stack': 100}
"['ambient', 'subgraph', 'universe', 'printoriginaldatatype', 'recordsubgraph', 'universe', 'printitree', 'example', 'requireforever', 'subgraph', 'universe', 'printgiven', 'subgraph', 'universe', 'issue', 'universeuniverse', 'traverse', 'requireenough', 'checkfaster', 'instant', 'automatic', 'enoughprivaterestriction', 'universe', 'context', 'traversal', 'ambient', 'universe', 'startingcause']",{'issue': 100}
"['coqchkreport', 'module', 'coqchk', 'opaque', 'inneraxiomspeak', 'reviewerwhether', 'understandprogress', 'useful', 'makingissue', 'crypto']",{'crypto': 100}
"['minimize', 'coqbot', 'issue']",{'issue': 100}
"['minimize', 'coqbot', 'issue', 'coqbot', 'allowsversion', 'reproducingjason', 'minimizer', 'programjasongross']",{'issue': 100}
"['detail', 'environment', 'coqdocchange', 'featureinitial', 'comment', 'attemptavoid', 'issue', 'developer']",{'issue': 100}
"['mergemerge', 'coqdoc', 'incorrect', 'spacelysxia']",{'incorrect': 100}
"['incorrect', 'space']",{'incorrect': 100}
"['verbosefigure', 'download', 'issue', 'artifact']",{'issue': 100}
"['module', 'stack']",{'stack': 100}
"['bdaadmerge', 'crypto']",{'crypto': 100}
"['legacy', 'crypto']",{'crypto': 100}
"['purpose', 'sincetarget', 'crypto', 'track', 'memoryissue', 'mastercontinue', 'performance', 'experimentleast']",{'crypto': 100}
"['generation', 'consistent', 'prefix', 'directive']",{'generation': 100}
"['issue', 'mergezimmijfehrle']",{'issue': 100}
"['sphinx', 'target', 'anonymoussphinx', 'issue']",{'issue': 100}
"['crypto', 'splitskyskimmer']",{'crypto': 100}
"['heaviest', 'target', 'removedocaml', 'minute', 'serialocaml', 'target', 'aroundbreak', 'compilation', 'introduce', 'extractionissue', 'ocaml', 'issue', 'ocaml', 'extractedanother', 'issue', 'ocaml', 'tracker', 'crypto', 'flambdaalternativeclose']","{'issue': 100, 'crypto': 100}"
"['internal', 'expose']",{'expose': 100}
"['declareinternals', 'exposure', 'large', 'stilloffender', 'dependency', 'cycledeclarevernacexprcomhintcomhint', 'cycledeclaredef', 'mediumchosen', 'quitevernacexpr', 'invasiveseems', 'consistent', 'stage', 'laterdeclare', 'metasyntax', 'notation', 'vernacexpr', 'dependmedium', 'support']",{'Exposure': 100}
"['integer', 'binary', 'cauchy']",{'integer': 100}
"['mergemerge', 'crypto', 'flambdaskyskimmer']",{'crypto': 100}
"['crypto', 'flambdapretty', 'hungry', 'flambda', 'regular', 'crypto', 'compilationocamlissue', 'ocaml']",{'crypto': 100}
"['revert', 'partialproposal', 'length']",{'length': 100}
"['increase', 'gitlab', 'stack', 'flambdaissue', 'ocaml']",{'stack': 100}
"['mergemerge', 'issue', 'module', 'compatibility', 'zifypow']",{'issue': 100}
"['issue', 'module', 'compatibility', 'zifypow', 'avoidexplain', 'changelog', 'entry', 'tweak']",{'issue': 100}
"['integer', 'primitive', 'ocaml', 'coqchk']",{'integer': 100}
"['cstack', 'module', 'removeprovide', 'advantage', 'ccalgoupstream', 'ocaml']",{'stack': 91}
"['improvement', 'efficiencyocaml', 'entirelyimprovedgeneration', 'direct', 'proofperforms', 'rewrite', 'support', 'arrowduplicate', 'hypothesis', 'avoidcallback', 'ocaml', 'entirelymicromega', 'overflow', 'stackduplicate', 'online', 'computation', 'elimination', 'naive']",{'overflow': 100}
"['generation', 'spurious', 'universe', 'suite']",{'generation': 100}
"['length', 'check', 'instance']",{'length': 100}
"['accfcmerge', 'legacy', 'crypto', 'removeskyskimmer']",{'crypto': 100}
"['legacy', 'crypto', 'removemotivationdevelopment', 'maintainedlegacy', 'cryptounusable', 'overlay', 'makingstyle', 'development', 'behavior', 'gigabyte', 'requiresmonth', 'mattam', 'component', 'development', 'meanttrade']",{'crypto': 100}
"['crypto', 'bedrockcompatibility', 'bedrock', 'relativelydepend']",{'crypto': 100}
"['mergemerge', 'target', 'legacy', 'crypto']",{'crypto': 100}
"['fdeadd', 'mergerevert', 'buffer']",{'buffer': 100}
"['fcfbc', 'ebaadcconstructor', 'standard', 'issue']",{'issue': 100}
"['constructor', 'issue', 'standard', 'rlist']",{'issue': 100}
"['revert', 'coqide', 'buffer', 'removerevert', 'coqide']",{'buffer': 100}
"['custom', 'favor', 'module', 'backtrace', 'ocamlconservative', 'pierre', 'marieversionbacktrace', 'ocaml', 'customseems', 'improvement', 'alreadybacktraces', 'removebecome', 'backtraces', 'differenceconsolidate', 'class', 'exceptionbacktrace', 'capturedclosebacktrace', 'issue', 'exampleraise', 'frame', 'characterframe', 'frame', 'characterunknown', 'frame', 'characterunknown', 'frame', 'charactercharacter', 'frame', 'vernaccharacter', 'frame', 'vernaccharacter', 'frame', 'character', 'vernac']",{'issue': 100}
"['fbdee', 'mergeshorten', 'issue']",{'issue': 100}
"['mergemerge', 'cleanup', 'universe', 'expose', 'comindppedrot']",{'expose': 100}
"['micromega', 'efficiency', 'regressioncompletness', 'introducescurrent', 'inefficiency', 'relies', 'removeconstraint', 'format', 'positivitysolve', 'rbase', 'rmicromega', 'issue']",{'issue': 100}
"['dfeaf', 'mergemerge', 'breach', 'possible', 'explicit', 'existence', 'privacy', 'remote', 'stdlib']",{'breach': 100}
"['integer', 'datatypes', 'standard', 'float', 'votourseems', 'implementation', 'number', 'native', 'demarshaller', 'pointkernel', 'demarshaller', 'floatalias', 'standard', 'float', 'ocamldecide', 'fragile', 'changetrigger', 'object', 'complaint', 'unsound', 'woulddepend', 'library', 'levelkernel', 'library', 'soundnative', 'situation', 'demarshallerinteger', 'unconditionallydepends', 'architecturevalue', 'unsound', 'caughtrepresentation', 'demarshallerrepresentation', 'ocaml', 'specificotherwise', 'goingunsound']",{'integer': 100}
"['mergemerge', 'crypto']",{'crypto': 100}
"['changelogaddedchangeddeprecatedfixedremovedexclude', 'security', 'soundnesssecurity', 'process', 'vulnerability', 'differentright']",{'Security': 100}
"['crypto', 'targetextra', 'couple']",{'crypto': 100}
"['primeinitial', 'character', 'selectionsmall', 'issue', 'stillcurrent', 'double', 'startalready', 'selection', 'extendeddigitconvention']",{'issue': 100}
"['version', 'missingissue', 'causestartlatest', 'coqorg', 'dockerupdateclonecloningsynchronisedversion', 'pinnedversion', 'issue', 'repos', 'firstpackage', 'createsynchronisedversion', 'pinnedversion', 'issue']",{'issue': 100}
"['expose', 'universe', 'processing']",{'expose': 100}
"['underflows', 'gradual', 'check']",{'underflow': 95}
"['primitive', 'floatprecision', 'standard', 'fexcess', 'enoughmfpmath', 'requiredissue', 'double', 'ocaml', 'pointdouble', 'precision', 'point', 'arithmetic', 'making', 'incorrect', 'respect', 'pointdouble', 'runtime']",{'incorrect': 100}
"['primitive', 'floatfloat', 'overflow', 'stackfloat', 'comment', 'bewarefunction', 'makeblocknative', 'compiler', 'configure', 'optionlonger']",{'overflow': 100}
"['incorrect', 'space', 'extra', 'removeextra', 'space', 'result', 'filename']",{'incorrect': 100}
"['input', 'unicode', 'incorrect', 'space']",{'incorrect': 100}
"['mergedocumentation', 'issue']",{'issue': 100}
"['issue', 'documentation']",{'issue': 100}
"['substitution', 'incorrect', 'context', 'section']",{'incorrect': 100}
"['wrong', 'advice', 'choice', 'issue', 'feedback', 'level']",{'issue': 100}
"['kernel', 'parametric', 'universe', 'lowestcompat', 'universeconstraint', 'sprop', 'proper', 'reinstate', 'lbound', 'equalitylboundinductives', 'polymorphicconstraint', 'explicitconstraint', 'inductives', 'checktemplate', 'universe', 'polymorphic', 'elaboration', 'recordfunction', 'rebase', 'debug', 'exportfunction', 'removetemplate', 'checl', 'optionparameterizes', 'inductives', 'template', 'criterion', 'polymorphicallow', 'necessary', 'backward', 'compatibility', 'bypassingupdate', 'checker', 'structure', 'typingbehavior', 'unsafe', 'switch', 'commitbound', 'lowertemplate', 'proof', 'check', 'unset', 'optionscripttemplate', 'check', 'optiontemplate', 'check', 'unsettemplate', 'cooking', 'inductives', 'checktemplate', 'check', 'universe', 'suite', 'cleanupcookindtemplate', 'failure', 'comment', 'check', 'unsettemplate', 'explanation', 'suiteoverlayparamcoq', 'overlaytemplate', 'overlay', 'checkoverlayupdate', 'legacy', 'overlay', 'cryptomistake', 'check', 'guard', 'compat', 'handlelegacy', 'crypto', 'overlaytemplate', 'print', 'update', 'assumption', 'reflect', 'typingassumption', 'universe', 'print', 'leveltemplate', 'polymorphic', 'template', 'universe', 'polymorphismtemplate', 'check', 'interaction', 'check', 'polymorphism', 'pointlocal', 'conclusion', 'universetemplate', 'polymorphic', 'indtypingtemplate', 'explicit', 'polymorphism', 'allowinterface', 'adapt', 'indtypingtemplate', 'polymorphic', 'universe', 'handletypem', 'correctlytemplate', 'check', 'meaningfullness', 'minimal', 'universeannotation', 'record', 'inductivelarger', 'compatibility', 'preserveunimath', 'polymorphism', 'templatetemplate', 'comment', 'polymorphism', 'identityattribute', 'template', 'universe', 'incorrecttemplate', 'meaningfullyalthough', 'debatabledeclaration', 'section', 'respect', 'coercionuniform', 'inheritanceremove', 'template', 'universe', 'incorrect', 'stdlibchange', 'micromega', 'section', 'extractionremove', 'template', 'plugins', 'universe', 'incorrectattribute', 'template', 'universe', 'suite', 'incorrectattribute', 'template', 'universe', 'suite']","{'crypto': 100, 'incorrect': 100}"
"['issue', 'contributor', 'people', 'accessassign', 'issue', 'changelog', 'commenters']",{'issue': 100}
"['funind', 'principle', 'generation']",{'generation': 100}
"['precondition', 'align', 'overflow']",{'overflow': 100}
"['issue', 'foundation', 'software']",{'issue': 100}
"['integer', 'primitive']",{'integer': 100}
"['integer', 'primitive', 'support', 'extractionprimitive', 'extrocamlint', 'module', 'requiredocaml', 'kernel', 'module', 'implementation']",{'integer': 100}
"['master', 'patch', 'crash', 'window']",{'crash': 100}
"['mergemerge', 'stack', 'lemmaskyskimmer']",{'stack': 100}
"['stack', 'lemmavernacstate', 'stack', 'lemmamodule', 'reduces', 'place', 'propergreat', 'lemma', 'close', 'example', 'information', 'wouldenvironment']",{'stack': 100}
"['mergemerge', 'table', 'interface', 'expose']",{'expose': 100}
"['mergemerge', 'target', 'crypto']",{'crypto': 100}
"['target', 'crypto']",{'crypto': 100}
"['issue', 'polymorphic']",{'issue': 100}
"['rename', 'stack']",{'stack': 100}
"['expose', 'table', 'interface', 'optioncache', 'avoidsearch', 'module']",{'expose': 100}
"['injection', 'syntax', 'documentinginjection', 'preventinjection', 'syntaxsingleton']",{'injection': 100}
"['integer', 'primitive']",{'integer': 100}
"['issue', 'output', 'suite']",{'issue': 100}
"['integer', 'specification', 'implems', 'consistent', 'primitiveprimitive', 'implementationinteger', 'kernel', 'ocamlkernel', 'ocamlinteger', 'kernel', 'byterunspecification', 'axiomnumber', 'cyclic', 'theorycomment', 'invariant', 'implementation', 'enablecorrectness', 'proof', 'reviewer', 'papereasiest', 'mightthree', 'implementation', 'proof', 'optimisation', 'rathercorrect', 'iteration', 'savingupdate', 'account', 'proofspecifiation']",{'integer': 100}
"['number', 'issue']",{'issue': 100}
"['incorrect', 'vnorm', 'unsafe']",{'incorrect': 100}
"['issue', 'suite']",{'issue': 100}
"['plugins', 'warning', 'dangerousserioussense', 'plugins', 'developerfollow', 'contribution', 'fatal', 'requireallow', 'fatal', 'deprecation']",{'fatal': 100}
"['expose', 'tactic']",{'expose': 100}
"['generation', 'algorithm', 'abstractchange', 'towardsalgorithm']",{'generation': 100}
"['interp', 'numeral', 'important', 'inductiveconstructor', 'issue', 'parameterdetail', 'wrong', 'usingrathersupersedes']",{'issue': 100}
"['thing', 'cargolibraryissue', 'issue', 'withoutnovice', 'distinction']",{'issue': 100}
"['state', 'proof', 'thread', 'warning', 'vernacextra', 'worth', 'warning']",{'thread': 100}
"['incorrect', 'detail']",{'incorrect': 100}
"['mergekernel', 'generation', 'ejgallegogaresppedrot', 'reviewedrgrinberg']",{'generation': 100}
"['kernel', 'opcode', 'generation', 'simplerkernel', 'byterunkernel', 'ocaml', 'program', 'byterunpipeline']",{'generation': 100}
"['integer', 'inductives', 'check', 'primitive']",{'integer': 100}
"['integer', 'primitive', 'manual', 'document']",{'integer': 100}
"['issue', 'geocoq']",{'issue': 100}
"['mergemerge', 'inductives', 'vconv', 'length', 'universe', 'cleanupskyskimmerppedrot']",{'length': 100}
"['integer', 'primitivecompact', 'advantage', 'possiblerepresentation', 'entire', 'integer', 'opposedcomputational', 'useful', 'reductionwithout', 'possible', 'constructingmachinery', 'retroknowledge', 'replacesinteger', 'primitive', 'construction', 'introducesinteger', 'operator', 'constant', 'propertyoperator', 'whereas', 'workshop', 'workingtrace', 'group', 'variouscomputationalbertholon', 'contribution', 'pierre', 'goire', 'benjaminlaporte', 'fondation', 'vincent']",{'integer': 100}
"['adeef', 'aadeemerge', 'template', 'simplify', 'issue']",{'issue': 100}
"['function', 'length']",{'length': 100}
"['inductives', 'vconv', 'length', 'universe', 'cleanup']",{'length': 100}
"['simplify', 'issue', 'github', 'template']",{'issue': 100}
"['buffer', 'emacs']",{'buffer': 100}
"['strict', 'focusingdefault', 'selectorvalue', 'default', 'selector', 'changeemacs', 'message', 'compile', 'repeatedlymaybe', 'buller', 'error', 'buffer', 'proof', 'processerror', 'effect', 'firstwatchbullet', 'bullet', 'majority', 'stackthough', 'finish', 'error', 'systemlemmaindentation', 'weird', 'bullet', 'middlereindenterroremacsbullet', 'stack', 'defconstbulletdefvar', 'bullet', 'local', 'countvalue', 'remainlength', 'bulletcurrent', 'starteddefvar', 'localmaybe', 'error', 'bullet', 'defunerror', 'extract', 'number', 'selectorbuffer', 'responsecurrent', 'buffer', 'string', 'responsematch', 'stringerror', 'group', 'single', 'digitnumber', 'ngoals', 'stringngoalsbullet', 'indent', 'defunupdate', 'indentformat', 'bullet', 'insert', 'countsearch', 'regexp', 'excursionmarkerregion', 'point', 'indentbullet', 'defunlength', 'bullet', 'stackbullet', 'stackerrormaybe', 'error', 'defun', 'optional', 'bulletfunction', 'strict', 'portingprocess', 'proof', 'general', 'repeatedlyfocusingerrormiddle', 'reset', 'statefulerror', 'manualalgorithm', 'expectation', 'actionargument', 'prefixinteractiveunlessmarkerpointbullet', 'countmarkermaybe', 'ngoals', 'bullet', 'errorformat', 'bullet', 'ngoals', 'countngoalsprognbullet', 'countbullet', 'countcount', 'length', 'bullet', 'insert', 'concatbullet', 'countbullet', 'indentngoals', 'bullet', 'countcount', 'length', 'bullet', 'insert', 'concatbullet', 'indentmaybe', 'error', 'bullet']","{'buffer': 100, 'stack': 100, 'length': 100}"
"['issue', 'window', 'cache', 'cygwin', 'installmaximedenes']",{'issue': 100}
"['thread', 'sigalrmtimeout', 'implementation', 'reliablereceive', 'thread']",{'thread': 100}
"['recursive', 'prvectfaster', 'usinguniverseuniversedefinitiondefinitiondefinitiondefinitiondefinitiondefinitiondefinitiondefinitiondefinitiondefinitiondefinitiondefinitiondefinitiondefinitiondefinitiondefinitiondefinitiondefinitiondefinitionuniversemachine', 'overflow']",{'overflow': 100}
"['econstr', 'normalize', 'evars', 'check', 'expose']",{'expose': 100}
"['window', 'issue']",{'issue': 100}
"['projection', 'primitive', 'legacy', 'generatecould', 'special', 'extractionprimitive', 'issue', 'constant', 'projectionrecord', 'automatic', 'unboxingspecial']",{'issue': 100}
"['crypto', 'legacy']",{'crypto': 100}
"['formal', 'removesuggestedbmsherman', 'topology', 'issue']",{'issue': 100}
"['fatal', 'warning', 'makefile', 'refman']",{'fatal': 100}
"['fatal', 'warning', 'makefile', 'refmanlegacy', 'override']",{'fatal': 100}
"['azure', 'issue']",{'issue': 100}
"['issue', 'endingmimick', 'msoegtropimcissuecomment']",{'issue': 100}
"['window', 'cache', 'issue', 'cygwin', 'install']",{'issue': 100}
"['issue', 'window', 'cygwin']",{'issue': 100}
"['incorrect', 'coercion']",{'incorrect': 100}
"['issue', 'cygwin']",{'issue': 100}
"['incorrect', 'coercion']",{'incorrect': 100}
"['dfbffmerge', 'comment', 'warning', 'incorrect']",{'incorrect': 100}
"['issue', 'aactactics', 'master']",{'issue': 100}
"['module', 'window', 'issue', 'support']",{'issue': 100}
"['overlay', 'window', 'issue']",{'issue': 100}
"['window', 'compcert', 'issue', 'addon']",{'issue': 100}
"['incorrect', 'comment', 'warning', 'requisite', 'formattingcomment', 'ocamlformat', 'confusingcomment', 'reading']",{'incorrect': 100}
"['issue', 'abbreviation', 'performance', 'addressingcouple', 'category', 'notationfaster', 'priori', 'notation', 'single', 'scope', 'situationscopenotationscopefirst', 'scope', 'notationscope', 'notationopportunity']",{'issue': 100}
"['figuredworthchangetotalstringpluginsnumber', 'integer', 'abstractzarith', 'binintnumber', 'nbits', 'natural', 'abstractnumber', 'nzlog', 'natintparith', 'pluginsascii', 'stringnarith', 'binnatnumber', 'nzpow', 'natintnumber', 'natint', 'nzsqrtarith', 'peanonatnumber', 'zdivtrunc', 'integer', 'abstractspecifnumber', 'natint', 'nzmulordernumber', 'integer', 'zdivfloor', 'abstractpluginsstructure', 'genericminmaxnumber', 'integer', 'abstractnumber', 'natint', 'nzparitynumber', 'natint', 'nzdivstringnumber', 'integer', 'zsgnabs', 'abstractzeven', 'zarithzarith', 'zordernumber', 'zmulorder', 'integer', 'abstractclass', 'morphismsnumber', 'nzorder', 'natintbinintdef', 'zarithcmorphisms', 'classnumber', 'integer', 'abstractnumber', 'natural', 'abstractlogicnumber', 'natural', 'abstractnumber', 'natural', 'abstractstructure', 'ordersfactszbool', 'zarithnumber', 'integer', 'abstractnumber', 'nzgcd', 'natintzarithnumber', 'integer', 'abstractparithnumber', 'norder', 'natural', 'abstractparith', 'binposdefzcompare', 'zarithrelationclasses', 'classnarithnumber', 'naxioms', 'natural', 'abstractnumber', 'zaddorder', 'integer', 'abstractstructure', 'ordernumber', 'zaxioms', 'integer', 'abstractnumber', 'natint', 'nzaxiomsnumber', 'zmaxmin', 'integer', 'abstractnumber', 'nzadd', 'natintnumber', 'nmaxmin', 'natural', 'abstractnumber', 'nparity', 'pluginspluginslogic', 'decidablestructure', 'orderstacequivalence', 'classdatatypesnumber', 'nzmul', 'natintpluginsnumber', 'nzaddorder', 'natintnumber', 'natural', 'abstractarithclasslogic', 'eqdepfactsnarith', 'binnatdefpluginsarithnumber', 'natural', 'abstractnumber', 'zproperties', 'integer', 'abstractrelationaritharitharithnumber', 'nproperties', 'natural', 'abstractrelationnumber', 'integer', 'abstractnumber', 'nbase', 'natural', 'abstractnumber', 'natural', 'abstractclassaritharithnumber', 'nzbase', 'natintnumber', 'nmulorder', 'natural', 'abstractrelationplugins', 'binlistarith', 'eqnatstructure', 'equalityaritharith', 'minusdecimalnumber', 'integer', 'zbase', 'abstractnumber', 'integer', 'abstractnumber', 'integer', 'zparity', 'abstractnumber', 'naddorder', 'natural', 'abstractarith', 'factoriallisttacticslogicnumber', 'natural', 'abstractpeanobasic', 'programarithsumboolnumber', 'nsqrt', 'natural', 'abstractaritharithnumber', 'binnumsnumber', 'natint', 'nzbitsnumber', 'nzproperties', 'natinttactic', 'programtacticsetoidtactics', 'classnumber', 'numpreludeclasspreludesetoid', 'setoidsrelationtautonotation']",{'integer': 100}
"['return', 'fprod', 'check', 'stack']",{'stack': 100}
"['incorrect', 'unidecls']",{'incorrect': 100}
"['incorrect', 'algebraic', 'refresh']",{'incorrect': 100}
"['phase', 'toplevel', 'attribute', 'topfmtphase', 'localizedgares', 'problematic', 'attributetoplevel', 'localbetter', 'scope', 'imperativeprogress', 'interactive', 'separation', 'allowscompilationquite', 'issue', 'feedback', 'stillfeedback', 'idetop', 'clientmessage', 'issue', 'example']",{'issue': 100}
"['update', 'dockerupdate', 'versioncharacter', 'extractionerror', 'constraint', 'satisfiedinitstate', 'instanceappears', 'issue', 'ocaml', 'compilerhence']",{'issue': 100}
"['guardedness', 'issue', 'vernac']",{'issue': 100}
"['sensitive', 'tactic', 'making', 'scope', 'interpretation']",{'Sensitive': 100}
"['incorrect', 'modintern']",{'incorrect': 100}
"['issue', 'entry', 'suite']",{'issue': 100}
"['narith', 'length', 'argument']",{'length': 100}
"['mergemerge', 'coqide', 'uncaught', 'sequence', 'issue']",{'issue': 100}
"['fecddmerge', 'coinductive', 'document', 'issue']",{'issue': 100}
"['rebindable', 'coqliblocate', 'namespace', 'object', 'coqlib', 'refactorcommand', 'vernacular', 'expose', 'register', 'constant', 'dynamicallyemilio', 'fondation', 'vincent']",{'expose': 100}
"['addons', 'issue']",{'issue': 100}
"['window', 'addons', 'issue']",{'issue': 100}
"['crypto', 'script']",{'crypto': 100}
"['window', 'issue']",{'issue': 100}
"['gitlab', 'window', 'issue']",{'issue': 100}
"['issue', 'batch']",{'issue': 100}
"['important', 'issue', 'batch']",{'issue': 100}
"['ebcbdefolder', 'issue']",{'issue': 100}
"['folder', 'issue', 'window']",{'issue': 100}
"['guardedness', 'issue', 'algorithmic', 'vernacfunction']",{'issue': 100}
"['issue', 'syntax']",{'issue': 100}
"['issue', 'production', 'label', 'duplicate']",{'issue': 100}
"['sphinx', 'issue']",{'issue': 100}
"['sphinx', 'issue']",{'issue': 100}
"['coqrst', 'plugin', 'metadatasphinx', 'requiredsphinx', 'issue']",{'issue': 100}
"['index', 'latex', 'separatesphinx', 'issue']",{'issue': 100}
"['synch', 'numeral', 'notation', 'fixingsupersedes', 'closecommand', 'notation', 'vernacular', 'numeralfunction', 'interpretationplugin', 'notation', 'numeral', 'suggests', 'suitehandle', 'worker', 'delegation', 'correctlydeclare', 'state', 'module', 'declaredchange', 'notation', 'synchronization', 'final', 'numeraldeclaration', 'notation', 'numeral', 'synchronizeconstant']",{'synch': 100}
"['obligation', 'proof', 'default', 'issue', 'equation', 'definitionmemoryissue', 'equation', 'mattam']",{'issue': 100}
"['buildingcompositional', 'declarative', 'ocamlgeneration', 'automatic', 'providesdocumentation', 'installintegration', 'management', 'externalmodularregardless', 'component', 'uniformlysimplifies', 'greatlycurrent', 'plugin', 'versaflexibleprovide', 'support', 'experimental', 'orderstandard', 'library', 'buildworldpreview', 'developer', 'customprovide', 'script', 'small', 'helpergenerate', 'script', 'library', 'directorycorrespondingcoqdep', 'script', 'output', 'dependency', 'correctlyproject', 'stagegenerate', 'coqdep', 'buildbuild', 'regular', 'plugins', 'developer', 'spentcurrent', 'currentvariable', 'error', 'integration', 'ocamlcritical', 'ocamlfind', 'pointpartycurrent', 'system', 'shortcomingproject', 'variety', 'howeverocaml', 'specific', 'buildbuild', 'system', 'systempotential', 'defaultprovide', 'completeready', 'system', 'preview', 'developernecessary', 'orderdefaulttodos', 'issue', 'trackedfeature', 'developer', 'allowsorganization', 'component', 'codebase', 'modular', 'builtdependency', 'componentcontainmentartifact', 'hygienic', 'generation', 'automaticopaque', 'developernative', 'fasterdependency', 'requireocaml', 'package', 'partybenchstate', 'duneoptavgtext', 'maxresident', 'avgdatainput', 'pagefaults', 'major', 'output', 'minorstate', 'local', 'configure', 'native', 'compileravgtext', 'maxresident', 'avgdatainput', 'pagefaults', 'major', 'output']","{'issue': 100, 'generation': 100}"
"['issue', 'output']",{'issue': 100}
"['numeral', 'notationmethod', 'previous', 'largeabstract', 'literal', 'leavingconvertibleclosedexcept', 'relies', 'stuffcomputation', 'presentraise', 'stack']",{'stack': 100}
"['timeout', 'issue']",{'issue': 100}
"['sphinx', 'issue']",{'issue': 100}
"['dbacdf', 'mergemerge', 'crypto', 'extraction']",{'crypto': 100}
"['bcebfb', 'mergemerge', 'crypto']",{'crypto': 100}
"['adfca', 'mergemerge', 'incorrect', 'download', 'issue', 'ocaml']","{'incorrect': 100, 'issue': 100}"
"['download', 'issue', 'ocaml', 'incorrect']","{'issue': 100, 'incorrect': 100}"
"['issue', 'regression']",{'issue': 100}
"['expose', 'vector']",{'expose': 100}
"['issue', 'content', 'printargument', 'diffs', 'update', 'reflect']",{'issue': 100}
"['constructor', 'restore', 'reduction', 'expose', 'coercion']",{'expose': 100}
"['expose', 'entry']",{'expose': 100}
"['efbebbmerge', 'notation', 'issue', 'application']",{'issue': 100}
"['issue', 'application', 'notation', 'nestedexplicit', 'reason', 'collapse']",{'issue': 100}
"['issue', 'window', 'unbound']",{'issue': 100}
"['eaeacscroll', 'buffer', 'coqide', 'proof']",{'buffer': 100}
"['issue', 'window', 'unbound']",{'issue': 100}
"['scroll', 'buffer', 'coqide', 'proof']",{'buffer': 100}
"['feccad', 'afdbcmerge', 'window', 'issue', 'equation']",{'issue': 100}
"['window', 'issue', 'equationissue']",{'issue': 100}
"['crypto', 'gitlab']",{'crypto': 100}
"['crypto', 'gitlab']",{'crypto': 100}
"['adapting', 'checkerwrong', 'checker', 'unavailablesubstitution', 'backdoor', 'usefulponzi', 'blockchain']",{'backdoor': 100}
"['specific', 'dockerfragile', 'menhir', 'packagedeterministic', 'dockefile', 'installspecify', 'concrete', 'trouble', 'menhirversioncompcert', 'issue', 'absintdependency', 'hevea', 'removebuild', 'texlive', 'sciencetextgreek', 'package', 'target', 'source']",{'issue': 100}
"['compcert', 'temporalcompcert', 'issue', 'absint']",{'issue': 100}
"['faaadmerge', 'compute', 'native', 'overflow', 'stack']","{'overflow': 100, 'stack': 100}"
"['compute', 'native', 'overflow', 'stackinteger', 'retroknowledge', 'matchine']",{'overflow': 100}
"['mergemerge', 'target', 'crypto', 'memory']",{'crypto': 100}
"['target', 'crypto', 'memory']",{'crypto': 100}
"['afcdd', 'dfdffmerge', 'target', 'crypto', 'sequence']",{'crypto': 100}
"['standalone', 'toplevelsstandalone', 'coqtop', 'customizationgiven', 'plugins', 'couldclean', 'problem', 'solveslocate', 'coqtop', 'needingplugins', 'toplevel', 'issue', 'dependencyorder', 'toplevel', 'cleanup', 'minor', 'implementuniform', 'librarytopbin', 'containsbinary', 'coqidelocate']",{'issue': 100}
"['removebehavior', 'bulletnatural', 'integer', 'replaces']",{'integer': 100}
"['window', 'appveyor', 'issue']",{'issue': 100}
"['window', 'issue', 'strip']",{'issue': 100}
"['kernel', 'status', 'normalization', 'thinghappen', 'machine', 'subterm', 'everyupdate', 'implies', 'stack', 'pushedunzip', 'unset', 'stack']",{'stack': 100}
"['mergemerge', 'display', 'crypto', 'target']",{'crypto': 100}
"['display', 'crypto', 'targetcatch', 'thingissuecomment']",{'crypto': 100}
"['restore', 'dummy', 'backup', 'expose']",{'expose': 100}
"['restore', 'dummy', 'backup', 'expose']",{'expose': 100}
"['issue', 'mingw', 'install']",{'issue': 100}
"['issue', 'mingw']",{'issue': 100}
"['issue', 'whitespace']",{'issue': 100}
"['dabdd', 'badec', 'mergecoqdep', 'argument', 'vdfile', 'crypto']",{'crypto': 100}
"['modifycoqtop', 'command', 'strategy', 'wouldwelcome', 'printingbunch', 'issue', 'silent', 'unsetredisplay', 'command', 'detectsilent', 'uncouple', 'print']",{'issue': 100}
"['dependsdepend', 'python', 'homebrew', 'explicitlypython', 'fatal', 'libxml', 'install']",{'fatal': 100}
"['tactic', 'rewrite', 'monad', 'ssrview', 'ssripatswritten', 'ssrview', 'ssripats', 'tacticssripats', 'implementapplication', 'ssrview', 'implementbackward', 'accordingdocumentedcorrect', 'context', 'moreover', 'interpretextend', 'argument', 'interp', 'tacticextend', 'execution', 'visibility', 'incorrect', 'stillremovedchangestate', 'machine', 'pattern', 'tacticenrichclean', 'implementationbunch', 'redefine', 'order', 'tclstuff', 'threadforward', 'multiple', 'interpretation', 'stateresult', 'accumulate', 'intermediatebunch', 'sscommon', 'utility']",{'incorrect': 100}
"['mergemerge', 'timing', 'failure', 'spurious', 'issue']",{'issue': 100}
"['representation', 'purpose', 'intermediateprimitive', 'preliminary', 'machine', 'iteratorscompiledcloser', 'compilationrepresentation', 'unifiyfactorize', 'generation', 'lambdareificationwritten', 'goire', 'benjamin']",{'generation': 100}
"['variable', 'compilation', 'bytecode', 'globalinstead', 'thread']",{'thread': 100}
"['issue', 'spurious', 'failure', 'timingnumber', 'width', 'tableissuecomment']",{'issue': 100}
"['semantics', 'allowedvalue', 'issue', 'silent', 'verbose', 'silentlymodification', 'updatedacdaeffdccc', 'introducedmessy', 'semantics', 'preservesilent', 'order', 'systemconsistent', 'previousmaybe', 'confusedcould', 'clean', 'semantics', 'saner', 'restore', 'ideallyremove', 'silent', 'altogether', 'system']",{'issue': 100}
"['focus', 'vernacular', 'control', 'issue']",{'issue': 100}
"['number', 'comment', 'issue', 'travis']",{'issue': 100}
"['mergeupdate', 'issue']",{'issue': 100}
"['update', 'issue', 'location']",{'issue': 100}
"['issue', 'suite']",{'issue': 100}
"['flash', 'issue']",{'issue': 100}
"['removevariable', 'issue', 'unsafe']",{'issue': 100}
"['issue', 'database']",{'issue': 100}
"['fresh', 'cleanup', 'bindingrecord', 'substitution', 'simplyvariable', 'compose', 'properlyvariable', 'generation', 'fresh', 'clash']",{'generation': 100}
"['incorrect', 'message', 'lambda']",{'incorrect': 100}
"['implementation', 'circlegitlabgitlab', 'crypto', 'product', 'buildvalidate', 'flambdaleast', 'check', 'possiblelinter']",{'crypto': 100}
"['update', 'constructor', 'sharedkernel', 'stack']",{'stack': 100}
"['issue', 'ocaml', 'warning', 'deprecation']",{'issue': 100}
"['extra', 'issue']",{'issue': 100}
"['constant', 'declaredmonomorphic', 'globallyprintedmodule', 'clash', 'constanterror', 'varref', 'universe', 'binder', 'problemaround', 'simplify', 'substructure', 'passingaround', 'structure', 'declaration', 'interpretation', 'carrierconstant', 'proofstronger', 'universe', 'issue', 'context']",{'issue': 100}
"['injection', 'template', 'polymorphic', 'particular', 'singleton', 'inductiveequality', 'proof', 'absence', 'option']",{'injection': 100}
"['temporary', 'issue']",{'issue': 100}
"['bddbd', 'mergebugzilla', 'issue', 'github', 'migration']",{'issue': 100}
"['color', 'coqide', 'warning', 'issue', 'attempt']",{'issue': 100}
"['sensitive', 'alphabet']",{'Sensitive': 100}
"['issue', 'github', 'migration']",{'issue': 100}
"['error', 'color', 'warning', 'issue', 'attempterror', 'relative', 'priority', 'changeerrorunsure', 'location', 'universallyerror', 'mightunderstand', 'warningmaybe', 'relative', 'location', 'policyerror', 'warningcurrent', 'error']",{'issue': 100}
"['issue', 'github']",{'issue': 100}
"['version', 'issue', 'information']",{'issue': 100}
"['functional', 'switchopaque', 'functional', 'allowsbetter', 'toplevel', 'picturealmost', 'functional', 'switchinginitialization', 'document', 'expose', 'protocol']",{'expose': 100}
"['solves', 'extractiontrigger', 'simplificationinstance', 'simplificationsince', 'favor', 'extractionvariable', 'issue', 'avoidproblematic', 'atomic', 'reduction', 'applicationfunction']",{'issue': 100}
"['ecdab', 'mergeefficient', 'generation']",{'generation': 100}
"['abaab', 'mergemerge', 'empty', 'thread', 'creation']",{'thread': 100}
"['efficient', 'generation', 'fresh', 'relyingalgorithm', 'relyingnefarious']",{'generation': 100}
"['mergemerge', 'parameter', 'treatment', 'incorrect', 'inductive']",{'incorrect': 100}
"['overflow', 'reduction']",{'overflow': 100}
"['compile', 'buffer']",{'buffer': 100}
"['empty', 'thread', 'creationenrico', 'example', 'minimalissue', 'ocaml']",{'thread': 100}
"['project', 'buffer', 'compile']",{'buffer': 100}
"['workaround', 'issue']",{'issue': 100}
"['issue', 'ocamlrunparam']",{'issue': 100}
"['generation', 'thread']","{'generation': 100, 'thread': 100}"
"['restructurationmessage', 'notation', 'issue', 'incompatiblesumbool', 'notation', 'level']",{'issue': 100}
"['error', 'inductives', 'cumulative', 'monomorphic', 'issue']",{'issue': 100}
"['sensitive', 'choice', 'surprising', 'causedvariable', 'ascii', 'projection', 'solution', 'problemvariable', 'solution', 'involveddeclaration', 'usingdependent', 'solution', 'impliesdependent']",{'Sensitive': 100}
"['module', 'ordergraph', 'declaration', 'dependency', 'module', 'interface', 'ocaml', 'implementationalias', 'module', 'design', 'dependency', 'resortingbecomenumber', 'namespaces', 'expose', 'largeequality', 'namespace', 'howeversolve', 'problem', 'firstdeclaredinvariant', 'general', 'followdeclaredmaybe', 'upstream', 'ocaml', 'trickyalias', 'objectbecome', 'compilationcarefulremove', 'order', 'declaration', 'allowsdeclarationconsideralias', 'number', 'maintainfuture', 'removedexcept', 'mllib', 'order', 'correctmatter']",{'expose': 100}
"['haskell', 'revert', 'extractionhence', 'dummy', 'tdummy', 'polymorphicunsafecoerce', 'pratice', 'immune', 'quitevalue', 'mldummy', 'confusion', 'dummyhence', 'haskell', 'dummy', 'monomorphic', 'tdummy', 'involvinghaskell', 'instance', 'convertible', 'tdummy', 'implementreport', 'example', 'shownunsafecoerce', 'haskell', 'bringextra', 'unsafecoerce', 'hinder', 'spuriousconstructor', 'mitigate', 'mlmagic', 'mldummy', 'front', 'triedmention', 'report', 'universe', 'issue', 'universe', 'polymorphism', 'template', 'instance', 'polymorphism', 'warning', 'repro']",{'issue': 100}
"['abfcfca', 'mergepretty', 'printer', 'incorrect', 'thunk']",{'incorrect': 100}
"['bfcbfmerge', 'crypto']",{'crypto': 100}
"['coqbin', 'coqlib', 'issue']",{'issue': 100}
"['libpcre', 'issue', 'dependency']",{'issue': 100}
"['setting', 'proxy', 'issue']",{'issue': 100}
"['dbbcb', 'mergeproper', 'target', 'crypto']",{'crypto': 100}
"['invocation', 'njobs', 'removeaccordingmanual', 'softwarelevel', 'njobsinvocation', 'passingerror', 'message', 'resultjobserver', 'unfinishedjobserver', 'writeerror', 'coqprimejobserver', 'token', 'availablebuild', 'jasongross', 'directory', 'travisscriptjobserver', 'submake', 'coqprime', 'crypto', 'disablesreenables', 'jobserver', 'explicitlycommitxargs', 'njobsxargs', 'njobs']",{'crypto': 100}
"['incorrect', 'informationinductive']",{'incorrect': 100}
"['cbdbc', 'mergeerror', 'print', 'toplevel', 'batch', 'fatal', 'header']",{'fatal': 100}
"['import', 'travis', 'crypto', 'funind', 'overlay']",{'crypto': 100}
"['error', 'print', 'toplevel', 'batch', 'fatal', 'header']",{'fatal': 100}
"['generation', 'constraint', 'univsalgebraic', 'explicit', 'label']",{'generation': 100}
"['bytecode', 'makefile', 'compilation', 'insteadmachine', 'ocamlopt', 'worldbytecode', 'syntax', 'compilation', 'grammarextension', 'exclusivelybuild', 'worldbytecode', 'plugins', 'separatethinginstall', 'builtinstalls', 'install', 'important', 'avoidnative', 'parallel', 'crash', 'marginal', 'speed', 'compilationdiscourage', 'reason', 'commitnative', 'ocaml', 'ocamlopt', 'simultaneousrecreate', 'ocamlc', 'destroyhappen', 'parallel', 'momentissue', 'ocaml', 'accessingformer', 'nasty', 'hackmli', 'mlwithoutmliextend', 'ocamlopt', 'obviousocamloptdeclare', 'dyndep', 'control', 'optionpossible', 'module', 'value', 'dependencyregular', 'dyndep', 'situation', 'dependsdyndep', 'compilationdyndep', 'dependency', 'earliercoqtop', 'plugins', 'dyndep', 'interestingvariable', 'dynobj', 'place', 'dyndep', 'dynlib', 'makefileextension', 'future', 'commitextra', 'building', 'world', 'unecessary', 'coqmktop', 'unlessfirst']",{'crash': 100}
"['infer', 'precise', 'support', 'informationbetter', 'control', 'allowsepose', 'address', 'issue', 'producedcomment', 'zimmi', 'number', 'output']",{'issue': 100}
"['eremember', 'epose', 'allowconsistencyrefer', 'epose', 'eremember', 'supposedhence', 'general', 'leavingmodifier', 'guessdiscussion', 'difference']",{'expose': 91}
"['eenough', 'state', 'epose', 'eassert', 'proof']",{'expose': 91}
"['execution', 'permission', 'suite']",{'permission': 100}
"['vernac', 'removecleanup', 'smallerconstruction', 'handledopaque', 'environment', 'alterprocessedcomplexity', 'simplyseems', 'issue']",{'issue': 100}
"['shorter', 'romega', 'trace', 'length']",{'length': 100}
"['precedence', 'issue']",{'issue': 100}
"['issue', 'algorithmicelement', 'continuouslyworst', 'quadraticoverflow', 'stack', 'solves']","{'issue': 100, 'stack': 100}"
"['incorrect', 'revert']",{'incorrect': 100}
"['incorrect', 'couple']",{'incorrect': 100}
"['cleanup', 'minorconversion', 'stringintermediate', 'buffer', 'creationrename', 'function', 'share', 'localdangerous', 'function', 'normal', 'usuallydifferent']",{'buffer': 100}
"['example', 'overflow', 'stack', 'curentelsewhereempty', 'algorithm']","{'overflow': 100, 'stack': 100}"
"['eager', 'future', 'evaluationcurrent', 'future', 'system', 'chainingfuture', 'implies', 'produceresolvedinteracts', 'misfeature', 'purification', 'badlystate', 'swarm', 'provokes', 'setting', 'spuriousnatural', 'revert', 'semanticssemantics', 'evaluation', 'respectingprevious', 'resolution', 'respectingcurrent', 'accumulation', 'circumstancesplit', 'chainchainforce', 'ignore', 'greedyclosureforce', 'ignore', 'closureforce', 'closuretriggeringspurious', 'reset', 'stateproblem', 'notedcoqdev', 'sympaseems', 'problem', 'wouldgiven', 'chainrecommenddifference', 'dramaticfreezetheorytheorytheorytheorytheorytheorytheorytheorytheorytheorytheoryprogramclassprogramrelationclassclassclassclassclassclassclasssetoidsstructurerelationrelationrelationstructurenumberstructurestructurestructurenumber', 'natintnumber', 'natintnumber', 'natintnumber', 'natintlogicnumber', 'natintnumber', 'natintnumber', 'natintnumber', 'natintnumber', 'natintnumber', 'natintnumber', 'natintnumber', 'natintnumber', 'natintnumber', 'natintnumber', 'natural', 'abstractnumber', 'natintnumber', 'natural', 'abstractnumber', 'natural', 'abstractnumber', 'natural', 'abstractnumber', 'natural', 'abstractnumber', 'natural', 'abstractnumber', 'natural', 'abstractnumber', 'natural', 'abstractnumber', 'natural', 'abstractnumber', 'natural', 'abstractnumber', 'natural', 'abstractnumber', 'natural', 'abstractnumber', 'natural', 'abstractnumber', 'natural', 'abstractnumber', 'natural', 'abstractnumber', 'natural', 'abstractnumber', 'natural', 'abstractaritharitharitharitharitharitharitharithlogiclogicaritharitharitharitharitharithnumberparithparithnarithnarithparithnarithnumber', 'integer', 'abstractnumber', 'integer', 'abstractnumber', 'integer', 'abstractnumber', 'integer', 'abstractnumber', 'integer', 'abstractnumber', 'integer', 'abstractnumber', 'integer', 'abstractnumber', 'integer', 'abstractnumber', 'integer', 'abstractnumber', 'integer', 'abstractnumber', 'integer', 'abstractnumber', 'integer', 'abstractnumber', 'integer', 'abstractnumber', 'integer', 'abstractnumber', 'integer', 'abstractnumber', 'integer', 'abstractnumber', 'integer', 'abstractzarithzarithbetter']",{'integer': 100}
"['incorrect', 'install']",{'incorrect': 100}
"['generates', 'incorrect', 'install']",{'incorrect': 100}
"['mllib', 'mlpack', 'relies', 'stillparty', 'module', 'issue']",{'issue': 100}
"['buffer', 'switch', 'string']",{'buffer': 100}
"['issue', 'complexity', 'extractiondouble', 'complexity', 'modularextractedfigure', 'double', 'couldleftover', 'producepretty', 'bunch', 'signature', 'largestate', 'signature', 'actuallyalias', 'wrong', 'unambiguous', 'equality', 'version', 'inductivesolution', 'funnystruct', 'module', 'includestruct', 'module', 'doubt', 'object']",{'issue': 100}
"['issue', 'complexity', 'extractiondouble', 'complexity', 'modularextractedfigure', 'double', 'couldleftover', 'producepretty', 'bunch', 'signature', 'largestate', 'signature', 'actuallyalias', 'wrong', 'unambiguous', 'equality', 'version', 'inductivesolution', 'funnystruct', 'module', 'includestruct', 'module', 'doubt', 'object']",{'issue': 100}
"['issue', 'complexity', 'extractiondouble', 'complexity', 'modularextractedfigure', 'double', 'couldleftover', 'producepretty', 'bunch', 'signature', 'largestate', 'signature', 'actuallyalias', 'wrong', 'unambiguous', 'equality', 'version', 'inductivesolution', 'funnystruct', 'module', 'includestruct', 'module', 'doubt', 'object']",{'issue': 100}
"['color', 'floqc', 'class', 'crypto', 'external', 'coquelicot', 'travisready', 'metacoq']",{'crypto': 100}
"['version', 'crash', 'configure', 'string']",{'crash': 100}
"['injection', 'presence', 'fixingdecide']",{'injection': 100}
"['concurrentallow', 'output', 'refmancommit', 'single', 'turning', 'issue', 'dummy', 'handleperfect', 'solution', 'delete', 'manuallyauxiliary', 'rebuilt']",{'issue': 100}
"['successful', 'prevents', 'incorrect', 'compilation']",{'incorrect': 100}
"['width', 'richpp', 'internal', 'richpp', 'output', 'formatterproper', 'width', 'seededincrease', 'buffer', 'defaultsensible']",{'buffer': 100}
"['incorrect', 'multiplicationresultsubsequent', 'architecture', 'patch', 'definition', 'incorrectlynever']",{'incorrect': 100}
"['argument', 'length', 'check']",{'length': 100}
"['argument', 'overhaul', 'argument', 'issue', 'occurringassertprefix', 'semantics', 'meantoriginal', 'restore', 'inferredcurrent', 'changeargument', 'syntax', 'modifierargument', 'scope', 'input', 'check', 'value', 'variouscomplex', 'stillimplicit', 'behavior', 'complexity', 'reduction']",{'issue': 100}
"['incorrect', 'assertion', 'removeargument', 'position', 'assertion', 'check']",{'incorrect': 100}
"['insensitive', 'redundant', 'minimizationhence', 'algorithm', 'developmentapproximate', 'result', 'minimization', 'correctgraph', 'algorithm', 'bottom', 'foundedupper', 'level', 'level', 'lowerappearperformance', 'impactevaluatedadapt', 'suite']",{'Sensitive': 90}
"['messageproper', 'error', 'order', 'headercerror', 'messagecould', 'hopingrichpp', 'crash']",{'crash': 100}
"['documentation', 'improveeauto', 'simple', 'available', 'sincebetter', 'description', 'thread']",{'thread': 100}
"['incorrect', 'error', 'numbercould', 'ftactic', 'result', 'number', 'effect', 'differentbranch', 'dispatch']",{'incorrect': 100}
"['separator', 'string', 'optionbetter', 'comma', 'commandfewer', 'issue']",{'issue': 100}
"['possible', 'solution', 'warning', 'issue']",{'issue': 100}
"['search', 'speedblacklist', 'blacklist', 'environmentalready', 'knowncommit', 'performancevalue', 'boolean', 'alreadyvalue', 'boolean', 'lazilycontains', 'noticeable', 'blacklist']",{'blacklist': 100}
"['incorrect', 'assertion', 'removeargument', 'position', 'assertion', 'check']",{'incorrect': 100}
"['partial', 'stacktactic', 'overflow', 'stackfunction', 'recursive']",{'overflow': 100}
"['feedback', 'atomicbetter', 'mutex', 'wouldstill', 'thread', 'favormutexes']",{'thread': 100}
"['generation', 'micromega', 'proof', 'assert', 'independentlyconversion', 'stress', 'reducesnatural', 'proof', 'abstractcertain']",{'generation': 100}
"['incorrect', 'module', 'symbolbackward', 'logic', 'prefix', 'symbolcurrent', 'section', 'prefixformerdocumentation']",{'incorrect': 100}
"['example', 'recursive', 'emphasis', 'referenceinclude', 'wouldconversion', 'identify', 'alpha', 'length', 'bindercould', 'example']",{'length': 100}
"['firstrecursive', 'pattern', 'alpha', 'conversion', 'issue']",{'issue': 100}
"['generation', 'automate']",{'generation': 100}
"['babcaf', 'mergemerge', 'remote', 'githuberror', 'double', 'coqide', 'module', 'fatal', 'warning', 'ocaml']",{'fatal': 100}
"['bytecode', 'makefile', 'compilation', 'insteadmachine', 'ocamlopt', 'worldbytecode', 'syntax', 'compilation', 'grammarextension', 'exclusivelybuild', 'worldbytecode', 'plugins', 'separatethinginstall', 'builtinstalls', 'install', 'important', 'avoidnative', 'parallel', 'crash', 'marginal', 'speed', 'compilationdiscourage', 'reason', 'commitnative', 'ocaml', 'ocamlopt', 'simultaneousrecreate', 'ocamlc', 'destroyhappen', 'parallel', 'momentissue', 'ocaml', 'accessingformer', 'nasty', 'hackmli', 'mlwithoutmliextend', 'ocamlopt', 'obviousocamloptdeclare', 'dyndep', 'control', 'optionpossible', 'module', 'value', 'dependencyregular', 'dyndep', 'situation', 'dependsdyndep', 'compilationdyndep', 'dependency', 'earliercoqtop', 'plugins', 'dyndep', 'interestingvariable', 'dynobj', 'place', 'dyndep', 'dynlib', 'makefileextension', 'choicemakefile', 'commitextra', 'building', 'world', 'unecessary', 'coqmktop', 'unlessfirst']",{'crash': 100}
"['cleanup', 'program', 'optioncoercion', 'unset', 'general', 'programdeactivate', 'generation', 'unset', 'equality', 'programdisequalities']",{'generation': 100}
"['potential', 'mitigate', 'multiple', 'issue', 'creation']",{'issue': 100}
"['injection', 'context', 'suiteinjection', 'structural', 'compatibility']",{'injection': 100}
"['counter', 'thread', 'socketscenariocoqide', 'proof', 'worker', 'masterworker', 'proofworkerworkerworkeractor', 'installs', 'counter', 'universe', 'remoteactor', 'multiple', 'thread', 'requestedvalue', 'counterstory', 'complex', 'scenario', 'mutexhence', 'counter', 'control', 'threadmaster', 'reading', 'socketcorruptingbetter', 'fresh', 'solution', 'unique', 'generate', 'universe']",{'thread': 100}
"['counter', 'thread', 'socketscenariocoqide', 'proof', 'worker', 'masterworker', 'proofworkerworkerworkeractor', 'installs', 'counter', 'universe', 'remoteactor', 'multiple', 'thread', 'requestedvalue', 'counterstory', 'complex', 'scenario', 'mutexhence', 'counter', 'control', 'threadmaster', 'reading', 'socketcorruptingbetter', 'fresh', 'solution', 'unique', 'generate', 'universe']",{'thread': 100}
"['incorrect', 'library', 'checkingsummary', 'library', 'sincequick', 'performs', 'actual', 'content']",{'incorrect': 100}
"['buffer', 'cooking', 'increase', 'notation', 'dumpglobterminal', 'character', 'single']",{'buffer': 100}
"['simpl', 'nomatch', 'infinite', 'overflow', 'stackmachinery', 'simpl', 'nomatch', 'reduction', 'encounteringunfold', 'subsequent', 'reduction', 'partial', 'producematch', 'previous', 'infinite', 'reductiondelay', 'patch', 'reductionalwaysdisclaimer', 'patch', 'library', 'suiteenough']",{'overflow': 100}
"['incorrect', 'primitive', 'reductioncyprien', 'report', 'wouldstack', 'reductionstack', 'sense']",{'incorrect': 100}
"['ocaml', 'incompatibility', 'assertion', 'failure', 'issue', 'compilation', 'problematic']",{'issue': 100}
"['incorrect', 'fixingproductbackport', 'dcbce']",{'incorrect': 100}
"['incorrect', 'fixingproducterror', 'raising', 'turnedformer', 'error']",{'incorrect': 100}
"['incorrect', 'behavior', 'resolutionannotation', 'structure', 'unification', 'problemhence', 'force', 'normalizedensure', 'normalization', 'solution', 'dependency', 'erasablecodomain']",{'incorrect': 100}
"['fixingcamlp', 'keywords', 'reuse', 'weird', 'trickthough', 'identifier', 'commitkeyword', 'issue', 'identifier']",{'issue': 100}
"['tactic', 'tauto', 'properbrittle', 'writtenparticular', 'dependance', 'instance', 'issue']",{'issue': 100}
"['tentative', 'incorrect']",{'incorrect': 100}
"['length', 'number', 'patternassumption', 'destruction', 'hypothesis', 'inductionargument', 'local', 'pattern', 'definitionconstructor']",{'length': 100}
"['dynlink', 'printer', 'warning', 'module', 'default', 'fatal', 'warningocaml']",{'fatal': 100}
"['injection', 'presence']",{'injection': 100}
"['unexpected', 'length', 'context', 'typingcleaningconsequence', 'reductionreturn', 'clause', 'arityreturn', 'priori']",{'length': 100}
"['pretty', 'issue', 'print', 'extractionformat']",{'issue': 100}
"['conversion', 'alpha', 'length']",{'length': 100}
"['generation', 'rigid', 'universeinverse', 'applicationconstraint', 'lemma', 'universe']",{'generation': 100}
"['equality', 'generation', 'polymorphic', 'scheme']",{'generation': 100}
"['generation', 'univs', 'useless', 'scheme', 'induction', 'generatedreuse', 'block', 'inductive', 'instanceoriginal', 'force', 'universe', 'contextuniverse']",{'generation': 100}
"['multiple', 'generation', 'graphfunction', 'pattern']",{'generation': 100}
"['thanks', 'complexity', 'issue', 'jourdanreportingsecond']",{'issue': 100}
"['proper', 'entry', 'givenentry', 'present', 'entry', 'marshallablefunctional', 'module', 'describe', 'stringlittle', 'issue', 'abstractcamlp', 'entrymodule', 'association', 'synchronizedmaintain']",{'issue': 100}
"['debug', 'crash', 'outputseems', 'spline', 'crash', 'ortho']",{'crash': 100}
"['expose', 'length', 'tqueues', 'tqueue']","{'expose': 100, 'length': 100}"
"['cthread', 'thread']",{'thread': 100}
"['function', 'univsalways', 'typecheckgraph', 'global', 'universe', 'initializedresult', 'failure', 'thread', 'initialize']",{'thread': 100}
"['preference', 'buffer']",{'buffer': 100}
"['revert', 'system', 'check', 'macos', 'bafde', 'filenamereverts', 'commitsdebfbcddefeafaware', 'sensitive', 'system', 'costly', 'stdlib']",{'Sensitive': 100}
"['assertion', 'invariant', 'integer', 'checkoutside']",{'integer': 100}
"['support', 'parserleast', 'issue']",{'issue': 100}
"['priorcoqdep', 'argument', 'generation', 'implicitmistake', 'removedargument', 'coqdep', 'mllib', 'incorrect', 'output']","{'generation': 100, 'incorrect': 100}"
"['generation', 'ocamllibdep']",{'generation': 100}
"['evarconv', 'clearer', 'stack']",{'stack': 100}
"['native', 'debug', 'fatal', 'compiler']",{'fatal': 100}
"['invocation', 'ocaml', 'compiler', 'ocamlfindcamlp', 'issue', 'camlbindir']",{'issue': 100}
"['rewrite', 'metas', 'refreshvariable', 'integer', 'rewrite', 'tactic', 'runtime', 'causevariable', 'rewrite', 'startingissue', 'failure', 'manifestation', 'variousvariable', 'number', 'variousfailure', 'reportedjason', 'grossfirst', 'place']",{'integer': 100}
"['global', 'simpl', 'honorinteger', 'overflow']",{'overflow': 100}
"['queue', 'thread']",{'thread': 100}
"['trivial', 'workaround', 'document', 'issue', 'inductive']",{'issue': 100}
"['insert', 'modifiedmodification', 'buffer', 'register', 'point', 'offset']",{'buffer': 100}
"['universe', 'contextdefinition', 'thread', 'typecheck']",{'thread': 100}
"['cthread', 'windwos', 'lockup', 'aggressive', 'workaround', 'thread']",{'thread': 100}
"['atomic', 'potentiallyensures', 'tactic', 'patch', 'atomic', 'generatedmacro', 'length', 'rightentry', 'trouble', 'tacticlegacy', 'doubt']",{'length': 100}
"['issue', 'bruijn', 'compatibility', 'constructingconstr', 'record', 'primitivelefanu', 'problem', 'lumsdaine', 'reportedpretty']",{'issue': 100}
"['coqide', 'compilation', 'thread', 'requirement']",{'thread': 100}
"['flush', 'buffer', 'coqchk']",{'buffer': 100}
"['place', 'inliningcreation', 'thread']",{'thread': 100}
"['issue', 'checker', 'performance', 'fixingprocess', 'validation', 'construction', 'passingcurrent']",{'issue': 100}
"['generation', 'invariant', 'hashcons', 'table']",{'generation': 100}
"['thread', 'tqueue']",{'thread': 100}
"['friendly', 'cthread', 'different', 'thread']",{'thread': 100}
"['revert', 'plugins', 'permission', 'correctlyreverts']",{'permission': 100}
"['proper', 'implementation', 'threaddependency', 'introduces', 'exninfolibrary', 'thread']",{'thread': 100}
"['exninfo', 'gettingadditional', 'exception', 'function', 'supportparticular', 'future', 'tacticsolve', 'problem', 'enrichingdatastructure', 'retrieve', 'pieceensure', 'destroycorrection', 'confusion', 'hardenpointer', 'equality', 'checkstructure', 'thread', 'global', 'incorrectpatch', 'thread', 'enricheddependency', 'thread', 'introduce', 'libraryrevert', 'ocaml', 'lightweight', 'switch']",{'thread': 100}
"['channel', 'reading', 'channel', 'crash']",{'crash': 100}
"['incorrect', 'richprinter']",{'incorrect': 100}
"['monad', 'signature', 'proofview', 'expose']",{'expose': 100}
"['pfedit', 'lemma', 'universe', 'contextsimple', 'issue', 'subtle']",{'issue': 100}
"['structure', 'canonical', 'overflow', 'stack']","{'overflow': 100, 'stack': 100}"
"['parameter', 'order', 'fixedebadab', 'lambda', 'order', 'incorrect', 'stillsecond', 'pattern', 'order', 'lambda']",{'incorrect': 100}
"['setting', 'globalargument', 'resulutionotherwise', 'resolution', 'input', 'containtypeclasses', 'resolution', 'generalizes', 'strict', 'optionprevents', 'typeclass', 'specific', 'criterionpotential', 'backwards', 'eauto', 'cleanupcompatibility', 'issue', 'containsdiscrimination', 'contribs', 'stdlib']",{'issue': 100}
"['substitution', 'identifier', 'interpretation', 'incorrect']",{'incorrect': 100}
"['injection', 'sigma']",{'injection': 100}
"['generation', 'principle', 'inductive', 'primitive', 'eliminationsubterm', 'strict', 'guardness']",{'generation': 100}
"['error', 'display', 'number', 'incorrect']",{'incorrect': 100}
"['incorrect', 'primitive', 'unification', 'stack']","{'incorrect': 100, 'stack': 100}"
"['module', 'expose', 'stillimplementationdangerous']",{'expose': 100}
"['sensitive', 'tclenv', 'tacticreverts', 'commitconflictproof']",{'Sensitive': 100}
"['coqdep', 'comment', 'counter', 'stack']",{'stack': 100}
