message,fuzzy
"['mergemerge', 'issue']",{'issue': 100}
"['mergemerge', 'issue', 'requestalready', 'multiple', 'reconfirm']",{'issue': 100}
"['issue', 'benchmark']",{'issue': 100}
"['issue', 'benchmark']",{'issue': 100}
"['windowinline', 'matcher', 'certificate', 'stand', 'false', 'begginningbegin', 'certificatewhateverwhateverwhatevercertificatetreatedprint', 'result', 'certificate', 'server', 'bunny', 'error', 'unablesslerror', 'chain', 'certificate', 'openssl', 'error', 'errno', 'matcher', 'stand', 'positive', 'regexp']",{'OpenSSL': 100}
"['mergemerge', 'issue', 'request', 'bbascarevicsession', 'object', 'responds', 'handler', 'error']",{'issue': 100}
"['multiple', 'connection', 'model', 'bunny', 'exampleenables', 'creates', 'connection', 'disablesoptionexception', 'neveroption', 'checkoutbeginexception', 'thread', 'thrown', 'session', 'disconnect', 'current', 'recovery', 'slumber', 'relies', 'exception', 'networkerror', 'setup', 'force', 'connection', 'target', 'thread', 'check']",{'thread': 100}
"['different', 'concurrency', 'level', 'acknowledgement']",{'concurren': 90}
"['mergemerge', 'issue', 'requestfilter', 'timeout', 'response']",{'issue': 100}
"['thread', 'availablefollow']",{'thread': 100}
"['mergemerge', 'dacto', 'issue']",{'issue': 100}
"['mergemerge', 'issue', 'request', 'state', 'connection', 'recovery', 'attempt', 'issue']",{'issue': 100}
"['store', 'openssldefault', 'store', 'openssl', 'certificatemethod', 'insteadtransportlibdoc', 'openssl', 'method', 'stdlibappart', 'transportproblem', 'severaljrubyanymore']",{'OpenSSL': 100}
"['frame', 'method', 'concurrent', 'clarify', 'protocol', 'access', 'single', 'comment', 'excellent', 'threadarsfkumcqaj']",{'concurrent': 100}
"['issue', 'clarifybunny']",{'issue': 100}
"['mergemerge', 'issue', 'request', 'madale']",{'issue': 100}
"['integer', 'fixnum', 'channel']",{'integer': 100}
"['mergerequest', 'fixnum', 'issue', 'olleolleollefixnum']",{'issue': 100}
"['integer', 'fixnum', 'channel']",{'integer': 100}
"['unstable', 'delete', 'strugglevariousnumerous', 'parameter', 'concurrency', 'tweak', 'investigationissue', 'dependent', 'hazardvalue', 'failureseveral', 'rabbitmq', 'discussion']",{'concurren': 90}
"['unstable', 'delete', 'strugglevariousnumerous', 'parameter', 'concurrency', 'tweak', 'investigationissue', 'dependent', 'hazardvalue', 'failureseveral', 'rabbitmq', 'discussion']",{'concurren': 90}
"['setup', 'rabbitmq', 'dockerintroduce', 'compose', 'dockercorrect', 'config', 'certificateavoid', 'docker', 'conflict', 'expose', 'docker', 'guest', 'connectloopback', 'interfaceinside']",{'expose': 100}
"['incorrect', 'comment']",{'incorrect': 100}
"['issue', 'server', 'rabbitmq', 'reproduces']",{'issue': 100}
"['mergemerge', 'issue', 'request', 'carlhoerbergsecond', 'initialize']",{'issue': 100}
"['actual', 'processing', 'method', 'state', 'thread', 'introduces', 'public', 'worker', 'backlog', 'backpressure', 'mechanism', 'shutdown', 'channle', 'dynamic', 'expose', 'unclen', 'method', 'datastructue', 'decision', 'relevant', 'active', 'queue', 'making']","{'thread': 100, 'expose': 100}"
"['mergemerge', 'master', 'dhananjaysathe', 'requestdefault', 'consumer', 'pause', 'thread']",{'thread': 100}
"['method', 'thread', 'current', 'context', 'beginning', 'unpause']",{'thread': 100}
"['connection', 'option', 'addressconnection', 'option', 'multiplecombination', 'address', 'possibledifferent', 'address', 'session', 'addresssyntax', 'option', 'cleanup', 'validationconnection', 'option', 'addressclean', 'methodconnection', 'incorrect', 'option', 'extraadditional', 'single', 'addressraise', 'testedreadability', 'refactorsdouble', 'hostnameconnection', 'param', 'validation', 'multiple', 'warning', 'raisingconnection', 'address', 'option', 'combineparameter', 'addressrefactors', 'method']",{'incorrect': 100}
"['cdebbmerge', 'issue', 'request', 'wconradmethod']",{'issue': 100}
"['eeddcfmerge', 'issue', 'request']",{'issue': 100}
"['mergemerge', 'issue', 'requestdefault']",{'issue': 100}
"['issue', 'reconnect', 'mechanism', 'frame', 'error', 'reading', 'happensmechanism']",{'issue': 100}
"['mergemerge', 'issue', 'requestconnection', 'recovery', 'initial', 'support']",{'issue': 100}
"['issue', 'message', 'reference']",{'issue': 100}
"['issue', 'synchronization']",{'issue': 100}
"['mergemerge', 'master', 'requesttimeouts', 'concurrent']",{'concurrent': 100}
"['timeouts', 'concurrent']",{'concurrent': 100}
"['thread', 'channel']",{'thread': 100}
"['connection', 'share', 'example', 'thread']",{'thread': 100}
"['incorrect', 'recovery', 'reconnect', 'message', 'network']",{'incorrect': 100}
"['version', 'integer']",{'integer': 100}
"['failure', 'openssl', 'stderr']",{'OpenSSL': 100}
"['expose', 'bunny', 'version', 'timeoutgocardless', 'hutch', 'apparentlylibrary', 'supposedreasonable', 'thing', 'timeout']",{'expose': 100}
"['mergemerge', 'jingweno', 'master', 'requestdefault', 'openssl']",{'OpenSSL': 100}
"['default', 'openssldetail', 'openssl']",{'OpenSSL': 100}
"['dispatch', 'rabbitmqotherwise', 'register', 'activity', 'thread', 'originallyinternal', 'bunny']",{'thread': 100}
"['thread', 'connection']",{'thread': 100}
"['suite', 'concurrent', 'primitive']",{'concurrent': 100}
"['abort', 'exception', 'thread']",{'thread': 100}
"['spawn', 'thread']",{'thread': 100}
"['stressjruby', 'shutdown', 'aggressive', 'thread']",{'thread': 100}
"['connection', 'thread']",{'thread': 100}
"['safety', 'thread']",{'thread': 100}
"['safety', 'thread']",{'thread': 100}
"['queue', 'bunny', 'removebackground', 'method', 'internal', 'implementation', 'mutex', 'bunny', 'attempt', 'queue', 'mutex', 'owner', 'alreadythreaderrorproblem', 'jrubytimeout', 'concurrency', 'queue', 'primitiveprovides', 'workaround', 'findingstandard', 'library', 'reimplementingissue', 'block', 'bunny', 'neitherbrokensince', 'bunny', 'queue', 'implementedamount', 'reasonableclose']",{'concurren': 90}
"['frame', 'protocol', 'encode', 'iterationiteration', 'condition', 'unnecessary', 'introducesbufferbunny', 'synchronization', 'writeseasier', 'reason', 'concurrent', 'writesreference']",{'concurrent': 100}
"['sensitive', 'network']",{'Sensitive': 100}
"['bunny', 'single', 'thread', 'channel']",{'thread': 100}
"['thread', 'exception', 'continuation', 'receiveerror', 'timeoutstart', 'automatic', 'recovery', 'activity', 'networkdamagematter', 'kicking', 'recovery', 'networksession', 'bunnyimplementation', 'benefitsession', 'block', 'thread', 'reallythanks']",{'thread': 100}
"['argument', 'rabbitmq', 'length']",{'length': 100}
"['jruby', 'concurrency', 'level', 'wouldframe', 'protocol', 'binary', 'reading', 'headerinput', 'decipher']",{'concurren': 90}
"['concurrency', 'level']",{'concurren': 90}
"['automatic', 'recovery', 'delay', 'networkotherwise', 'activity', 'thread', 'networkconnection', 'createreconnection', 'orderconnection', 'server', 'termination', 'initiatedreference']",{'thread': 100}
"['stress', 'robustpreallocate', 'issue', 'possible', 'channelavoid', 'rabbitmq', 'limit', 'machine', 'memory', 'message']",{'issue': 100}
"['concurrency', 'stress']",{'concurren': 90}
"['performance', 'flush', 'operationoperation', 'jruby', 'concurrent', 'channel']",{'concurrent': 100}
"['activity', 'abort', 'thread', 'exception', 'network']",{'thread': 100}
"['trigger', 'reconnection', 'recovery', 'issue', 'socket', 'network']",{'issue': 100}
"['section', 'setup', 'permission', 'vhosts']",{'permission': 100}
"['initialize', 'thread', 'queue', 'channel']",{'thread': 100}
"['expose', 'consumer']",{'expose': 100}
"['deliveryinfo', 'delivery', 'couple', 'bunny', 'issue', 'message', 'property']",{'issue': 100}
"['option', 'support', 'queue', 'blockwhether', 'control', 'thread', 'current', 'blockedqueue']",{'thread': 100}
"['initial', 'supportconsumer', 'thread', 'channel', 'submit', 'networkdefault', 'consumer', 'thread', 'lazilyevery', 'thread', 'channelconsumer', 'message']",{'thread': 100}
"['method', 'thread', 'notifies', 'rework', 'bunny', 'channel', 'networksuite', 'jruby', 'cruby']",{'thread': 100}
"['possible', 'concurrent', 'bunny', 'condition', 'annotate']",{'concurrent': 100}
"['jruby', 'concurrency', 'protocol', 'couple', 'error', 'issue']","{'concurren': 90, 'issue': 100}"
"['concurrent', 'bunny', 'condition', 'implementation']",{'concurrent': 100}
"['bunny', 'condition', 'concurrent', 'waitnotifylatch']",{'concurrent': 100}
"['dispatch', 'migration', 'event', 'activity', 'initial', 'method', 'protocol', 'thread', 'separateclient', 'cancellation', 'ability', 'method', 'server', 'support', 'publisherconsumer', 'avoidsjruby', 'multicore', 'resource', 'utilization', 'system', 'rubinius', 'betterseparation', 'internal', 'connection', 'channeloperation']",{'thread': 100}
"['multi', 'frame', 'content', 'length']",{'length': 100}
"['unsubscribe', 'fixedcancel', 'timeout', 'possible', 'subscription', 'cancellatorprocess', 'unsubscribe', 'wouldcould', 'message', 'causefails', 'parse', 'unsubscribe', 'solution', 'detectmessage', 'canceloksomewhere', 'buffer', 'unsubscribe', 'response', 'stillbreak', 'logic']",{'buffer': 100}
"['mergemerge', 'master', 'request', 'foobarwidgetsubscribe', 'async', 'thread', 'cancellation', 'signal']",{'thread': 100}
"['async', 'thread', 'support', 'cancellation', 'signal']",{'thread': 100}
"['patch', 'issue', 'regenerate', 'completion']",{'issue': 100}
"['support', 'openssl']",{'OpenSSL': 100}
"['frame', 'buffer']",{'buffer': 100}
"['maximum', 'frame', 'exceeds', 'payload', 'length', 'error', 'message']",{'length': 100}
"['timeout', 'patch', 'version', 'thanks', 'issue', 'agraham']",{'issue': 100}
"['force', 'generation']",{'generation': 100}
