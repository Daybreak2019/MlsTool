message,fuzzy
"['expectation', 'definedrspec', 'expectation', 'legacy', 'message', 'matcher', 'support', 'runnermessagerspec', 'module', 'failure', 'block', 'level', 'expectation', 'legacy', 'message', 'xfcdebc', 'xfcde', 'current', 'protocol', 'matcher', 'expose', 'class', 'support', 'runnerrspec', 'support']",{'expose': 100}
"['issue', 'keyword', 'argument']",{'issue': 100}
"['arity', 'length', 'refactor', 'logic', 'matcher', 'class']",{'length': 100}
"['rspec', 'updatedependency', 'warning', 'security', 'update']",{'Security': 100}
"['dependency', 'warning', 'security', 'update']",{'Security': 100}
"['trice', 'yield', 'block', 'control', 'message', 'alwayserror', 'cryptic', 'trice', 'yield', 'comparison', 'failedinstead', 'integer', 'argumenterror']",{'integer': 100}
"['methodarity', 'nameerror', 'unsupported', 'switch', 'argumenterror', 'givenarity', 'warning', 'disablepoint', 'length', 'class', 'suppress']",{'length': 100}
"['inspect', 'objectnotice', 'inspect', 'object', 'return', 'falseidentical', 'output', 'inspect', 'object', 'outputfailureconfuses', 'emptyerror', 'failureclass', 'block', 'levelunderstand', 'noticerspec', 'support', 'issue']",{'issue': 100}
"['offence', 'rubocoprubocop', 'specify', 'version', 'thoughversion', 'supportoffence', 'style', 'offencestyle', 'anywherenoise', 'offense', 'rubocoplayout', 'emptylines', 'offencegemspec', 'offencepercent', 'literal', 'offence', 'relatedspecificallystylestylestyleusage', 'minimize', 'common', 'groundgemfile', 'disablegemfile', 'conditionalsspaceaftercomma', 'layout', 'offencedefinition', 'disablestyle', 'offencestyle', 'defaultlayout', 'offencestyle', 'blockcomments', 'disablebenchmark', 'explanation', 'reallyexclude', 'gemfile', 'check', 'layout', 'alignparameters', 'disablerspec', 'default', 'rubocop', 'thoughenforce', 'repository', 'cumbersomestylecolonmethodcall', 'style', 'offenceexclude', 'check', 'modulelength', 'metriclayout', 'offencechange', 'default', 'total', 'style', 'reducesoffence', 'number', 'compact', 'defaultdefaultspaceexclude', 'blocklength', 'check', 'metricstyle', 'wordarray', 'disablelayout', 'offencestyle', 'offence', 'asciicommentsfuriousbenchmark', 'disabledisableexample', 'message', 'avoidstyle', 'simplifyexpectchange', 'expectmatch', 'declareexpectchange', 'expectmatch', 'declarefacilitates', 'understanding', 'stack', 'composableexclude', 'style', 'check', 'benchmarkstyle', 'offence', 'numericliteralsexclude', 'benchmark', 'check', 'rescuemodifier', 'styleperformance', 'offencestyle', 'offencecorrect', 'rspec', 'indicatehandlestyle', 'offence', 'redundantselfstyle', 'offence', 'evenoddexclude', 'style', 'checkoffencestyle', 'offence', 'mixingroupingexclude', 'style', 'checktrigger', 'fixingstyle', 'modulelength', 'metricuseful', 'number', 'constantpossible', 'specifyexpectation', 'rspec', 'classleavingexclude', 'checkwidespread', 'notation', 'expectsometimes', 'receiver', 'figure', 'thoughmatcher', 'message', 'composablereallyexclude', 'style', 'checkstyle', 'sense', 'totalinclude', 'expectindicates', 'actualexclude', 'layout', 'checkstyle', 'anotherexample', 'rspec', 'matcher', 'composeexpectcombinecombine', 'changecombine', 'changechangechangesingle', 'varargs', 'reasonsupportedexclude', 'style', 'check', 'uselesslayout', 'offenceexclude', 'offencedemonstrate', 'actualstyle', 'inline', 'specific', 'highlightgemspec', 'disablerubocop', 'version', 'minimumcommit', 'rubocop', 'droppedsupport', 'marchlayout', 'offencestyle', 'offence', 'style', 'disableexpectation', 'rspecbetter', 'suppress', 'discussionlayout', 'offencestyle', 'offencelayout', 'offencelayout', 'offenceemptyliteral', 'style', 'offenceoffenceperformance', 'sense', 'excludingdenote', 'unreachableoffence', 'rescueexception', 'disableexpectation', 'rspec', 'discussionstyle', 'offencechange', 'warning', 'revertsanymore', 'issuelayout', 'offenceexclude', 'check', 'rubocopcreates', 'arubarspec', 'folderinitializes', 'check', 'repository', 'contains', 'numberstyle', 'bundle', 'perlbackrefslinelength', 'bundle', 'metriclayout', 'newline', 'aruba', 'finalsense', 'meantcheck', 'rubocop', 'defaultreference', 'rubocopbinstub', 'check', 'rubocopcheck', 'rubocopdirectory', 'check', 'rubocopreport', 'local', 'rubocop', 'sinceunnecessary', 'spottedregression', 'simplifypoint', 'matchargumentexpectation', 'rspec']",{'stack': 100}
"['warning', 'message', 'basicobject', 'matcher', 'unsupportedbetter', 'certain', 'issue', 'basicobject', 'method', 'matcher', 'rspec', 'expectation', 'message', 'failure', 'kindlyinstead', 'special', 'message', 'failure', 'inline', 'message', 'method']",{'issue': 100}
"['useful', 'attribute', 'rubocop', 'custom', 'matcher', 'composedrspec', 'rubocop', 'issue']",{'issue': 100}
"['configurable', 'samphippen', 'length', 'formatter', 'object', 'benoittgtmatch']",{'length': 100}
"['symbol', 'raisedexpectation', 'rspec', 'issue']",{'issue': 100}
"['length', 'configuration', 'formatter', 'object']",{'length': 100}
"['zsyedmatcher', 'rubocop', 'issue']",{'issue': 100}
"['matcher', 'rubocop', 'issue']",{'issue': 100}
"['zsyedrubocop', 'issue']",{'issue': 100}
"['rubocop', 'issue']",{'issue': 100}
"['zsyedyield', 'rubocop', 'simplify', 'issue']",{'issue': 100}
"['length', 'description', 'multiline', 'single', 'string']",{'length': 100}
"['minor', 'rubocop', 'issue', 'refactors']",{'issue': 100}
"['minor', 'length']",{'length': 100}
"['quote', 'interpolation', 'rubocop', 'single', 'issue']",{'issue': 100}
"['message', 'failure', 'string', 'stringminor', 'rubocop', 'issue']",{'issue': 100}
"['rubocop', 'issue', 'parallel', 'string', 'assignment']",{'issue': 100}
"['mergerequest', 'rspec', 'warning', 'issue', 'mergeinfinite', 'recursion']",{'issue': 100}
"['mergerequest', 'error', 'rspec', 'refactor', 'expose', 'refactor']",{'expose': 100}
"['expose', 'refactor']",{'expose': 100}
"['raiseerror', 'support', 'matchermatcher', 'support', 'argument', 'secondmatcher', 'consistent', 'firstchange', 'behavior', 'stringeither', 'exception', 'flexiblyspecial', 'regexps', 'allowedmatcher', 'custom', 'testingexpectation', 'rspec', 'issue']",{'issue': 100}
"['stack', 'ensure', 'failure']",{'stack': 100}
"['warning', 'issue']",{'issue': 100}
"['problematicdiffable', 'detects', 'multiline', 'string', 'returnleast', 'exact', 'matchexpectation', 'rspec', 'issue']",{'issue': 100}
"['appliesadditional', 'message', 'alternative', 'usingdeprecatedexpectation', 'rspec', 'issue']",{'issue': 100}
"['mergerequest', 'exposefail', 'charlierudolphmatcher', 'custom', 'expose']",{'expose': 100}
"['matcher', 'custom', 'expose']",{'expose': 100}
"['fddefrequest', 'rspec', 'issue', 'addresspossible', 'scope', 'warning', 'reference', 'address']",{'issue': 100}
"['rspecupgrade', 'expose', 'consistency']",{'expose': 100}
"['upgrade', 'expose', 'consitency']",{'expose': 100}
"['acffa', 'mergerequest', 'rspecdiffs', 'issue', 'custom', 'multiline', 'fixup']",{'issue': 100}
"['mergerequest', 'prathamesh', 'issue', 'sonpatki', 'mergechange', 'becomparedto', 'message', 'failure']",{'issue': 100}
"['generation', 'custom', 'predicate', 'method']",{'generation': 100}
"['string', 'expose', 'source']",{'expose': 100}
"['mergebranch', 'description', 'issue']",{'issue': 100}
"['mergerequest', 'percent', 'samphippen', 'matcher', 'integermatcher', 'integer']",{'integer': 100}
"['integer', 'changelog', 'percent', 'phippen', 'samphippen']",{'integer': 100}
"['notice', 'travis', 'linux', 'issue']",{'issue': 100}
"['couple', 'quote', 'block', 'triple', 'markdown', 'incorrect']",{'incorrect': 100}
"['quote', 'block', 'backticks', 'triple', 'markdown', 'incorrect']",{'incorrect': 100}
"['intra', 'italic', 'issue', 'markdown']",{'issue': 100}
"['custom', 'matcher', 'matchwithin', 'problem', 'matcher', 'addressmouthful', 'custom', 'issue']",{'issue': 100}
"['public', 'expose']",{'expose': 100}
"['accepts', 'multiplerspec', 'support', 'issue']",{'issue': 100}
"['solution', 'bundle', 'debug', 'warning', 'issue']",{'issue': 100}
"['custom', 'matcher', 'enumerableenumerable', 'collectionproxyclose', 'rspec', 'issue']",{'issue': 100}
"['matcher', 'description', 'generation']",{'generation': 100}
"['example', 'rspec', 'revert', 'matcher', 'preventcommit', 'issue', 'matcher', 'includingexample']",{'issue': 100}
"['group', 'expose', 'matcher']",{'expose': 100}
