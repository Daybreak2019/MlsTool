message,fuzzy
"['stack', 'patch']",{'stack': 100}
"['support', 'maker', 'ansible', 'errorformatclose', 'issue', 'neomake']",{'issue': 100}
"['append', 'python', 'import', 'silentcustom', 'usageissuecomment', 'issue', 'neomake']",{'issue': 100}
"['wrapper', 'expandargs', 'fnamemodifyhandle', 'fugitive', 'buffer']",{'buffer': 100}
"['utils', 'neomake', 'neovimneovim', 'issue']",{'issue': 100}
"['neovim', 'issue']",{'issue': 100}
"['withoutissuecomment', 'issue', 'neomake']",{'issue': 100}
"['cargoclose', 'issue', 'neomake']",{'issue': 100}
"['length', 'luacheck', 'highlightremove']",{'length': 100}
"['warning', 'defaultdouble', 'exclamationvariation', 'emoji', 'warningwider', 'selector', 'widthneovim', 'handledissue', 'kitty', 'kovidgoyalneovim', 'issue']",{'issue': 100}
"['mergeneomake', 'request', 'customqf', 'window', 'buffer', 'highlight']",{'buffer': 100}
"['customqf', 'window', 'buffer', 'highlight']",{'buffer': 100}
"['flake', 'buffer', 'python']",{'buffer': 100}
"['fbecc', 'mergeneomake', 'request', 'mergeutils', 'neomake', 'expandargs', 'current', 'buffer']",{'buffer': 100}
"['utils', 'neomake', 'expandargs', 'current', 'bufferwindow', 'buffer']",{'buffer': 100}
"['private', 'automake', 'buffer', 'underscore']",{'buffer': 100}
"['severity', 'typescript', 'tslint', 'error', 'warningissuecomment', 'tslint', 'palantir', 'issue']",{'issue': 100}
"['function', 'vader', 'command', 'assert', 'usingneovim', 'issue', 'redraw']",{'issue': 100}
"['mergeimprove', 'buffer', 'cleanup', 'automake']",{'buffer': 100}
"['automake', 'fixup', 'buffer', 'cleanup']",{'buffer': 100}
"['buffer', 'cleanup', 'automake']",{'buffer': 100}
"['restart', 'automakecompare', 'restart', 'automakearound', 'neededstill', 'bufwritepost', 'definedissuecomment', 'issue', 'neomake']",{'issue': 100}
"['workaroundissuecomment', 'issue', 'neomake']",{'issue': 100}
"['workaroundissuecomment', 'issue', 'neomake']",{'issue': 100}
"['issue', 'workaroundissue', 'neomake']",{'issue': 100}
"['revisit', 'optimize', 'registration', 'buffer', 'automake']",{'buffer': 100}
"['autocmd', 'local', 'clean', 'buffer', 'automake']",{'buffer': 100}
"['restart', 'issue', 'delay', 'warning', 'automakeissue', 'neomake']",{'issue': 100}
"['buffer', 'cleanup']",{'buffer': 100}
"['pending', 'buffer', 'terminal']",{'buffer': 100}
"['restart', 'buffer', 'automake']",{'buffer': 100}
"['buffer', 'automake']",{'buffer': 100}
"['generation', 'title', 'revisit']",{'generation': 100}
"['buffer', 'restart', 'cancelingissue', 'neomake']",{'buffer': 100}
"['issue', 'minimal', 'vimrc', 'template']",{'issue': 100}
"['minimal', 'issue', 'vimrc', 'template']",{'issue': 100}
"['virtualtext', 'exists', 'buffer', 'check']",{'buffer': 100}
"['markdown', 'length', 'errorappears']",{'length': 100}
"['buffer', 'ignore', 'neomake', 'config']",{'buffer': 100}
"['neomake', 'style', 'buffer', 'ignore', 'utils']",{'buffer': 100}
"['defaultissuecomment', 'issue', 'neomake']",{'issue': 100}
"['window', 'handlingissuecomment', 'issue', 'neomake']",{'issue': 100}
"['vimlint', 'ignore', 'unusedvimlint', 'issuecomment', 'issue', 'syngan']",{'issue': 100}
"['regard', 'stdinissuecomment', 'issue', 'neomake']",{'issue': 100}
"['utils', 'neomake', 'default', 'current', 'buffer']",{'buffer': 100}
"['issue', 'automakebuffer', 'neomake', 'triggeraffect', 'neovimneovimclose', 'neomake']",{'issue': 100}
"['aware', 'location', 'maker', 'headererlang', 'maker', 'definemaker', 'terriblyrebar', 'maker', 'synchronous', 'async', 'insidesplitfunction', 'splittingsystem', 'slowness', 'causedwhole', 'maker', 'asyncrebar', 'compatible', 'gettingoption', 'maker', 'speedmight', 'issue', 'neomake', 'blueyedlocation', 'project', 'relativealready', 'neomake', 'existsmaker', 'defineexist', 'createhelper', 'matchinstead', 'buffer', 'global', 'localoutput', 'rearrange', 'ebins', 'tempnameredundant', 'fielddirectory', 'setting', 'fallbackprofile', 'exclusivepolishvariant', 'strict', 'directory', 'restoresplitneomake', 'maker', 'compat', 'erlang', 'renameremove', 'setup', 'cleanupalready', 'overwrite', 'definedglobalmaker', 'createfinallyoverride', 'local', 'variable', 'profile', 'bufferoverride', 'profile', 'buffer', 'localneomake', 'maker', 'compat', 'erlang', 'fixup', 'rename']","{'issue': 100, 'buffer': 100}"
"['buffer', 'echom']",{'buffer': 100}
"['display', 'buffer', 'trigger', 'informationalsingle', 'bufnames', 'general', 'buffer', 'displayingotherwise']",{'buffer': 100}
"['install', 'autocmd', 'customqf', 'vimentermeant', 'filetype', 'autocmdcause', 'window', 'quickfix', 'locationflicker', 'resizedneomake', 'quickfix', 'force', 'enablearound', 'issue']",{'issue': 100}
"['buffer', 'bracket']",{'buffer': 100}
"['temporary', 'buffer']",{'buffer': 100}
"['short', 'circuitneovim', 'issuecomment', 'issue']",{'issue': 100}
"['substitutionneovim', 'issue']",{'issue': 100}
"['docker', 'replaceclose', 'issue', 'neomakeclose', 'neomake']",{'issue': 100}
"['buffer', 'stdin', 'defaultleast', 'necessarystdin', 'display']",{'buffer': 100}
"['mergeflake', 'neomake', 'fstrings', 'requestflake', 'python', 'length', 'processing', 'string']",{'length': 100}
"['update', 'issue', 'github', 'template']",{'issue': 100}
"['flake', 'python', 'length', 'processing', 'beginning', 'refersproperty', 'length', 'entryflake', 'length', 'genericresult', 'length', 'attribute', 'entrycheck', 'sinceproper', 'search']",{'length': 100}
"['neomake', 'single', 'dedent', 'buffer', 'placesigns']",{'buffer': 100}
"['stylelint', 'configspacevim', 'issue']",{'issue': 100}
"['autocmds', 'stack', 'global', 'contextissue', 'neomake']",{'stack': 100}
"['clean', 'bufwipeout', 'buffer']",{'buffer': 100}
"['dcadfc', 'mergeimprove', 'neomake', 'request', 'mergeimprove', 'configuration', 'buffer', 'automake']",{'buffer': 100}
"['configuration', 'buffer', 'automake']",{'buffer': 100}
"['utils', 'neomake', 'workaroundneovim', 'issue']",{'issue': 100}
"['config', 'returnneovim', 'issuecomment', 'issue']",{'issue': 100}
"['buffer', 'cleanoldsigns', 'neomake', 'existingclean']",{'buffer': 100}
"['issue', 'neomakeinfo', 'template']",{'issue': 100}
"['anywaymention', 'issue', 'facebook']",{'issue': 100}
"['tslintissuecomment', 'issue', 'neomake']",{'issue': 100}
"['buffer', 'reloadneomake', 'canceljobs']",{'buffer': 100}
"['vimlint', 'issue']",{'issue': 100}
"['default', 'vimlint', 'makefile', 'ignorevimlint', 'issuecomment', 'issue', 'syngan']",{'issue': 100}
"['option', 'stack', 'command']",{'stack': 100}
"['quickfix', 'location', 'empty', 'closingissuecomment', 'issue', 'neomakeregressedaround', 'wouldcopen', 'lopenclose', 'neomake']",{'issue': 100}
"['issue', 'neomake']",{'issue': 100}
"['betterremove', 'issue']",{'issue': 100}
"['issue', 'neomake']",{'issue': 100}
"['output', 'empty', 'haskell', 'stack', 'hdevtools', 'projectissue', 'neomake']",{'stack': 100}
"['falsewatch', 'override', 'recommendedissuecomment', 'issue', 'neomake']",{'issue': 100}
"['robust', 'neomake', 'getmakeoptionsvader', 'issue']",{'issue': 100}
"['tempfiles', 'buffer']",{'buffer': 100}
"['buffer', 'check', 'unchangedclose', 'neomake']",{'buffer': 100}
"['output', 'refactor', 'pending', 'processingoutput', 'windowanother', 'window', 'buffer', 'processedoriginal', 'windowsetup', 'output', 'pending', 'autocommands']",{'buffer': 100}
"['cache', 'issue', 'quickfix', 'location', 'workaround']",{'issue': 100}
"['utils', 'neomakefilename', 'buffer', 'settingneomake', 'filenamebufnrclose', 'neomake']",{'buffer': 100}
"['ensure', 'teardownmeant', 'ensure', 'buffer', 'createdissue', 'cacheclose', 'neomake']",{'buffer': 100}
"['issue', 'maker', 'neomakeinfo']",{'issue': 100}
"['implicit', 'length', 'prefix']",{'length': 100}
"['custom', 'vimlint', 'postprocess', 'implicit', 'prefix', 'length']",{'length': 100}
"['mergeneomake', 'fugitive', 'request', 'buffer', 'fugitive']",{'buffer': 100}
"['fugitive', 'buffer']",{'buffer': 100}
"['example', 'postprocess', 'lambdaissuecomment', 'issue', 'neomake']",{'issue': 100}
"['harden', 'issue', 'neomakeinfo', 'display']",{'issue': 100}
"['issue', 'neomake']",{'issue': 100}
"['failure', 'buffer', 'cleanup']",{'buffer': 100}
"['unreadable', 'buffer', 'supportissue', 'neomakeissue', 'neomake']",{'buffer': 100}
"['clean', 'buffer']",{'buffer': 100}
"['mergeneomake', 'postprocess', 'length', 'postprocess', 'highlight', 'generic']",{'length': 100}
"['elixir', 'length']",{'length': 100}
"['ffccfe', 'fbdafneomake', 'bufwipe', 'request', 'hightlightsinvalid', 'bwipe', 'buffer', 'highlight']",{'buffer': 100}
"['invalid', 'bwipe', 'buffer', 'highlight']",{'buffer': 100}
"['serialize', 'maker', 'pythonissuecomment', 'issue', 'neomake']",{'issue': 100}
"['makejobhandle', 'utils', 'buffer', 'filenameinstead', 'filenameffadbebcfadd', 'clang', 'commitcomment', 'tweekmonster', 'deoplete']",{'buffer': 100}
"['serializingserialize', 'async', 'impliedmakejob', 'context', 'option', 'buffer', 'cleanupissue', 'neomake']",{'buffer': 100}
"['example', 'postprocess', 'length', 'reference']",{'length': 100}
"['entry', 'length', 'column', 'writegood']",{'length': 100}
"['neovim', 'stack', 'haskellexplanationneovim']",{'stack': 100}
"['support', 'flake', 'maker', 'length']",{'length': 100}
"['parameter', 'length', 'optional']",{'length': 100}
"['cargo', 'buildclose', 'issue', 'neomake']",{'issue': 100}
"['utils', 'issue', 'neomake', 'logmessage']",{'issue': 100}
"['typeinformation', 'redefinesignstructure', 'dictionarybuffereither', 'buffer', 'neomake', 'linenumber', 'redefinesignfirst', 'iterate', 'levelfails', 'attempt', 'dictionary', 'stringplace', 'invalid', 'buffer', 'expressioncommit']",{'buffer': 100}
"['typescript', 'maker', 'improveissuecomment', 'issue', 'neomakeclose', 'neomakeneomake']",{'issue': 100}
"['vimlint', 'defaultproblematic', 'ratherissuecomment', 'issue', 'neomake']",{'issue': 100}
"['mergeneomake', 'improvement', 'context', 'request', 'mapexprcontext', 'buffer', 'mapexpr']",{'buffer': 100}
"['context', 'buffer', 'mapexpr', 'executemapexpr', 'stderr', 'stdout', 'execution']",{'buffer': 100}
"['settingissuecomment', 'issue', 'neomake']",{'issue': 100}
"['window', 'issue', 'loggingissue', 'neomake']",{'issue': 100}
"['neomake', 'block', 'displayinfoissuecomment', 'issue', 'neomake']",{'issue': 100}
"['messageissuecomment', 'issue', 'neomake']",{'issue': 100}
"['makejobsubsequentreproduce', 'tryingissuecomment', 'issue', 'neomake']",{'issue': 100}
"['window', 'string', 'makejobissuecomment', 'issue', 'neomake']",{'issue': 100}
"['restorethoughtjunegunn', 'issuecomment', 'issue']",{'issue': 100}
"['buffer', 'actuallybehaves', 'chunkensures']",{'buffer': 100}
"['harden', 'window', 'buffer']",{'buffer': 100}
"['autoload', 'issue', 'style']",{'issue': 100}
"['neomake', 'switchgotham', 'error', 'definedgotham', 'whatyouhide', 'issue', 'themeswitchneomake']",{'issue': 100}
"['issue', 'maker']",{'issue': 100}
"['issue', 'maker']",{'issue': 100}
"['issue', 'maker']",{'issue': 100}
"['issue', 'shorten', 'template']",{'issue': 100}
"['issue', 'neomakeinfo', 'template', 'betterlearnt', 'trickmaster', 'vimperatorclose', 'neomakeclose', 'neomake']",{'issue': 100}
"['factor', 'neomake', 'utils', 'buffer', 'setting']",{'buffer': 100}
"['neomakeinfo', 'setting', 'displayissuecomment', 'issue', 'neomake']",{'issue': 100}
"['github', 'issue']",{'issue': 100}
"['issue', 'template']",{'issue': 100}
"['request', 'mergetemplate', 'issue', 'neomakeinfo', 'github']",{'issue': 100}
"['command', 'github', 'issue', 'neomakeinfo', 'template']",{'issue': 100}
"['supportclose', 'issue', 'neomake']",{'issue': 100}
"['product', 'issue']",{'issue': 100}
"['makefile', 'revertreverts', 'commitneovim', 'temporaryneovim', 'issue']",{'issue': 100}
"['makefileneovim', 'issuecomment', 'issue']",{'issue': 100}
"['haskell', 'stack', 'liquidhaskell', 'maker', 'support']",{'stack': 100}
"['maker', 'errorformat', 'javascriptissuecomment', 'issue', 'neomake']",{'issue': 100}
"['buffer', 'specificclose', 'neomakedaniel']",{'buffer': 100}
"['count', 'buffer', 'statuslineloclistcounts', 'neomake', 'statusline', 'optionalbuffer', 'countclose', 'neomake']",{'buffer': 100}
"['maker', 'buffer', 'govet']",{'buffer': 100}
"['insensitive', 'compareclose']",{'Sensitive': 90}
"['variable', 'maker', 'settingoverride', 'possible', 'current', 'buffer', 'settingcompactdifferent', 'certain', 'buffer', 'easilyautocmd', 'setupesfileeslintfunction', 'setupesfilesetfiletype', 'filetype', 'javascriptruleset', 'special', 'current', 'eslintendfunction']",{'buffer': 100}
"['maker', 'correctlyneovim', 'issue']",{'issue': 100}
"['buffer', 'error']",{'buffer': 100}
"['mergeneomakesh', 'request', 'vividboardermaker', 'generation', 'neomakesh']",{'generation': 100}
"['incorrect', 'parameter']",{'incorrect': 100}
"['maker', 'generation', 'neomakeshchangegetmaker', 'usable', 'defaultsince', 'dictionary']",{'generation': 100}
"['issue', 'english']",{'issue': 100}
"['check', 'reading', 'existsneomake', 'maker', 'buffer', 'returnanother', 'variable', 'error']",{'buffer': 100}
"['mergeneomake', 'master', 'issue']",{'issue': 100}
