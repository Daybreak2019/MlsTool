message,fuzzy
"['static', 'class', 'cloud', 'method', 'logic', 'streamclass', 'eagerremove', 'emptymessage', 'contractnever', 'acceptremove', 'state', 'thread', 'manipulation', 'postreceive', 'sinceafterwards', 'thread', 'localremove', 'default', 'favorinterface', 'thread', 'message', 'reallychannel', 'subscriber', 'targetrestore', 'manipulation', 'receivethread', 'local', 'stillexceptionincludes', 'thread', 'reusemightwould', 'interceptorthread', 'local', 'somethingreceive', 'operation']",{'thread': 100}
"['insensitive', 'getter', 'header']",{'Sensitive': 90}
"['policy', 'security']",{'Security': 100}
"['tracecontext', 'expose']",{'expose': 100}
"['autoconfigure', 'security', 'spring', 'oauthautoconfigure', 'security', 'spring', 'oauth', 'projectrelease', 'security', 'project', 'springproject', 'security', 'commits', 'springdependabot', 'preview', 'supportdependabot']",{'Security': 100}
"['autoconfigure', 'security', 'spring', 'oauthautoconfigure', 'security', 'spring', 'oauth', 'projectrelease', 'security', 'project', 'springproject', 'security', 'commits', 'springdependabot', 'preview', 'supportdependabot']",{'Security': 100}
"['autoconfigure', 'security', 'spring', 'oauthautoconfigure', 'security', 'spring', 'oauth', 'projectrelease', 'security', 'project', 'springproject', 'security', 'commits', 'springdependabot', 'preview', 'supportdependabot']",{'Security': 100}
"['incorrect', 'section', 'baggage', 'property']",{'incorrect': 100}
"['backportsallows', 'sleuth', 'approach', 'integrationpropagation', 'custom', 'overrideinsteadchange', 'difference', 'primary', 'subtle', 'injectreturnreturncloud', 'spring', 'issue']",{'issue': 100}
"['aceda', 'mergeorigin', 'trackingconflictclient', 'spring', 'sleuth', 'cloud', 'feign', 'instrument', 'issue', 'sleuth', 'cloud', 'feign', 'instrument', 'springframework', 'issue', 'sleuth', 'cloud', 'issuedelegates', 'feign', 'instrument', 'springframework', 'instrumentation']",{'issue': 100}
"['update', 'brave', 'thread', 'local']",{'thread': 100}
"['issueanother', 'issue', 'bpropagation', 'factory', 'expression', 'check', 'defaultimportorder', 'error']",{'issue': 100}
"['update', 'template', 'issue']",{'issue': 100}
"['gateway', 'request', 'thread', 'local', 'trace']",{'thread': 100}
"['gateway', 'request', 'thread', 'local', 'trace']",{'thread': 100}
"['executor', 'possibility', 'decorationexecutor', 'possibility', 'decorationinstrumentmetadata', 'understandcontrol', 'async', 'exampleincludecloud', 'spring', 'issue']",{'issue': 100}
"['eager', 'injection', 'class', 'configuration', 'progress']",{'injection': 100}
"['pattern', 'review', 'exact', 'assertion', 'defaultpagedresources', 'issue', 'pagedmodel']",{'issue': 100}
"['compiltion', 'issue']",{'issue': 100}
"['zipkin', 'application', 'issue']",{'issue': 100}
"['reactor', 'instrumentation', 'optimizeoneachoperator', 'onlastoperatorpublisher', 'instrument', 'scalarreduce', 'overhead', 'revisitoperatorchange', 'context', 'warning', 'creation', 'newspan', 'behavior', 'defercloud', 'sleuth', 'spring', 'issue']",{'issue': 100}
"['issue', 'proxy', 'loader']",{'issue': 100}
"['reactive', 'server', 'generation']",{'generation': 100}
"['proxy', 'issue']",{'issue': 100}
"['insensitive', 'zipkin', 'sender']",{'Sensitive': 90}
"['trace', 'springmvcchange', 'server', 'tracefilter', 'information', 'tomcat', 'exception', 'threadlocal', 'context', 'internals', 'clear', 'valve', 'assumechange', 'server', 'error', 'undertow', 'rethrow', 'exception', 'uncaught', 'issue', 'level', 'whenever', 'catch', 'implementation']",{'issue': 100}
"['version', 'number', 'ensures', 'zipkin', 'samplenumber', 'misaligns', 'version', 'zipkinplugin', 'attempt', 'gradle', 'aroundexists', 'version', 'usingproject', 'spring', 'issue']",{'issue': 100}
"['zipkin', 'transport', 'spring', 'sleuth', 'cloud', 'deprecates', 'exceptzipkin', 'transport', 'spring', 'sleuth', 'cloud', 'favor', 'deprecatesrabbit', 'kafka', 'support', 'zipkin', 'support', 'amazon', 'reporterzipkin', 'format', 'various', 'issue']",{'issue': 100}
"['constructor', 'leavecloud', 'common', 'spring', 'issue']",{'issue': 100}
"['constructor', 'leavecloud', 'common', 'spring', 'issue']",{'issue': 100}
"['sonar', 'static', 'issue']",{'issue': 100}
"['interceptor', 'injection']",{'injection': 100}
"['insensitive', 'making', 'baggage']",{'Sensitive': 90}
"['message', 'serializableworkaround', 'browse', 'spring', 'issue', 'framework', 'version', 'issue', 'sleuth', 'cloud', 'relatedchannel', 'brixton', 'thrown', 'question']",{'issue': 100}
"['message', 'serializableworkaround', 'browse', 'spring', 'issue', 'framework', 'version', 'issue', 'sleuth', 'cloud', 'relatedchannel', 'brixton', 'thrown', 'question']",{'issue': 100}
"['update', 'zipkin', 'latestfeature', 'relevant', 'sleuthmysql', 'group', 'supportwrite', 'overflow', 'stackaddress']",{'overflow': 100}
"['update', 'zipkin', 'latestfeature', 'relevant', 'sleuthmysql', 'group', 'supportwrite', 'overflow', 'stackaddress']",{'overflow': 100}
"['update', 'zipkin', 'latestfeature', 'relevant', 'sleuthmysql', 'group', 'supportwrite', 'overflow', 'stackaddress']",{'overflow': 100}
"['length', 'backport', 'length', 'complicates', 'search', 'trace', 'supportbackport']",{'length': 100}
"['length', 'backport', 'length', 'complicates', 'search', 'trace', 'supportbackport']",{'length': 100}
"['length', 'complicates', 'search', 'trace', 'support']",{'length': 100}
"['duration', 'ensures', 'remoteensures', 'remoteduration', 'client', 'assumeworst', 'client', 'zipkin', 'backfills', 'timestampopenzipkin', 'issue']",{'issue': 100}
"['duration', 'ensures', 'remoteensures', 'remoteduration', 'client', 'assumeworst', 'client', 'zipkin', 'backfills', 'timestampopenzipkin', 'issue']",{'issue': 100}
"['update', 'zipkinmysql', 'support', 'trace', 'storepropagation', 'openzipkin', 'issue']",{'issue': 100}
"['update', 'zipkinmysql', 'support', 'trace', 'storepropagation', 'openzipkin', 'issue']",{'issue': 100}
"['update', 'zipkinmysql', 'support', 'trace', 'storepropagation', 'openzipkin', 'issue']",{'issue': 100}
"['response', 'header', 'issue', 'documentation', 'trace']",{'issue': 100}
"['response', 'header', 'issue', 'documentation', 'trace']",{'issue': 100}
"['result', 'header', 'failurechange', 'header', 'exception', 'sends', 'invalidchange', 'business', 'course', 'issue', 'trace', 'catch', 'invalid', 'graph']",{'issue': 100}
"['result', 'header', 'failurechange', 'header', 'exception', 'sends', 'invalidchange', 'business', 'course', 'issue', 'trace', 'catch', 'invalid', 'graph']",{'issue': 100}
"['ensure', 'callback', 'lifecycle', 'postprocessordelegate', 'lifecycle', 'callbackfirst', 'thread']",{'thread': 100}
"['ensure', 'callback', 'lifecycle', 'postprocessordelegate', 'lifecycle', 'callbackfirst', 'thread']",{'thread': 100}
"['dispatch', 'tracefilter', 'error', 'process', 'request', 'presenttracefilter', 'assertionnetflix', 'snapshot', 'client', 'injection']",{'injection': 100}
"['thread', 'ignorereview', 'update']",{'thread': 100}
"['custom', 'rxjavaplugins', 'resetreset', 'conjunction', 'netflix', 'method', 'expose', 'experimental', 'compile', 'public', 'spring', 'cloud', 'rxjava']",{'expose': 100}
"['spring', 'issue', 'project']",{'issue': 100}
"['storage', 'crash', 'prevents']",{'crash': 100}
"['retryable', 'ensure', 'client', 'feign', 'exception', 'testedclean', 'rethrow', 'thread']",{'thread': 100}
"['checkstyle', 'issue']",{'issue': 100}
"['websockets', 'stomp', 'explicit', 'supportinitiate', 'message', 'channel', 'interceptor', 'context', 'thread']",{'thread': 100}
"['concurrency', 'custom', 'class', 'strategy']",{'concurren': 90}
"['readmecloud', 'issue', 'spring']",{'issue': 100}
"['checkstyle', 'issue']",{'issue': 100}
"['header', 'propagate', 'thread', 'local']",{'thread': 100}
"['source', 'thread', 'collection', 'message']",{'thread': 100}
"['checkstyle', 'issue']",{'issue': 100}
"['mergerequest', 'cloud', 'springstrategy', 'concurrency', 'hystrix', 'issue']","{'concurren': 90, 'issue': 100}"
"['concurrency', 'strategy', 'approach', 'initial', 'hystrix']",{'concurren': 90}
"['current', 'thread', 'wrapperchange', 'background']",{'thread': 100}
"['thread', 'local']",{'thread': 100}
"['refactor', 'sleuthinstrumentationformer', 'tracemanager', 'interface', 'explicitcontext', 'thread', 'local', 'manipulation', 'complete', 'trace']",{'thread': 100}
"['mergeconditional', 'tracewebfilter', 'issue', 'request']",{'issue': 100}
"['package', 'instrumentation', 'erroranother', 'issue', 'wrong', 'customizers', 'servlet', 'async']",{'issue': 100}
