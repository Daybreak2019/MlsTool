message,fuzzy
"['bucket', 'permission']",{'permission': 100}
"['reportedobject', 'storage', 'google', 'content', 'length', 'thanks', 'runorveith']",{'length': 100}
"['driver', 'reasonsignature', 'versionsignature', 'support', 'version', 'driver', 'argumentoriginal', 'olegrtecno', 'issue']",{'issue': 100}
"['linode', 'generation', 'table', 'provider', 'computegenerate']",{'generation': 100}
"['issue', 'flake']",{'issue': 100}
"['underline', 'title', 'equinix', 'issue', 'metal']",{'issue': 100}
"['provider', 'security', 'outscale', 'group']",{'Security': 100}
"['provider', 'security', 'outscale', 'group']",{'Security': 100}
"['request', 'empty', 'issue']",{'issue': 100}
"['price', 'issue']",{'issue': 100}
"['multiple', 'service', 'single', 'expose']",{'expose': 100}
"['mergelibvirt', 'mistio', 'createmachine', 'image', 'issue', 'createmistio', 'request', 'libcloud']",{'issue': 100}
"['machine', 'image', 'issue']",{'issue': 100}
"['libvirt', 'image', 'issue']",{'issue': 100}
"['softlayer', 'driver', 'issue', 'aliyun', 'vultr']",{'issue': 100}
"['driver', 'chain', 'cloudflare', 'whole', 'error', 'update', 'thrown', 'includeeasier', 'various', 'issue']",{'issue': 100}
"['mergerequest', 'mergedriver', 'portforwards', 'issue', 'updateapitoken', 'functionality', 'update']",{'issue': 100}
"['integer', 'nodesize', 'vsphere']",{'integer': 100}
"['object', 'encodeobject', 'driverapache', 'context', 'libcloud', 'issue']",{'issue': 100}
"['password', 'client', 'paramiko', 'privatepasswordexception', 'propagate', 'update', 'fatal', 'correctlyinvalid']",{'fatal': 100}
"['service', 'issue']",{'issue': 100}
"['length', 'check', 'reliable', 'google', 'prefix']",{'length': 100}
"['inheritsignature', 'class', 'method', 'parent', 'annotationpython', 'issue']",{'issue': 100}
"['libvirt', 'permission', 'retry']",{'permission': 100}
"['libvirt', 'permission', 'retry']",{'permission': 100}
"['update', 'matrix', 'generation']",{'generation': 100}
"['mergerequest', 'mergeannotation', 'compute', 'incorrect']",{'incorrect': 100}
"['storage', 'generation']",{'generation': 100}
"['mergerequest', 'mergeobject', 'check', 'upload', 'server', 'encryption', 'checksum']",{'encryption': 100}
"['object', 'driver', 'validate', 'update', 'usingobject', 'header', 'containamazon', 'latestapache', 'libcloud', 'issue']",{'issue': 100}
"['error', 'ignore', 'failure', 'permission']",{'permission': 100}
"['openssl', 'import', 'method']",{'OpenSSL': 100}
"['actual', 'positive', 'issue', 'various', 'falseversion']",{'issue': 100}
"['stockholm', 'support', 'region', 'northapache', 'libcloud', 'issue']",{'issue': 100}
"['issue', 'mistio']",{'issue': 100}
"['mergerequest', 'micafer', 'mergedriver', 'openstack', 'security', 'function', 'group']",{'Security': 100}
"['annotation', 'module', 'libcloud', 'license', 'issue']",{'issue': 100}
"['propagates', 'error', 'method', 'fatal', 'correctlyinstead']",{'fatal': 100}
"['mergerequest', 'mergegithub', 'template', 'issue']",{'issue': 100}
"['github', 'issue']",{'issue': 100}
"['issue', 'pylint', 'various', 'update']",{'issue': 100}
"['flake', 'issue', 'various', 'version']",{'issue': 100}
"['mergerequest', 'ryanpetrello', 'crypto', 'mergereplace', 'python', 'pycrypto', 'cryptography', 'usage']",{'crypto': 100}
"['scheme', 'issue']",{'issue': 100}
"['ceddd', 'adaff', 'mergepatch', 'request', 'mitar', 'mergegithub', 'issue']",{'issue': 100}
"['python', 'issue']",{'issue': 100}
"['machine', 'issue', 'azure', 'creation']",{'issue': 100}
"['driver', 'issue', 'pylint']",{'issue': 100}
"['string', 'addingpython', 'request', 'sincerequest', 'integer', 'value', 'header', 'longercouple', 'changeheader', 'content', 'length', 'commitquentin', 'quentinp', 'pradet']","{'integer': 100, 'length': 100}"
"['buffer', 'storage', 'memory', 'google']",{'buffer': 100}
"['volume', 'encryption']",{'encryption': 100}
"['security', 'group', 'support', 'network']",{'Security': 100}
"['recent', 'issue']",{'issue': 100}
"['actual', 'issue', 'violation', 'pylintpython', 'example']",{'issue': 100}
"['length', 'content', 'value', 'azure', 'headerstringlibcloudclose']",{'length': 100}
"['verifies', 'checklongercharacter', 'ecryptfs', 'limit', 'system', 'layeredsource', 'length', 'filename', 'minimum', 'questionlibcloud']",{'length': 100}
"['joyent', 'issue']",{'issue': 100}
"['secret', 'issue', 'template']",{'issue': 100}
"['servce', 'validate', 'custom', 'issue', 'update', 'endpoint']",{'issue': 100}
"['libcloud', 'issue']",{'issue': 100}
"['response', 'unicode', 'python', 'issue', 'aliyun']",{'issue': 100}
"['mocker', 'catch', 'issue']",{'issue': 100}
"['aliyun', 'method', 'security', 'group']",{'Security': 100}
"['signature', 'upload', 'multipart', 'support', 'reintroducesignature', 'multipart', 'region', 'support', 'ratheruploads', 'region', 'drivermultipart', 'basedminor', 'request', 'adjustment', 'practice', 'requestparameter', 'issue', 'includedsignature', 'solution', 'params', 'argumentcalculation', 'signature', 'compute', 'necessaryseems', 'iterator', 'account', 'considerationpassedclose']",{'issue': 100}
"['document', 'python', 'issue', 'version', 'parsingclose']",{'issue': 100}
"['blank', 'issue']",{'issue': 100}
"['aliyun', 'method', 'security', 'group']",{'Security': 100}
"['issue', 'propagation']",{'issue': 100}
"['check', 'compatibility', 'buffer', 'update']",{'buffer': 100}
"['preference', 'issue']",{'issue': 100}
"['pylint', 'issue']",{'issue': 100}
"['compat', 'issue']",{'issue': 100}
"['travis', 'attempt', 'issue', 'pylint', 'import', 'workaround']",{'issue': 100}
"['travis', 'attempt', 'issue', 'pylint', 'import', 'workaround']",{'issue': 100}
"['driver', 'libcloud', 'compute', 'profitbricks', 'updateddriver', 'support', 'compute', 'cloud', 'wrapper', 'functionalitywould', 'status', 'issue', 'libcloud']",{'issue': 100}
"['stack', 'search', 'service']",{'stack': 100}
"['stack', 'environment']",{'stack': 100}
"['constant', 'workingnamespace', 'update', 'versioncompatiblepatch', 'issue', 'different', 'version', 'request', 'versionmeanwhile', 'server', 'bugfixplacejmunhoz', 'mellid', 'javier']",{'issue': 100}
"['incorrect', 'stringfunction', 'iterate', 'iterate', 'string', 'insteadstringclosemuraus']",{'incorrect': 100}
"['setuptools', 'module', 'warning', 'level', 'available', 'issue', 'backports']",{'issue': 100}
"['group', 'aliyun', 'support', 'security']",{'Security': 100}
"['support', 'security', 'group']",{'Security': 100}
"['driver', 'mismatch', 'aliyun', 'error', 'blankecsconnection', 'support', 'blankmember', 'namedcommand', 'blankgroup', 'aliyun', 'support', 'security', 'deletingcharacterwhitespaceclose']",{'Security': 100}
"['outscale', 'storage', 'driveroutscale', 'driver', 'simplifyconnection', 'class', 'outscalesignature', 'driver', 'issue', 'default', 'outscaleclosejmunhoz', 'mellid', 'javiermuraus']",{'issue': 100}
"['bundle', 'validation', 'update', 'clarify', 'providebundle', 'homebrew', 'openssl']",{'OpenSSL': 100}
"['shortens', 'rename', 'issue', 'limit', 'account', 'fixture', 'windowclose']",{'issue': 100}
"['python', 'issue']",{'issue': 100}
"['exception', 'raisedlibcloud', 'compute', 'driver', 'packageinstancelibcloud', 'compute', 'driver', 'packageextralibcloud', 'compute', 'driver', 'packageresponse', 'methodlibcloud', 'request', 'common', 'packagekwargslibcloud', 'request', 'common', 'packageresponse', 'responsecls', 'kwargslibcloud', 'common', 'packagelibcloud', 'common', 'packageraisedomain', 'notfound', 'global', 'europe', 'reason', 'message', 'project', 'resource', 'lenaic', 'error', 'machine', 'devopshappen', 'issue', 'occurs', 'event', 'orderapache', 'driver', 'request', 'trunk', 'sends', 'libcloud', 'computestill', 'devopsinstance', 'devopsapache', 'attempt', 'driver', 'trunk', 'retrieve', 'libcloud', 'compute', 'volume', 'informationinstance', 'raisediscard', 'execution']",{'issue': 100}
"['generation', 'script', 'table', 'available', 'update']",{'generation': 100}
"['length', 'value']",{'length': 100}
"['length', 'value']",{'length': 100}
"['compute', 'google', 'unnecessary', 'warningissue', 'ansible', 'causingreverts', 'loggingansible', 'issue', 'module']",{'issue': 100}
"['filename', 'issue', 'fixture', 'window']",{'issue': 100}
"['issue', 'element', 'member', 'creationclose']",{'issue': 100}
"['mergerequest', 'firewall', 'issue', 'element', 'member', 'creation']",{'issue': 100}
"['issue', 'element', 'member', 'creation']",{'issue': 100}
"['issue', 'snakeclose']",{'issue': 100}
"['length', 'shortenclose']",{'length': 100}
"['python', 'compatibility', 'issue', 'cross', 'version']",{'issue': 100}
"['syntax', 'issue']",{'issue': 100}
"['sphinx', 'issue']",{'issue': 100}
"['current', 'issue', 'provider', 'graph']",{'issue': 100}
"['record', 'length', 'equality']",{'length': 100}
"['minor', 'issue', 'libcloud', 'method', 'docstringclosemuraus']",{'issue': 100}
"['dnsimple', 'python', 'compatibility', 'issue']",{'issue': 100}
"['dimensiondata', 'coverage', 'issue', 'loadbalancer', 'support']",{'issue': 100}
"['matrix', 'address', 'generation', 'warning', 'provider', 'failure', 'method', 'deprecation', 'handlemuraus']",{'generation': 100}
"['virtualips', 'issue']",{'issue': 100}
"['response', 'length']",{'length': 100}
"['minor', 'issue']",{'issue': 100}
"['pretty', 'response', 'support', 'formattingvariable', 'environmentpython', 'issue']",{'issue': 100}
"['issue', 'workinglinodeclose']",{'issue': 100}
"['response', 'length']",{'length': 100}
"['minor', 'issue']",{'issue': 100}
"['delete', 'cloudstack', 'version', 'security', 'group']",{'Security': 100}
"['issue', 'documentation']",{'issue': 100}
"['additional', 'image', 'issue', 'libcloud', 'support', 'methodmachine', 'amazon', 'firstsecond', 'image']",{'issue': 100}
"['issue', 'libcloud', 'extra', 'instanceupdate', 'versionblock', 'information', 'devicefixture']",{'issue': 100}
"['sphinx', 'issue']",{'issue': 100}
"['issue', 'libcloud', 'update', 'hostvirtual', 'endpointmuraus']",{'issue': 100}
"['interface', 'issue', 'libcloud', 'support', 'networkmuraus']",{'issue': 100}
"['constant', 'libcloud', 'issue', 'addeddriverxpath', 'store', 'transform', 'element', 'defintions', 'extradictionary', 'functionality', 'private', 'locatedmanagement', 'centralize', 'update', 'functionalitymuraus']",{'issue': 100}
"['additional', 'store', 'issue', 'libclouddictionary', 'extra', 'object', 'nodeimagefilteringmuraus']",{'issue': 100}
"['attribute', 'dictionary', 'additional', 'issue', 'libcloud', 'extraobject', 'method', 'modifyargument', 'snapshotmuraus']",{'issue': 100}
"['issue', 'deployment', 'pquerna']",{'issue': 100}
"['utility', 'driver', 'issue', 'libcloud', 'function', 'extramuraus']",{'issue': 100}
"['attribute', 'dictionary', 'issue', 'libcloud', 'extrastoragevolumerefactormuraus']",{'issue': 100}
"['issue', 'libcloud', 'support', 'instance', 'reservedmuraus']",{'issue': 100}
"['group', 'issue', 'libcloud', 'method', 'security']","{'issue': 100, 'Security': 100}"
"['issue', 'libcloud', 'support', 'egress', 'security', 'group', 'ingresmuraus']","{'issue': 100, 'Security': 100}"
"['delete', 'issue', 'libcloud']",{'issue': 100}
"['driver', 'issue', 'libcloud', 'support', 'security', 'group', 'creationmuraus']","{'issue': 100, 'Security': 100}"
"['libcloud', 'issue', 'instanceupdate', 'pricingmuraus']",{'issue': 100}
"['region', 'issue', 'libcloud', 'support', 'withoutgmail', 'patch', 'walker', 'charlesmuraus']",{'issue': 100}
"['management', 'generation', 'script', 'update', 'method']",{'generation': 100}
"['driver', 'update', 'compute', 'expose', 'existingmanagement', 'expose', 'methodmanagement', 'standardextension', 'method', 'deprecatemissingmajor', 'method']",{'expose': 100}
"['generation', 'script', 'modify', 'methodcorrect', 'preserver', 'script']",{'generation': 100}
"['right', 'issue', 'update', 'reference']",{'issue': 100}
"['driver', 'cloud', 'public', 'provider', 'modify', 'basicconnection', 'insecure', 'authentication', 'default', 'kwargfalseplain', 'credentialvpsnet', 'driver']",{'insecure': 100}
"['expose', 'class', 'nodelocation']",{'expose': 100}
"['softlayer', 'improvement', 'driver', 'issue', 'libcloud', 'computemuraus']",{'issue': 100}
"['driver', 'cloudfounders', 'issue', 'libcloud', 'computemuraus']",{'issue': 100}
"['address', 'elastic', 'issue', 'libcloud', 'supportsupportreleaseaddressallocateaddressmuraus']",{'issue': 100}
"['libcloud', 'kwargs', 'issue', 'verifies', 'thing', 'addedconfigurationmuraus']",{'issue': 100}
"['libcloud', 'support', 'issue', 'diskconfigserver', 'rackspace', 'option', 'expandmanual', 'specify', 'abilityquicker', 'server', 'entire', 'resultextension', 'server', 'rackspacemessage', 'attribute', 'diskconfigparameter', 'exposedmuraus']",{'issue': 100}
"['issue', 'libcloud', 'creationmuraus']",{'issue': 100}
"['example', 'issue', 'documentation', 'libcloud', 'windowmuraus']",{'issue': 100}
"['content', 'clarifies', 'length', 'comment']",{'length': 100}
"['length', 'request', 'content', 'present', 'libcloudmuraus']",{'length': 100}
"['issue', 'accessipv', 'libcloud', 'value', 'resultmuraus']",{'issue': 100}
"['styling', 'issue', 'openstack']",{'issue': 100}
"['driver', 'cloudstack', 'provider', 'loadbalancer', 'constant', 'expose']",{'expose': 100}
"['elastichosts', 'check', 'drive', 'issue']",{'issue': 100}
"['incorrect', 'returnmuraus']",{'incorrect': 100}
"['issue', 'ubuntu', 'libcloud', 'linux', 'addedmuraus']",{'issue': 100}
"['issue', 'libcloud', 'method', 'storagevolumemuraus']",{'issue': 100}
"['issue', 'opennebula', 'libcloud', 'support', 'volume', 'compute', 'functionmuraus']",{'issue': 100}
"['cloudstack', 'group', 'method', 'security', 'libcloud', 'sebastienrepos', 'libcloud', 'trunk', 'ffaedef']",{'Security': 100}
"['container', 'issue', 'double', 'cloudfiles', 'encodingdrivercontainer', 'object', 'request', 'encodecurrent', 'clarity', 'renamemethodlibcloudrepos', 'libcloud', 'trunk', 'ffaedef']",{'issue': 100}
"['default', 'location', 'issue', 'scriptmight', 'default', 'location', 'writablelibcloud', 'rotem', 'reportedrepos', 'libcloud', 'trunk', 'ffaedef']",{'issue': 100}
"['openstack', 'group', 'support', 'method', 'security', 'libcloudrepos', 'libcloud', 'trunk', 'ffaedef']",{'Security': 100}
"['check', 'behave', 'update', 'method', 'correctlyvaluelibcloud', 'issue', 'reportedrepos', 'libcloud', 'trunk', 'ffaedef']",{'issue': 100}
"['issue', 'compute', 'docstrings', 'libcloud', 'ilgizrepos', 'libcloud', 'trunk', 'ffaedef']",{'issue': 100}
"['expose', 'libcloudrepos', 'libcloud', 'trunk', 'ffaedef']",{'expose': 100}
"['fatal', 'pyflakesrepos', 'libcloud', 'trunk', 'ffaedef']",{'fatal': 100}
"['object', 'linode', 'driver', 'update', 'returnwaleson', 'issue', 'jouke', 'insteadlibcloudrepos', 'libcloud', 'trunk', 'ffaedef']",{'issue': 100}
"['cloudstack', 'provider', 'expose', 'instantiatearbitrary', 'cloudstack', 'providerrepos', 'libcloud', 'trunk', 'ffaedef']",{'expose': 100}
"['params', 'stack', 'token', 'force', 'supportrepos', 'libcloud', 'trunk', 'ffaedef']",{'stack': 100}
"['incorrect', 'usingincubator', 'ffaedef', 'trunk', 'repos', 'libcloud']",{'incorrect': 100}
"['expose', 'metadata', 'rackspaceincubator', 'ffaedef', 'trunk', 'repos', 'libcloud']",{'expose': 100}
"['connection', 'connectivity', 'robust', 'issue', 'transient', 'deploymentincubator', 'ffaedef', 'trunk', 'repos', 'libcloud']",{'issue': 100}
"['password', 'permission', 'access', 'provideincubator', 'ffaedef', 'trunk', 'repos', 'libcloud']",{'permission': 100}
"['putheader', 'crash', 'libcloud', 'value', 'header', 'integerincubator', 'ffaedef', 'trunk', 'repos', 'libcloud']",{'crash': 100}
"['request', 'content', 'length', 'woodstaeincubator', 'ffaedef', 'trunk', 'repos', 'libcloud']",{'length': 100}
"['expose', 'slicehost', 'driver', 'attributeincubator', 'ffaedef', 'trunk', 'repos', 'libcloud']",{'expose': 100}
"['maximum', 'length', 'character', 'smithincubator', 'ffaedef', 'trunk', 'repos', 'libcloud']",{'length': 100}
"['linode', 'length', 'password', 'smithincubator', 'ffaedef', 'trunk', 'repos', 'libcloud']",{'length': 100}
"['linode', 'randomness', 'password', 'improveincubator', 'ffaedef', 'trunk', 'repos', 'libcloud']",{'randomness': 100}
"['country', 'nodelocation', 'expose', 'includeincubator', 'ffaedef', 'trunk', 'repos', 'libcloud']",{'expose': 100}
"['issue', 'rework', 'licensingincubator', 'ffaedef', 'trunk', 'repos', 'libcloud']",{'issue': 100}
"['interface', 'connection', 'classiconnectionkey', 'implementimplement', 'certainlylatter', 'issue', 'provideiconnectionkey', 'improperincubator', 'ffaedef', 'trunk', 'repos', 'libcloud']",{'issue': 100}
"['length', 'content', 'kwarg', 'header', 'datalenincubator', 'ffaedef', 'trunk', 'repos', 'libcloud']",{'length': 100}
