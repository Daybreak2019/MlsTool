message,fuzzy
"['nightlyprebuilt', 'issue']",{'issue': 100}
"['channel', 'failure', 'binarychannel', 'failure', 'binarybehave', 'google', 'thread', 'window', 'french', 'fonctionnels', 'forum', 'channel', 'binary', 'autres', 'langages', 'jfrolich']",{'thread': 100}
"['keyword', 'renamingkeyword', 'renamingfacebook', 'issue', 'reasonvariantnewtypereorderaliascosmetic']",{'issue': 100}
"['argument', 'brace', 'functionfacebook', 'issue', 'reason']",{'issue': 100}
"['parse', 'printparse', 'printfacebook', 'issue', 'reasonocamlversion', 'ocaml', 'specificidempotentoutputhasnt', 'output', 'generatedparse', 'pattern']",{'issue': 100}
"['pattern', 'paren', 'constraint', 'requirementpattern', 'paren', 'constraint', 'requirementfacebook', 'issue', 'reasonfacebook', 'issue', 'reasonwithout', 'parensprint', 'parensgrammar', 'cleanup', 'menhir', 'smallreasonreasonerror', 'regenerate', 'message', 'table', 'empty']",{'issue': 100}
"['issue', 'unaryprecedence', 'unaries', 'recovery']",{'issue': 100}
"['parsingdefinition', 'parser', 'resultfacebook', 'issue', 'reasonfacebook', 'issue', 'reason']",{'issue': 100}
"['parsingfacebook', 'issue', 'reason']",{'issue': 100}
"['modulefacebook', 'issue']",{'issue': 100}
"['issue', 'python', 'travis', 'homebrewissue', 'homebrew']",{'issue': 100}
"['errorfacebook', 'issue', 'reasondescriptive', 'error', 'message', 'syntax', 'presence']",{'issue': 100}
"['crash', 'lexercrash', 'syntax', 'error']",{'crash': 100}
"['recoverable', 'incorrect', 'implementation', 'recovery', 'starterror', 'recovery', 'checkpoint', 'normalization', 'forgot']",{'incorrect': 100}
"['float', 'parens', 'constructor', 'integer', 'constant', 'unnecessary', 'aroundfloat', 'parens', 'integer', 'constant', 'unnecessary', 'aroundfalse', 'usage', 'unnecessaryprint', 'parens', 'constant', 'paren', 'verbose']",{'integer': 100}
"['bspack', 'generation', 'issue']","{'generation': 100, 'issue': 100}"
"['attribute', 'printingattribute', 'printingpattern', 'length', 'performance']",{'length': 100}
"['uniform', 'abstraction', 'application', 'syntaxrefactorhigher', 'order', 'refactor', 'menhirrecursion', 'order', 'higherhigher', 'equivalent', 'order', 'introduce', 'recursivetuple', 'factor', 'constructorrefactorminor', 'cleanupcomposition', 'mapper', 'chainparsingcompactionreformattingcompactionparsingcompactionreformattingcompactionoptimiseparsingcompactionreformattingcompactionimplementation', 'stdlib', 'custom', 'string', 'bufferlexbuf', 'refactorlocal', 'instance', 'multiplecomment', 'refmt', 'buffer', 'incorrectlybegin', 'contentimplement', 'decoratorinlineintroduce', 'arrow', 'syntax', 'tokenarrow', 'implementation', 'concept', 'proofpprinterlexingtestsuite', 'updateimplement', 'application', 'class', 'expressionapplication', 'syntaxparameter', 'class', 'optionallocation', 'lexerparserparserparserparserquick', 'removeerror', 'parserpretty', 'printerupdate', 'fixmebucklescript', 'caughtsomenum', 'border', 'preview', 'styleformattedsomenum', 'border', 'preview', 'styleformattedsomenum', 'border', 'preview', 'styleprecedence', 'sharpopparenthesisparenthesisprint', 'pattern', 'sweet', 'prettyupdateparenthesissyntaxparenthesisargument', 'patternapplication', 'syntax', 'multiplegrammar', 'usable', 'reworkreason', 'update', 'ambiguity', 'moduleimplement', 'moduleprettier', 'printingupdatespace', 'constraintenable', 'supportparenthesis', 'printingforce', 'switch', 'statementupdateimplementation', 'operator', 'simplerfront', 'lexerchange', 'postfixconcatenation', 'string', 'operator', 'defines', 'ocaml', 'operator', 'remappedoperator', 'locationupdatebehave', 'print', 'attributeprepare', 'attribute', 'usingmerge', 'remainsreject', 'distinguish', 'adjustingupdate', 'printinglocation', 'attributedocumentparser', 'document', 'design', 'decisionflexible', 'constructor', 'declaration', 'value', 'extensionupdate', 'comment', 'pprintmergemerge', 'relatedattribute', 'printingocaml', 'filter', 'comment', 'module', 'variant', 'polymorphic', 'couldupdatecomment', 'printingattribute', 'ocamlunsureprintingupdate', 'expectationaccess', 'array', 'syntaxarray', 'print', 'indexupdateremove', 'switch', 'level', 'parenthesis']",{'buffer': 100}
"['update', 'emacs', 'supportupdate', 'emacs', 'supportstill', 'integration', 'global', 'example', 'basedreasonsmallreadability', 'improvesnippetupdateupdateupdatelayer', 'issue', 'reference']",{'issue': 100}
"['alias', 'wrapping', 'issue', 'exceptionalias', 'wrapping', 'issue', 'exceptionpattern', 'print', 'wrappedcomment']",{'issue': 100}
"['issue', 'supportlabel', 'issue', 'idempotent', 'punnedremove', 'unnecessarydocumentationwhitespace']",{'issue': 100}
"['empty', 'issue', 'functionhandle', 'comment', 'empty', 'issue', 'functioncomment', 'empty', 'issue', 'functioncomment']",{'issue': 100}
"['issue', 'severalboundary', 'trigger', 'matrix', 'subsequenttuples', 'explicit', 'annotationlabel', 'recordrecordregression', 'switch']",{'issue': 100}
"['issue', 'severalhandle', 'attribute', 'attribute', 'valueoperator', 'conditional', 'parensatomic', 'expression', 'recordprefix', 'operator', 'functionoperator', 'recordhighlight', 'raisefield', 'comma', 'recordtuple', 'pattern']",{'issue': 100}
"['incorrect', 'suggestion']",{'incorrect': 100}
"['summaryimprovementissue', 'reason', 'child', 'facebook', 'attribute', 'independentlyincorrect', 'reason', 'facebook', 'wonky', 'issue']",{'issue': 100}
"['delete', 'nuclideanymore', 'issue']",{'issue': 100}
"['ternary', 'incorrect', 'reason', 'refac', 'includingternary', 'incorrect', 'reason', 'suggestionmessage', 'update']",{'incorrect': 100}
"['reason', 'layout', 'nuclidefacebook', 'nuclide', 'issue', 'issuecomment']",{'issue': 100}
"['reason', 'version', 'jengaboot', 'upgradejengaboot', 'chenglou', 'delete', 'copiedcompiles', 'jengaboot', 'expose', 'current', 'command', 'compilejengaboot', 'compiles', 'utility', 'install', 'script', 'yojson', 'jengarootbetter', 'install', 'yosjon', 'yojsonjengaboot', 'search']",{'expose': 100}
"['requestreason', 'issue', 'interface']",{'issue': 100}
"['reason', 'issue', 'interface', 'switch', 'summary', 'forgotten', 'interfacereviewer']",{'issue': 100}
"['ocaml', 'requirecomment', 'issue', 'multipleleast', 'support']",{'issue': 100}
"['linux', 'requestformattest', 'usage', 'incorrect', 'linux', 'mktemp']",{'incorrect': 100}
"['formattest', 'usage', 'incorrect', 'linux', 'mktempdebian', 'different', 'syntax', 'mktemperror', 'causedcreate', 'bunch', 'attempt', 'continuedirectoryactivates', 'error', 'genericsyntax', 'mktempmadhavapeddy']",{'incorrect': 100}
"['extention', 'formattingcurrent', 'refmt', 'buffer', 'applyerror', 'report', 'syntax', 'buffercurrent', 'check', 'creates', 'extention', 'patchright']",{'buffer': 100}
"['error', 'merlin', 'slightlyproblem', 'logicallistener', 'register', 'responsecondition', 'concurrent', 'readline', 'merlinimplementation', 'allocates', 'livingalongside', 'process', 'merlinconsolidation', 'queue', 'asynchronous', 'answeredreason', 'character']",{'concurrent': 100}
"['incorrect', 'output', 'comment', 'attribute', 'interface']",{'incorrect': 100}
"['resilient', 'formattererror', 'resilient', 'formatterattempt', 'intercept', 'failedocaml', 'original', 'returningintegration', 'editorfailure', 'merlin', 'permission']",{'permission': 100}
"['issue', 'initialization']",{'issue': 100}
"['mergemerge', 'master', 'requestresynchronize', 'buffer', 'completion']",{'buffer': 100}
"['crash', 'merlinerror', 'recovery', 'inaccurate']",{'crash': 100}
"['generation', 'nuclidereason']",{'generation': 100}
"['error', 'ocaml', 'reason', 'outputerror', 'ocaml', 'chengloumodification', 'custom', 'accepterror', 'incompatible', 'parserincompatible', 'bettererror', 'delegatereason', 'processing', 'syntax', 'output', 'ratherocamlterminal', 'expose', 'command']",{'expose': 100}
"['reason', 'print', 'async', 'discussingprint', 'attention', 'width', 'defaultfacebook', 'issue', 'reasonreviewer']",{'issue': 100}
