message,fuzzy
"['issue', 'style']",{'issue': 100}
"['version', 'incorrect']",{'incorrect': 100}
"['bugfix', 'parselyerror', 'descriptive', 'decode', 'buffer', 'failure', 'message']",{'buffer': 100}
"['error', 'descriptive', 'decode', 'buffer', 'message']",{'buffer': 100}
"['upgrade', 'dependency', 'issue', 'hacky']",{'issue': 100}
"['timestamps', 'integer']",{'integer': 100}
"['integer', 'magic']",{'integer': 100}
"['offset', 'integer', 'magic', 'timestamps']",{'integer': 100}
"['autocommitter', 'fetchfetcher', 'thread', 'cleanup', 'handler', 'referenceerror']",{'thread': 100}
"['pykafka', 'issue', 'metadata', 'failure', 'update']",{'issue': 100}
"['duplicate', 'update', 'issue', 'template']",{'issue': 100}
"['issue', 'nonetype']",{'issue': 100}
"['issue', 'nonetypeerror', 'consumer', 'followingattribute', 'object', 'exception', 'method', 'attributeerror', 'xfccefcerror']",{'issue': 100}
"['crash', 'wrapper', 'legacy']",{'crash': 100}
"['acquires', 'thread', 'rebalance', 'ensure']",{'thread': 100}
"['style', 'issue', 'inheritance']",{'issue': 100}
"['bugfix', 'parselymessageset', 'decode', 'buffer', 'large', 'exception']",{'buffer': 100}
"['messageset', 'decode', 'buffer', 'large', 'exceptionerror', 'inherit', 'client', 'ambiguity', 'exception']",{'buffer': 100}
"['bugfix', 'parselyevent', 'setting', 'thread', 'zombie']",{'thread': 100}
"['event', 'setting', 'thread', 'zombie']",{'thread': 100}
"['style', 'function', 'issue', 'lambda']",{'issue': 100}
"['amount', 'thread']",{'thread': 100}
"['variable', 'deadlock']",{'deadlock': 100}
"['fxsjy', 'masterqueue', 'deadlock']",{'deadlock': 100}
"['queue', 'deadlock']",{'deadlock': 100}
"['bugfix', 'parselyallow', 'bubble', 'thread']",{'thread': 100}
"['mergemerge', 'bugfix', 'reraiseworker', 'reraise', 'exception', 'thread']",{'thread': 100}
"['worker', 'traceback', 'thread']",{'thread': 100}
"['group', 'cluster', 'coordinator', 'attempt', 'broker', 'discoverygroup', 'randomness', 'coordinator', 'logic', 'discovery', 'previous', 'meantaddress']",{'randomness': 100}
"['thread', 'exception', 'ensure']",{'thread': 100}
"['fixme', 'pokingplaintext', 'achievablerequesterror', 'return', 'chunkconnectionstuck', 'particular', 'issue', 'zookeeperconnection', 'fallback', 'attempt', 'deferremove', 'fallback', 'proposesyungchin']",{'issue': 100}
"['expose', 'kafkaconnection', 'pykafkafeature', 'maintainwhether', 'return', 'indifferent', 'suitekafkainstanceyungchin']",{'expose': 100}
"['messense', 'kafkapython', 'compatibility', 'issue', 'kafka']",{'issue': 100}
"['python', 'compatibility', 'issue', 'kafkamessense']",{'issue': 100}
"['bugfix', 'parselyworker', 'thread', 'interpreter', 'explode', 'shutdown']",{'thread': 100}
"['interpreter', 'thread', 'worker', 'explode']",{'thread': 100}
"['issue', 'template']",{'issue': 100}
"['expose', 'propertymatch', 'simpleconsumer']",{'expose': 100}
"['generation', 'format']",{'generation': 100}
"['version', 'incorrect']",{'incorrect': 100}
"['producer', 'thread']",{'thread': 100}
"['greenlets', 'thread']",{'thread': 100}
"['issue', 'template']",{'issue': 100}
"['producer', 'thread']",{'thread': 100}
"['worker', 'producer', 'broker', 'crash']",{'crash': 100}
"['install', 'travis', 'setuptools', 'issue', 'modern', 'update', 'version']",{'issue': 100}
"['couple', 'python', 'compatibility', 'issue']",{'issue': 100}
"['regardingconsumer', 'instance', 'currentlyoffset', 'partition', 'callback', 'result', 'assertionerror', 'operationreason', 'behaviour', 'issue', 'maskedcause', 'confusionhelper', 'thread', 'backgroundyungchin']","{'issue': 100, 'thread': 100}"
"['queue', 'producer', 'future', 'interfacefuture', 'implementation', 'motivationmemory', 'point', 'commitproduceresult', 'parent', 'whereas', 'queue', 'threadacross', 'thread', 'producer', 'single', 'instance', 'delivery', 'reportreport', 'optional', 'deliveryqueueyungchin']",{'thread': 100}
"['condition', 'consumer', 'avoidhackish', 'check', 'operationsuspect', 'failure', 'relativelyconsumer', 'python', 'rdkafka', 'somewhatsetup', 'issue', 'producerconsumer', 'block', 'foreveryungchin']",{'issue': 100}
"['workaroundcommits', 'timing', 'issue', 'changedrdkafka', 'message', 'stillwould', 'consumehowever', 'rdkafkawrong', 'indefinitelyyungchin']",{'issue': 100}
"['consumer', 'rdkafka', 'poller', 'thread', 'poller', 'previouslyprevent', 'necessary', 'segfaultsrdkafka', 'handlehandle', 'pthreads', 'longerconcernerror', 'causedmight', 'pykafka', 'commitanoter']",{'thread': 100}
"['disconnect', 'offset', 'socket', 'attempt', 'crash']",{'crash': 100}
"['pthreads', 'rdkafka', 'sharedmonster', 'problem', 'might', 'concurrentpractice', 'somethingparticular', 'affectedmight', 'spawn', 'thread', 'watchtheory', 'applies', 'producer', 'issueintroduces', 'dependency', 'direct', 'sharedpthreads', 'librdkafka', 'dependencyexclusive', 'method', 'reasoncheckhandleperformance', 'penalty', 'informalseemscallback', 'delivery', 'concernfuture', 'producer', 'mergedchange', 'goingyungchin']",{'thread': 100}
"['surface', 'worker', 'thread', 'producer', 'method', 'exception']",{'thread': 100}
"['rdkafka', 'demand', 'threadrdkafka', 'failure', 'producerconsumer', 'commitformer', 'thread', 'clean', 'happendestructor', 'making', 'methodroute', 'alwaystakenbetteryungchin']",{'thread': 100}
"['mergemerge', 'bugfix', 'producer', 'requestproducer', 'crash']",{'crash': 100}
"['issue', 'demonstrateinternal', 'creation', 'topic', 'logic', 'causerecurse', 'assumes']",{'issue': 100}
"['issue', 'demonstratingyungchin']",{'issue': 100}
"['reference', 'topic', 'partitionbroker', 'kafkaclient', 'connection', 'hangingimpossible', 'reference', 'weakref', 'operation', 'stillpartition', 'client', 'topic', 'method', 'instance', 'client', 'inelegant', 'limitlightweight', 'important', 'cleanup', 'client', 'issue']",{'issue': 100}
"['zombie', 'requesthandler', 'requestzombie', 'requesthandler', 'thread']",{'thread': 100}
"['queue', 'producer', 'thread', 'ownedbroker', 'stoppingownedbroker', 'threadcheck', 'message', 'withoutownedbroker', 'situation', 'thread', 'message', 'stilloccasional']",{'thread': 100}
"['finaliser', 'requesthandler', 'atexit', 'replacerequesthandler', 'instance', 'problem', 'registeredprogram', 'alwaysusual', 'atexit', 'replacedqueue', 'thread', 'wouldrequesthandler', 'reference', 'instantiatedfinaliser', 'replacedblock', 'forevertimeout']",{'thread': 100}
"['thread', 'broker']",{'thread': 100}
"['broker', 'retry', 'crash']",{'crash': 100}
"['parselyottomata', 'issue']",{'issue': 100}
"['mergemerge', 'master', 'parselycommits', 'master', 'parselyretry', 'responseclearer', 'instruction', 'changelog', 'contribution', 'guidebetter', 'readme', 'exampleprivateproducer', 'example', 'readmepartition', 'message', 'wholeremove', 'staleproducerproducer', 'version', 'major', 'empty', 'flush', 'queue', 'attempt', 'triggersignal', 'empty', 'queueunicodeensure', 'messageraise', 'exceptionsimplifysignature', 'simpler', 'producefailure', 'thread']",{'thread': 100}
"['mergemerge', 'master', 'parselyasync', 'producer', 'bringscommits', 'master', 'parselyretry', 'responseclearer', 'instruction', 'changelog', 'contribution', 'guidebetter', 'readme', 'exampleprivateproducer', 'example', 'readmepartition', 'message', 'wholeremove', 'staleproducerproducer', 'version', 'major', 'empty', 'flush', 'queue', 'attempt', 'triggersignal', 'empty', 'queueunicodeensure', 'messageraise', 'exceptionsimplifysignature', 'simpler', 'producefailure', 'thread']",{'thread': 100}
"['failure', 'thread']",{'thread': 100}
"['abstract', 'raising', 'thread', 'decorator', 'method', 'logic', 'dunder', 'exception']",{'thread': 100}
"['exception', 'thread']",{'thread': 100}
"['rdkafka', 'librdkafka', 'librdkafka', 'backgroundlibrdkafka', 'threadblock', 'thread', 'background', 'wouldtrivial', 'impossible', 'potentialperformance', 'suffers', 'unlesssorryyungchin']",{'thread': 100}
"['switchable', 'handler', 'primitive', 'thread']",{'thread': 100}
"['semaphore', 'context', 'protocol', 'block', 'message', 'thread', 'management']",{'thread': 100}
"['basic', 'interaction', 'thread']",{'thread': 100}
"['callback', 'rdkafka', 'loggingmodule', 'message', 'issue', 'pykafka', 'stillyungchin']",{'issue': 100}
"['repair', 'incorrect']",{'incorrect': 100}
"['comment', 'incorrect']",{'incorrect': 100}
"['error', 'offset', 'reset', 'response', 'deadlock']",{'deadlock': 100}
"['cluster', 'issue', 'dodgeerror', 'offset', 'givenconsumer', 'consumer', 'switchsimple']",{'issue': 100}
"['error', 'length', 'format']",{'length': 100}
"['consumer', 'consume', 'stoppedinternal', 'block', 'caller', 'frozen', 'consumer', 'application', 'rebalance', 'timeout', 'simpleconsumer', 'consume', 'executionconsumer', 'address', 'issue', 'commitreturn', 'block', 'application', 'consumer', 'function', 'effect', 'commitaddress', 'ticket']",{'issue': 100}
"['request', 'ratherinvalid', 'offset', 'fetcher', 'fetch', 'startup', 'attempt', 'thread']",{'thread': 100}
"['generator', 'crash']",{'crash': 100}
"['autocommitter', 'thread', 'contention', 'insane']",{'thread': 100}
"['buffer', 'message']",{'buffer': 100}
"['minor', 'issue', 'crash']","{'issue': 100, 'crash': 100}"
"['possible', 'middle', 'queue', 'unlock', 'thread']",{'thread': 100}
"['certain', 'fetchpartition', 'subtle', 'unlock', 'message', 'deadlock']",{'deadlock': 100}
"['fetch', 'parameter', 'honor', 'thread']",{'thread': 100}
"['possible', 'buffer']",{'buffer': 100}
"['corruption', 'crash']",{'crash': 100}
"['separate', 'thread']",{'thread': 100}
"['partition', 'fetch', 'thread', 'livedpartition', 'partition', 'incompatible', 'loopingtimeout', 'partition', 'registryworkedinternal', 'fetch', 'thread', 'runningpartition', 'available', 'queue', 'registry', 'messagepartition', 'consumer', 'queue', 'management', 'state']",{'thread': 100}
"['eecea', 'mergerequest', 'disqusfetch', 'concurrent']",{'concurrent': 100}
"['thread', 'ownedpartition', 'fetch']",{'thread': 100}
"['fetch', 'thread']",{'thread': 100}
"['length', 'bunch']",{'length': 100}
"['fetch', 'worker', 'laucnhes', 'thread']",{'thread': 100}
"['error', 'check', 'length', 'message']",{'length': 100}
"['favor', 'issue']",{'issue': 100}
