message,fuzzy
"['contains', 'releasetreat', 'loggermemory', 'buffer', 'writescontrol', 'sourcezaptest', 'filterdocumentation']",{'buffer': 100}
"['method', 'writestringequivalent', 'appendbyte', 'method', 'appendstringsignature', 'compatiblebufferwriter', 'bufiowithout', 'buffer', 'allowsexample', 'extra', 'msgpack', 'librarywriter', 'extra', 'incurs', 'wrappedvmihailenco', 'msgpack', 'master']",{'buffer': 100}
"['writer', 'zapcore', 'bufferedmemory', 'buffer']",{'buffer': 100}
"['expose', 'filter', 'zaptest', 'observedlogsobservedlogs', 'consumer', 'filter', 'loggedentry', 'incompatiblefiltermessage', 'method', 'existingconstruct', 'observedlogsallowlevel', 'exact', 'arbitrary']",{'expose': 100}
"['observer', 'filterfieldkey', 'functionality', 'filtervalue', 'regardless', 'field', 'existenceresolve', 'issue']",{'issue': 100}
"['deepsource', 'quality', 'issue']",{'issue': 100}
"['observer', 'filterfieldkey', 'functionality', 'filtervalue', 'regardless', 'field', 'existenceresolve', 'issue']",{'issue': 100}
"['deepsource', 'quality', 'issue']",{'issue': 100}
"['customize', 'testability', 'option', 'fatal', 'currentlycustomize', 'option', 'trigger', 'behaviourgoexit']",{'fatal': 100}
"['stackskip', 'callerskip', 'trace', 'stack', 'honor', 'callerskip', 'trace', 'stack', 'honor', 'caller', 'pointstackskip', 'similar', 'frame', 'specific', 'frame', 'behavior', 'number', 'calculate', 'caller', 'relies']",{'stack': 100}
"['staticcheck', 'issuestaticcheck', 'issue', 'linterfound']",{'issue': 100}
"['standard', 'depthwrapper', 'caller', 'libraryissuecomment', 'issue']",{'issue': 100}
"['encoder', 'buffer', 'generic', 'reflectionreflection', 'buffer', 'encoders']",{'buffer': 100}
"['testingt', 'zaptest', 'interface', 'expandlarger', 'expands', 'interface', 'testingt', 'subsetfollowingfavor', 'errorf', 'errorfavor', 'fatal', 'errorffailnowmethod', 'loggerskippinghelper']",{'fatal': 100}
"['standard', 'godoc', 'redirection', 'librarydocumentation', 'standard', 'redirect', 'function', 'libraryreset', 'standard', 'incorrect', 'outputstandard']",{'incorrect': 100}
"['frame', 'ignore', 'stack', 'currentlygoroutine', 'alwaysadditional', 'goroutine', 'goroutines', 'includenoiselogic', 'frame', 'ignore', 'frame', 'stack', 'sincealready', 'ignore']",{'stack': 100}
"['stacktrace', 'stack', 'frame', 'outputruntime', 'filterstacktrace', 'noise', 'frame', 'filterstack', 'filter']",{'stack': 100}
"['stack', 'traceassumes', 'current', 'pcbufpcbuf', 'incorrect', 'returnreturn', 'update']","{'stack': 100, 'incorrect': 100}"
"['rotationalready', 'lumberjack', 'concurrent', 'loggernatefinch', 'lumberjack']",{'concurrent': 100}
"['window', 'caller', 'discussion', 'issue', 'replaceswindow', 'trimmedpath', 'master']",{'issue': 100}
"['expose', 'party', 'buffer', 'encodersreturn', 'package', 'buffer', 'house', 'internalreason', 'buffer', 'problematiccorrupt', 'individualreference', 'buffer', 'party', 'buffer']","{'expose': 100, 'buffer': 100}"
"['error', 'ignoreapproach', 'solution', 'ignore', 'revert', 'stderr', 'issue', 'stdout', 'compatibility']",{'issue': 100}
"['stack', 'generate', 'support']",{'stack': 100}
"['method', 'changeexpose', 'logger', 'intentionimplementation', 'buffer', 'panic', 'nothingdifferent']",{'buffer': 100}
"['complete', 'bufferpooldummy', 'length', 'capacity', 'buffer']","{'length': 100, 'buffer': 100}"
"['global', 'concurrent', 'loggerglobal', 'concurrent', 'loggerglobal', 'adult', 'avoidedclear', 'naive', 'becomeverify', 'global', 'loggerglobal', 'reconfigure']",{'concurrent': 100}
"['allocation', 'returningallocation', 'order', 'switch', 'pointer', 'interface', 'natural', 'candidateslower', 'standard', 'straight', 'libraryprobablyallocation', 'function', 'friend', 'avoidbuffer', 'small', 'implementrenames', 'buffer', 'strconv', 'privatedifference', 'package', 'clarify', 'bufferpool']",{'buffer': 100}
"['level', 'exportlevel', 'exportconfig', 'precursor', 'logger', 'anotherhydrate', 'loggerprovide', 'specify', 'durationselection', 'encoders', 'changedefault', 'integer', 'currentdefault', 'millisecond']",{'integer': 100}
"['replicate', 'variadic', 'effect', 'difficultexample', 'stack', 'logger', 'value', 'sugaredwithfields', 'accommodate', 'loggerinfowithfields', 'satisfyingdebugwithfieldsdouble', 'ergonomics', 'compile', 'developer', 'safetydebugw', 'making', 'clean', 'sweetenfields', 'machinetogether', 'stringupdate', 'commentcoverage']",{'stack': 100}
"['expose', 'sugaredexpose', 'checkedclean', 'entry', 'loggerlogger']",{'expose': 100}
"['package', 'buffer', 'coverage']",{'buffer': 100}
"['package', 'slice', 'expose', 'package', 'method']",{'expose': 100}
"['dfatal', 'level', 'dpanic', 'convertlevel']",{'fatal': 91}
"['sampler', 'refactor', 'clarifiedlevel', 'detail', 'fatal', 'panic']",{'fatal': 100}
"['fatal', 'check', 'triggeringpanic', 'level', 'fatal', 'alwaysfatal', 'checkedmessagereturn', 'message', 'level', 'valid', 'check', 'alwaysfatal', 'panic', 'sincesampler', 'panic']",{'fatal': 100}
"['concurrent', 'support', 'single', 'writesyncer']",{'concurrent': 100}
"['method', 'field', 'outputmethod', 'logger', 'issue', 'value', 'field', 'hardcodedmasterdetect', 'unable', 'probablyinput', 'givingmasterbuild', 'travis', 'golang', 'valuemethodcheck', 'methodequality', 'booleanfalse', 'respectivelycheck', 'different', 'method', 'unequalityvalue', 'boolean']",{'issue': 100}
"['compatible', 'wrapper', 'stdlibfield', 'unsafebytesaccess', 'package', 'buffer', 'necessaryprecursor', 'building', 'compatiblewrapper', 'compatiblecompatible', 'wrapper', 'stdlibpackage', 'benchmark', 'wrapperpackage', 'makefile', 'wrapperglide', 'manifestremove', 'unnecessaryunsafe', 'method', 'zbark', 'logger', 'upcast', 'method', 'unsafeaddbytes']",{'buffer': 100}
"['replacedefault', 'writer', 'configure', 'constructreason', 'globalreplaceflush', 'panic', 'whenever', 'fatal', 'outputprogram', 'chance', 'important', 'writeoutput', 'bufferedreplace', 'accomodatealready', 'satisfywrappercomment', 'address']",{'fatal': 100}
"['loggeroptionnumber', 'support', 'variable', 'loggerflight', 'message', 'trace', 'message', 'stack', 'includemessage', 'givenaddcallerimprove', 'coverage']",{'stack': 100}
"['factory', 'stacktraces', 'fieldfactory', 'stacktraces', 'fieldfactory', 'fieldattempt', 'wrappernecessary', 'buffer', 'allocateswhole', 'captureexpensive', 'trace', 'stack', 'stacktrace', 'stringamount', 'microsecondstacktrace', 'fieldupdate']","{'buffer': 100, 'stack': 100}"
