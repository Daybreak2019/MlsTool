message,fuzzy
"['improvementkafka', 'issue', 'spring', 'projectassignment', 'small', 'intervalresolution']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['nullable', 'incorrect']",{'incorrect': 100}
"['release', 'buildquestion', 'error', 'thread', 'token', 'action', 'github', 'syntaxprepare', 'dependency', 'upgrade', 'release']",{'thread': 100}
"['outbound', 'conversion', 'contentkafka', 'issue', 'spring', 'project']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['resolver', 'config', 'highlight', 'defaultkafka', 'issue', 'spring', 'project']",{'issue': 100}
"['concatmapkafka', 'issue', 'spring', 'projectmessage', 'state', 'documentation', 'reactor', 'project', 'kafkaconcatmap', 'flatmap', 'usingoperator']",{'issue': 100}
"['issue', 'sonar', 'suppress', 'method']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['issue', 'suppress', 'sonarreduce', 'clause', 'catch', 'complexity']",{'issue': 100}
"['removekafka', 'issue', 'spring', 'project']",{'issue': 100}
"['kafka', 'issue', 'spring', 'project']",{'issue': 100}
"['handler', 'factory', 'kafkalistener', 'expose', 'external', 'framework']",{'expose': 100}
"['issue', 'sonar']",{'issue': 100}
"['micrometer', 'metrickafka', 'issue', 'spring', 'metric', 'basedcapture']",{'issue': 100}
"['improvementlocal', 'thread']",{'thread': 100}
"['kafkatemplate', 'javadoc', 'safety', 'thread']",{'thread': 100}
"['issue', 'sonar']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['publicbinder', 'stream', 'issue', 'cloud', 'kafka', 'spring']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['producer', 'thread']",{'thread': 100}
"['exitingkafka', 'issue', 'spring', 'projectkafka', 'issue', 'spring', 'projectgradle', 'issuecherry']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['kafka', 'issue', 'spring', 'project']",{'issue': 100}
"['propertykafka', 'issue', 'spring', 'factory', 'producer']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['unusedkafka', 'issue', 'spring', 'project']",{'issue': 100}
"['generation', 'restore']",{'generation': 100}
"['fatal', 'exception']",{'fatal': 100}
"['batch', 'abortkafka', 'issue', 'spring', 'project']",{'issue': 100}
"['expose', 'streamsbuilder', 'topologyissue', 'project', 'kafka', 'springdirect', 'toplogy', 'accessbinder', 'client', 'beneficial', 'strems', 'kafkatopology', 'stream', 'cloud', 'access', 'spring', 'object']",{'expose': 100}
"['contribution', 'ofjira', 'guideline', 'githubreplace', 'contribution', 'issue', 'guideline', 'ticket', 'githubrequest']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['customkafka', 'issue', 'spring', 'projectmethod', 'changefield', 'documentationsmall', 'documentation', 'changedocumentationwhitespaces']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['grgit', 'onlyif', 'enablegrgit', 'onlyif', 'enablekafka', 'issue', 'spring', 'projectoutside', 'repository', 'people', 'project', 'buildgralde', 'conditionalgrgit', 'object', 'presencerepositoryotherwisecheck', 'modifiedfiles', 'grgit', 'presenceplugin', 'check']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['fatal', 'exceptionissue', 'project', 'kafka', 'springerror', 'container', 'authorization', 'storm', 'createexceptioncherry']",{'fatal': 100}
"['issue', 'sonar']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['compatible', 'backward', 'defkafkahmapperkafka', 'issue', 'spring', 'projectrestoremimetype', 'mediatypeproperty', 'tostringclasses', 'defaultheader', 'producerrecordvalue', 'encode', 'tostringclasses', 'backwardcompatibilitycompatible', 'version', 'previous', 'backwardbreak', 'current', 'version', 'recreate', 'postel', 'representation']",{'issue': 100}
"['empty', 'string', 'header', 'value', 'mappingkafka', 'issue', 'spring', 'project']",{'issue': 100}
"['stceh', 'deprecatedkafka', 'issue', 'spring', 'maxfailures', 'deprecatednegative', 'retries', 'backoff', 'maxfailures', 'infinite']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['consumerkafka', 'issue', 'spring', 'operation', 'wokenwould', 'commitsync', 'offset', 'callinginterceptor', 'callbacklogic', 'consumercherry']",{'issue': 100}
"['kafka', 'issue', 'spring', 'alwaysmaintain', 'topic', 'state', 'partition']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['transaction', 'levelkafka', 'issue', 'spring', 'projectdetermine', 'manual', 'transaction', 'reference', 'supportmessage', 'sendingmessage', 'transaction', 'levelgradle', 'moore', 'upgrade', 'spring']",{'issue': 100}
"['update', 'snippet', 'return', 'misspellingkafka', 'issue', 'spring', 'project']",{'issue': 100}
"['retry', 'assert', 'batch', 'listenerkafka', 'issue', 'spring', 'projectavoid']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['option', 'containeroption', 'containerkafka', 'issue', 'spring', 'projectallows', 'option', 'configuresleep', 'interval', 'minimum', 'sleep', 'interval', 'actualrecord', 'option', 'differenceprocessingcalculation', 'reset', 'stateextra', 'condition', 'processing']",{'issue': 100}
"['sendoffsets', 'transaction', 'localkafka', 'issue', 'spring', 'transactional', 'local', 'producercherry']",{'issue': 100}
"['deprecationkafka', 'issue', 'spring', 'projectrevert', 'deprecatecommit', 'previousclass', 'stream', 'polish', 'utility', 'conversion', 'method', 'deprecatedswitch', 'factory', 'varargs']",{'issue': 100}
"['class', 'issue', 'large', 'sonar']",{'issue': 100}
"['issue', 'javadocs']",{'issue': 100}
"['kafka', 'issue', 'spring', 'projectsingle', 'enforces', 'functionsimplyfunction', 'supplier', 'settingsingle', 'configuration', 'valuepossible', 'raiseprivate', 'bifunction', 'renamesetter', 'respectingsugar', 'refactoringunify', 'simplifymethodwrong', 'place', 'sincesyntax', 'adocs', 'javadocscopyright', 'correctinvocation']",{'issue': 100}
"['supplier', 'serializerskafka', 'issue', 'spring', 'projectalternative', 'consumer', 'producerinstance', 'configurationcoverage', 'extendcompliance', 'ensure', 'consumerfactoryoption', 'addition', 'constructorreview', 'assertionreadable', 'setupsplit', 'invocation', 'createconsumerreview', 'addressingfinal', 'update', 'couple', 'proofdocumentation', 'comment']",{'issue': 100}
"['kstream', 'headerkafka', 'issue', 'spring', 'projectretrieve', 'lastheader', 'header', 'ensureheader', 'clearusetypeheaders', 'deser', 'property', 'kafka', 'exposecherry']",{'issue': 100}
"['usage', 'runnablekafka', 'issue', 'spring', 'projectcallback', 'componentcherry', 'support', 'spring']",{'issue': 100}
"['kafka', 'issue', 'spring', 'projectintroduce', 'simpleproper', 'mimetype', 'platform', 'inter', 'objectcarry', 'essentiallyregister', 'moduleapplication', 'directlycollection', 'mimetypemappedcheck', 'modify', 'serializedcollectionpackage', 'protecteddocumentimport', 'unusedparse', 'header', 'mimetype', 'textnode']",{'issue': 100}
"['kafka', 'issue', 'spring', 'projectgetsinglerecord', 'consumertopic', 'multiplemessage', 'ensure', 'assert', 'changerecord', 'topic', 'retrievedcherry']",{'issue': 100}
"['rebalance', 'consumer', 'pausingkafka', 'issue', 'spring', 'projectlistener', 'pause', 'consumer', 'rebalanceotherwise', 'discard']",{'issue': 100}
"['kafkaembeddedkafka', 'issue', 'spring', 'projectguarantee', 'junit', 'classpath', 'deprecatedclass', 'method', 'sinceremove', 'altogether', 'workaround']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['issue', 'javadoc', 'seekutils']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['prefix', 'configprefix', 'configkafka', 'issue', 'spring', 'contains', 'configstreat', 'prefixtarget', 'override', 'producervalue', 'target', 'prefix', 'goingproducervalue', 'togetherexplicit', 'config']",{'issue': 100}
"['supportkafka', 'issue', 'spring']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['update', 'scalakafka', 'issue', 'spring', 'project']",{'issue': 100}
"['scala', 'upgradekafka', 'issue', 'spring', 'projectversion']",{'issue': 100}
"['jsondeser', 'support', 'typereferencekafka', 'issue', 'spring', 'projectbetter', 'ctors', 'generic']",{'issue': 100}
"['defaultkafka', 'issue', 'spring', 'projectintroduce', 'class', 'factory', 'jacksonutilswhenever', 'objectmapper', 'defaultinstantiate', 'objectmapper', 'jacksonutilsregisterknown']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['closekafka', 'issue', 'spring', 'drain', 'writeobject', 'differencestream', 'flush', 'output', 'closecherry']",{'issue': 100}
"['seektocurrent', 'retrieskafka', 'issue', 'spring', 'projectleast', 'maxattemptscherryretries', 'infiniteclass', 'sonar']",{'issue': 100}
"['kafka', 'reactive', 'operationkafka', 'issue', 'spring', 'projectkafka', 'header', 'template', 'constructioneliminates', 'message', 'reactive', 'template', 'record', 'duplication', 'kafka', 'produceroperation', 'reactive', 'reactor', 'kafka', 'implementationremove', 'autoflush', 'functionalityreactive', 'autoflush', 'record', 'flatmap', 'invoke', 'enabledoptimal', 'element', 'template', 'kafka', 'publisher', 'functionality', 'policy', 'decidedrecord', 'condition', 'generic', 'metadatapolishrecord', 'publisher', 'multipletransactionalpolishflushpolishrecord', 'stabilize', 'anotherinterface', 'member', 'operationshortcut', 'template', 'interface', 'smallerfailingreplace', 'offsetheader', 'template', 'revert', 'construction', 'kafkareverts', 'check', 'header', 'correlation', 'kafkatemplatecollection', 'signature', 'changeextra', 'insteadflatten', 'batchconsumer', 'template', 'collection', 'signaturegroup', 'transaction', 'simplify', 'record', 'signatureoperation', 'reactive', 'kafkaoutbound', 'expose', 'record', 'metadatacodacyremove', 'authoringversion', 'upgrade', 'reactorcommit', 'upgradecodacywhole', 'return', 'insteadoperation', 'reactive', 'consumer', 'kafka', 'interface', 'producertopic', 'consumer', 'template', 'collection', 'partition', 'method', 'signatureupdate', 'version', 'reactor', 'milestone', 'availableversion', 'dependency', 'reactor', 'propertyremove', 'template', 'producerdemonstrate', 'upgrade', 'reactorargument', 'assertiontuples', 'reactor', 'entryindentationclass', 'sincejavadoc', 'warning', 'style']","{'issue': 100, 'expose': 100}"
"['issue', 'sonar']",{'issue': 100}
"['batch', 'listener', 'kafkanullkafka', 'issue', 'spring', 'projectreplace', 'element', 'kafkanull', 'payload']",{'issue': 100}
"['reference', 'vlaue', 'constant', 'javadocscosntantsimple', 'value', 'referconstant', 'expose', 'publictarget', 'project']",{'expose': 100}
"['exceptionkafka', 'issue', 'spring', 'projectaccess']",{'issue': 100}
"['erializerkafka', 'issue', 'spring', 'project']",{'issue': 100}
"['consumer', 'error', 'handler', 'error', 'container', 'awareconsumer', 'throwcontainer', 'wrong', 'exception', 'child', 'containerinstead', 'concurrent']",{'concurrent': 100}
"['batch', 'listenerkafka', 'issue', 'spring', 'projectbatch', 'groupid']",{'issue': 100}
"['issue', 'update', 'template']",{'issue': 100}
"['issue', 'sonar']",{'issue': 100}
"['handler', 'detection', 'errorkafka', 'issue', 'spring', 'projecthandler', 'error', 'value', 'wiredissue', 'property', 'nullable', 'sonar']",{'issue': 100}
"['detect', 'alwayskafka', 'issue', 'spring', 'projectdeserializer', 'presence', 'kafka', 'configureddetects', 'consumer', 'error', 'exception', 'routedeserializer', 'setkey']",{'issue': 100}
"['kafka', 'issue', 'spring', 'projectproper', 'container', 'invoke', 'method', 'regression', 'additioncherryreplace', 'conflict']",{'issue': 100}
"['object', 'mapper', 'config', 'defaultkafka', 'issue', 'spring', 'configuration', 'option', 'reader']",{'issue': 100}
"['consumer', 'cache', 'producerkafka', 'issue', 'spring', 'projecttopic', 'group', 'thread', 'container', 'zombie', 'partition', 'runninggeneral', 'transactional', 'cache', 'producerarbitrary', 'transactionmerge', 'backport', 'cherry', 'review']","{'issue': 100, 'thread': 100}"
"['correctkafka', 'issue', 'spring', 'projectinitial', 'zombieoffsetcherry', 'backport', 'probabletransaction']",{'issue': 100}
"['polish', 'config', 'templatequestion', 'issue', 'kafka', 'spring']",{'issue': 100}
"['tanglekafka', 'issue', 'spring', 'listener', 'event', 'tanglecontainer']",{'issue': 100}
"['batch', 'adapterrsolves', 'issue', 'project', 'kafka', 'spring']",{'issue': 100}
"['parent', 'event', 'containerkafka', 'issue', 'spring', 'project']",{'issue': 100}
"['check', 'closeproducerskafka', 'issue', 'spring', 'projectreturn']",{'issue': 100}
"['target', 'array', 'fixedkafka', 'issue', 'spring']",{'issue': 100}
"['sonar', 'issue']",{'issue': 100}
"['sonar', 'issue', 'various', 'address']",{'issue': 100}
"['errorhandlerfixeds', 'issue', 'project', 'kafka', 'spring']",{'issue': 100}
"['genericgenerickafka', 'issue', 'spring', 'projectensure', 'experiencegenericimplement', 'methodcompilation', 'atomicreference', 'generic', 'wrapperregular', 'proper', 'configure', 'ensure', 'logicproperlycompilation', 'propertrick', 'genericpolishingheader', 'headercalledviolation', 'checkstyleheader']",{'issue': 100}
"['documentation', 'deliverykafka', 'issue', 'spring', 'projectreference', 'removereference']",{'issue': 100}
"['consumer', 'rebalancekafka', 'issue', 'spring', 'projectkafka', 'resume', 'consumer', 'sincestart', 'withoutconsumer', 'pause', 'boolean', 'issue', 'stand']",{'issue': 100}
"['kafka', 'issue', 'spring', 'projectlifecycle', 'producermethod', 'resetdeprecate', 'lifecycle', 'method']",{'issue': 100}
"['resetkafka', 'issue', 'spring', 'close', 'producer']",{'issue': 100}
"['javadocskafka', 'issue', 'spring', 'project']",{'issue': 100}
"['rethrowkafka', 'issue', 'spring', 'projectcherry']",{'issue': 100}
"['project', 'kafka', 'springconsumer', 'event', 'thread']",{'thread': 100}
"['transactional', 'error', 'close', 'producerkafka', 'issue', 'spring', 'projectcommit', 'rollback', 'exception', 'close', 'exception', 'transactional', 'thrown', 'exception', 'fatal', 'exceptionproduceroccurs', 'transactional', 'close', 'exception', 'producer']","{'issue': 100, 'fatal': 100}"
"['junitkafka', 'issue', 'spring', 'current', 'junitplain', 'junitclass', 'extract', 'levelwrappercreates', 'embeddedkafkasupport', 'spring']",{'issue': 100}
"['string', 'header', 'mimetypekafka', 'issue', 'spring', 'projectheader']",{'issue': 100}
"['collection', 'message', 'returnkafka', 'issue', 'spring', 'projectkafka', 'issue', 'spring', 'projectcollection', 'message', 'returnmessage', 'sendto', 'empty', 'thereof', 'collection', 'return']",{'issue': 100}
"['exclude', 'dependency', 'springkafka', 'issue', 'spring', 'projectdependency', 'spring', 'transitive', 'retry', 'exclusioncherry']",{'issue': 100}
"['improvement', 'payloadkafka', 'issue', 'spring', 'projecttombstone', 'documentation']",{'issue': 100}
"['tombstone', 'deser', 'handlekafka', 'issue', 'spring', 'projectcherry']",{'issue': 100}
"['child', 'propagatekafka', 'issue', 'spring', 'projectpropagate', 'container', 'concurrentchildcherry']",{'issue': 100}
"['kotlin', 'batch', 'listenerkafka', 'issue', 'spring', 'projectissue', 'batch', 'showingcheckstyle', 'fixingillegal', 'import']",{'issue': 100}
"['property', 'containerkafka', 'issue', 'spring', 'projectstart', 'topic', 'container']",{'issue': 100}
"['kafka', 'issue', 'spring']",{'issue': 100}
"['transaction', 'errorhandlerkafka', 'issue', 'spring', 'projecthandler', 'error', 'offsetreflect', 'transaction', 'polish', 'ackonerror', 'javadoc']",{'issue': 100}
"['allowkafka', 'issue', 'spring', 'project']",{'issue': 100}
"['consumerfactory', 'method', 'defaultimplement', 'implementation', 'avoidtodos', 'coupleimplementation', 'method', 'defaultkafka', 'issue', 'spring', 'project']",{'issue': 100}
"['generic', 'errorkafka', 'issue', 'spring', 'projectoutside', 'exception', 'listenernever', 'handler', 'error', 'recordloggingcheck', 'handler', 'consumer', 'error']",{'issue': 100}
"['producerkafka', 'issue', 'spring', 'projectreproduce', 'issue', 'occurs', 'problem', 'exception', 'exceptionprevent', 'return', 'producer', 'exceptionanother', 'exception', 'producerinstance', 'possible', 'producerfence', 'givenencounter', 'transactional', 'close', 'producercherrycherry']",{'issue': 100}
"['rollbackkafka', 'issue', 'spring', 'projectkafka', 'issue', 'spring', 'performedunprocessedhandler', 'batch', 'error', 'offsethandle', 'offsetenhance', 'verifycommit', 'batch', 'listenercherry', 'backportsimple']",{'issue': 100}
"['jsonserializer', 'check', 'headerkafka', 'issue', 'spring', 'projectkafka', 'header', 'serde', 'streamcherry']",{'issue': 100}
"['threadbinder', 'stream', 'issue', 'cloud', 'kafka', 'springconsumer', 'prefix', 'token', 'threadcherry']",{'issue': 100}
"['master', 'tanglekafka', 'issue', 'spring', 'projectpackage', 'config', 'tangleclass', 'container', 'listener', 'ackmode', 'propertysetter', 'handler', 'error', 'property', 'container']",{'issue': 100}
"['timeout', 'increasekafka', 'issue', 'spring', 'project']",{'issue': 100}
"['nonresponsive', 'spurious', 'consumer', 'eventkafka', 'issue', 'spring', 'projectpublication', 'timestamp', 'invalid', 'event']",{'issue': 100}
"['compatibility', 'clientcompatibility', 'clientkafka', 'issue', 'spring', 'projectrevert', 'versionversion']",{'issue': 100}
"['kafka', 'issue', 'spring', 'projectcount']",{'issue': 100}
"['issue', 'concurrencykafka', 'issue', 'spring', 'projectforeign', 'concurrency', 'calledconsumer', 'thread', 'field', 'clear', 'problem', 'offsetconsumer', 'objectconsumer', 'thread', 'foreign', 'calledrevert', 'hashmap', 'simple', 'offsetreference', 'thread', 'consumer', 'offsetimmediate', 'queue', 'enqueue', 'foreignlambda', 'operator', 'cherry', 'diamond']","{'issue': 100, 'concurren': 90, 'thread': 100}"
"['general', 'errorkafka', 'issue', 'spring', 'projecthandler', 'general', 'error', 'support', 'callinglistenerwrong', 'methodlowest', 'hierarchy', 'interface', 'method', 'default', 'implementationinvoke', 'errorhandlerhandler', 'regardless', 'error']",{'issue': 100}
"['initialkafka', 'issue', 'spring', 'projectinitial', 'seekposition', 'offsetsubsequentinitial', 'process', 'style']",{'issue': 100}
"['header', 'differentkafka', 'issue', 'spring', 'projectserialize', 'valueiskey', 'jsonserializer', 'configurecollection', 'serializationiskeyupdate', 'author', 'copyrightconfigurablemethod', 'defaultiskey', 'ctors', 'contractrefactor', 'header', 'configjavadocremove', 'phantom', 'authorrefactor', 'header', 'configjavadoccopyrightfluid', 'builder', 'jsonserderemove']",{'issue': 100}
"['accessor', 'expose']",{'expose': 100}
"['management', 'concurrentmaps', 'offsetkafka', 'issue', 'spring', 'projectanother', 'acknowledgment', 'listener']",{'issue': 100}
"['embeddedkafkakafka', 'issue', 'spring', 'projectplaceholder', 'update', 'propertytopic', 'update', 'propertydetail', 'embeddedkafka', 'property']",{'issue': 100}
"['enhancementkafka', 'issue', 'spring', 'projectcustomizable', 'streamsconfigphaseaddingreview', 'comment', 'addressingreview', 'comment']",{'issue': 100}
"['partitionkafka', 'issue', 'spring', 'projectpackagecherry']",{'issue': 100}
"['kafkalistener', 'converter', 'populatekafka', 'issue', 'spring', 'projectcreation', 'order', 'factory', 'listenerclientrefactor', 'converteraddformattersdocumentationdocumentation']",{'issue': 100}
"['listener', 'containerkafka', 'issue', 'spring']",{'issue': 100}
"['smartlifecycle', 'phase', 'listener', 'containerkafka', 'issue', 'spring']",{'issue': 100}
"['multi', 'kafkalistener', 'method', 'listenerkafka', 'issue', 'spring', 'annotation', 'payload', 'lookingheader']",{'issue': 100}
"['kafkaadminkafka', 'issue', 'spring', 'projecttimeout']",{'issue': 100}
"['kafka', 'issue', 'spring', 'partition', 'offset', 'reset', 'implementationrecord', 'returnunprocessedaccess', 'container']",{'issue': 100}
"['expose', 'propertykafka', 'spring', 'projectstart', 'kafkaembeddedbetter', 'experience', 'string', 'exposesystem', 'properlykafka']",{'expose': 100}
"['lifecycle', 'containerkafka', 'issue', 'spring', 'projectstart', 'ignore', 'containeroptimization', 'dostop']",{'issue': 100}
"['header', 'mapperkafka', 'issue', 'spring', 'projectkafka', 'issue', 'spring', 'projectdependency', 'default']",{'issue': 100}
"['topic', 'declarative', 'kafkaadmin', 'createissue', 'project', 'kafka', 'springinitial', 'commentreworkadmininitialize', 'expose', 'method', 'comment', 'accordingtautologystream', 'processing', 'construction', 'redundantremove', 'reference', 'kafkaadminreason']",{'expose': 100}
"['kafkalistener', 'groupkafka', 'issue', 'spring', 'projectproperty', 'consumergroupid', 'regardless']",{'issue': 100}
"['kafkastreams', 'document', 'close', 'accesskafka', 'issue', 'spring', 'projectkafka', 'issue', 'spring', 'projectclosetimeout', 'option', 'avoidkafkastreams', 'internal', 'phase', 'infinitesample', 'document', 'kafkastreams', 'accessinjection', 'instance']",{'issue': 100}
"['fatalkafka', 'issue', 'spring', 'project']",{'issue': 100}
"['valuekafka', 'issue', 'spring', 'projectvalue', 'content', 'assistclass']",{'issue': 100}
"['message', 'consumerkafka', 'issue', 'spring', 'consumerpolishingwhats', 'embeddedkafka']",{'issue': 100}
"['aware', 'consumer', 'listenerissue', 'project', 'kafka', 'springbatch', 'consumer', 'record', 'refactor', 'listenerpreserve', 'level', 'semantics', 'override', 'defaultrefactor', 'class', 'update', 'suport', 'consumer', 'filter', 'aware', 'retry', 'adapterdetermine', 'ultimate', 'listener', 'containeracknowledgment', 'objectaccess', 'kafkalistener', 'consumerdelegate', 'level', 'multi', 'invocation', 'detection', 'method', 'listenermessage', 'verification', 'stack', 'trace', 'brittle', 'consumer', 'pause', 'kafka', 'spring', 'garyrussellconflictkafka', 'springframework', 'spring', 'eventkafka', 'springframework', 'spring', 'listenerkafka', 'springframework', 'spring']",{'stack': 100}
"['autocommit', 'return', 'value', 'defaultkafka', 'issue', 'spring', 'return', 'falsecause', 'issue', 'container', 'property', 'strangemessage', 'unread', 'partition', 'offsetaround', 'explicitlypatitions', 'message', 'question']",{'issue': 100}
"['executor', 'documentationclarification', 'thread', 'recent', 'defaultexecutor', 'container', 'thread', 'property']",{'thread': 100}
"['consumer', 'thread', 'stubbingcherry']",{'thread': 100}
"['optimizecommit', 'project', 'batch', 'issue', 'partition', 'offset', 'kafka', 'springcommit', 'batch', 'manual', 'assumption', 'addoffset', 'offset', 'logic', 'method', 'consumer', 'record']",{'issue': 100}
"['spring', 'projectmessage', 'truncates', 'thread', 'spring', 'appearanceprocessedexamplelogback', 'config', 'threadkafka', 'listener', 'containerkafka', 'listener', 'containercontainercontainerpolishingremove', 'prefix']",{'thread': 100}
"['batch', 'offsetkafka', 'issue', 'spring', 'hinders', 'batch', 'offsethighest', 'partition', 'offsetcherry', 'master']",{'issue': 100}
"['batchkafka', 'issue', 'spring', 'projectnever', 'offset', 'falserecord', 'commits', 'isanymanualackcherry']",{'issue': 100}
"['kafkatemplate', 'cache', 'producerkafka', 'issue', 'spring', 'projectfactory', 'template', 'fetch', 'singleton', 'producercherryclose', 'producer', 'operation']",{'issue': 100}
"['kafka', 'issue', 'spring', 'projectblock', 'string', 'value', 'iterate', 'return', 'resolvedvalue', 'instanceofcondition', 'secondconfirm', 'topic', 'string']",{'issue': 100}
"['obsolete', 'conditionkafka', 'issue', 'spring', 'projecttopic', 'commitsync', 'performedbrowseconsumer', 'subsequent', 'barrier', 'commitsync']",{'issue': 100}
"['sample', 'obsolete', 'quickkafka', 'issue', 'spring', 'projectcherry']",{'issue': 100}
"['sample', 'inconsistency', 'quickkafka', 'issue', 'spring', 'projectsample', 'instance', 'valid', 'introduction', 'referencecreatecontainer']",{'issue': 100}
"['wakeup', 'consumer', 'queueingkafka', 'issue', 'spring', 'projectmessage', 'consumer', 'rebalance', 'trigger']",{'issue': 100}
"['enablekafka', 'documentkafka', 'issue', 'spring', 'projectenablekafka', 'sample', 'manual', 'description', 'referenceacknowledgment']",{'issue': 100}
"['manual', 'populatekafka', 'issue', 'spring', 'projectprovide', 'manual', 'container']",{'issue': 100}
"['kafkalistenersupport', 'kafkalistenercallback', 'adaptercommit', 'callback', 'thread', 'commentcommit', 'threadingsinceinitial', 'partitiondetection', 'containerrebase', 'polish']",{'thread': 100}
"['issue', 'integration', 'project', 'kafka', 'spring']",{'issue': 100}
"['kafka', 'support', 'payloadkafka', 'issue', 'spring', 'projectkafkanullsupport', 'isemptypayload', 'override', 'kafkanullpolishingcommit', 'authorcherry']",{'issue': 100}
"['containerkafka', 'issue', 'spring', 'internal', 'externalbehavior', 'containertopic', 'instance', 'unexpected', 'avoidpattern', 'changecherry']",{'issue': 100}
"['errorkafka', 'issue', 'spring', 'projectmessage', 'target', 'messagelistener', 'corner', 'invoke', 'implementationreceive', 'container', 'exceptioncontainer', 'bubble', 'onmessage', 'exception', 'deprecateregular', 'onmessagemaster', 'altogether', 'currentcherrydeprecatedecide', 'method', 'custom', 'implementation']",{'issue': 100}
"['beginningkafka', 'issue', 'spring', 'projectbatch', 'issue', 'function', 'processcommits', 'beginningtimeouts', 'increasecherrycommit']",{'issue': 100}
"['manual', 'acknowledgekafka', 'issue', 'spring', 'projectmanual', 'listenerrecord', 'invokelistener', 'function', 'unconditionalrecord', 'invokelistenerrecord']",{'issue': 100}
"['thread', 'listener', 'transferrecord', 'processcommits', 'handledcomment']",{'thread': 100}
"['manual', 'ackmode', 'reworkremove', 'property', 'async', 'synccommitsconsumer', 'batch', 'threadwoken', 'acknowledgement', 'consumer', 'thread', 'directlypolishingsimple', 'reformattinglogic', 'countdownlatchcount', 'guaranty', 'logic', 'listenerdifferent', 'processcommits', 'listener', 'thread']",{'thread': 100}
"['validate', 'ackcount', 'acktimekafka', 'issue', 'spring', 'projectreasonable', 'acktime', 'ackcount', 'defaultrequirement', 'acktime', 'ackcount', 'ackmode', 'appropriatesimilar', 'acktime', 'defaultcomment', 'addresscount', 'batch', 'requireacktimevalidate', 'optionmanual', 'javadocs', 'mentionrestore', 'changeovercome', 'assert']",{'issue': 100}
"['manual', 'handlingkafka', 'issue', 'spring', 'projectmergemanualoffsets', 'simplify', 'offset', 'ensuregradle', 'upgrade']",{'issue': 100}
"['offsetkafka', 'issue', 'spring']",{'issue': 100}
"['support', 'topickafka', 'issue', 'spring', 'projectintroduce', 'topicpartition', 'utilizes', 'initialoffsetinitialoffsetnothingabsolute', 'positive', 'offsetnegative', 'relative', 'current', 'initialoffset', 'partition', 'offsetabstraction', 'reworkfavor', 'logic', 'abstraction', 'reworkedremove', 'recentoffset', 'redundantreflectpartitionoffset', 'support']",{'issue': 100}
"['issue', 'ackonerrorkafka', 'issue', 'spring', 'projectlatter', 'error', 'success', 'conditional', 'ackonerror', 'issue', 'processcommits', 'commits', 'invoker']",{'issue': 100}
"['pause', 'resumeresolverebalance', 'consumer', 'causethread', 'consumer', 'solutionkafka', 'beanname', 'consumerkafka', 'beanname', 'listenermessage', 'threadfuture', 'completescontinue', 'consumer', 'heartbeatawoken', 'callback', 'consumer', 'message', 'retrievedconsumermanual', 'listener', 'threadcommit', 'consumer', 'thread', 'blockingqueue', 'actualrightexecution', 'errormessage', 'successfulissue', 'exception', 'assignable', 'consumer', 'configuredpausedsuccessful', 'record', 'delivery', 'attemptedexceptionpropertyresume', 'enable', 'pause', 'pausewhenslow', 'defaultreturn', 'listener', 'pauseafter', 'threadpauseexception', 'pause', 'blockingqueuemaintain', 'order', 'pipeline', 'listener', 'consumerrecordsbecomes', 'consumer', 'pause', 'queuepause', 'queue', 'configurable', 'defaultconsumerrecordsretrytemplate', 'invoker', 'exception', 'retry', 'backoff', 'retry', 'backpressurequeue', 'consumersemantic', 'slight', 'changerecord', 'suspendenhacementsguarantee', 'container', 'return', 'effectivelypattern', 'topic', 'message', 'pending', 'clearflush', 'acknowledgmentpattern', 'topic', 'invokeradditional', 'enhancementautocommit', 'thread', 'single', 'containeradditional', 'enhancementcontainer', 'partition', 'runningadditional', 'changeinterrupt', 'listener', 'cancelasynchronous', 'runnable', 'allowclass', 'simplifyreinstate', 'thread', 'invoker', 'clean', 'interruptcreateargumenttopic', 'listener', 'sinceclonepolishingclass', 'levelsimple']",{'thread': 100}
"['usingkafka', 'issue', 'spring', 'projectlogger']",{'issue': 100}
"['factory', 'option', 'serializerkafka', 'issue', 'spring', 'projectsetter', 'injection', 'consumer', 'serializers', 'producer']","{'issue': 100, 'injection': 100}"
"['injectionkafka', 'issue', 'spring', 'review', 'artembilan']",{'issue': 100}
"['plugin', 'sonarqube', 'upgradekafka', 'issue', 'spring', 'project']",{'issue': 100}
"['migrate', 'check', 'enablekafka', 'issue', 'spring']",{'issue': 100}
"['condition', 'partitionkafka', 'issue', 'spring', 'projectkafkaconsumer', 'condition', 'message', 'position', 'offsetremove', 'dangerousassert']",{'issue': 100}
"['possible', 'checkstypekafka', 'issue', 'spring', 'projectcheckstyle', 'upgrade', 'gradle', 'support']",{'issue': 100}
"['traviskafka', 'issue', 'spring', 'projectreference', 'lifecycle', 'buildpolishingreference']",{'issue': 100}
"['contribution', 'guidelinekafka', 'issue', 'spring', 'projectcontribution', 'procedurecontribution', 'guideline', 'mentionmention']",{'issue': 100}
