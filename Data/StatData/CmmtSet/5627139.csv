message,fuzzy
"['class', 'kotlin', 'lexerclass', 'kotlin', 'lexer', 'treatresult', 'lexer', 'classinterprets', 'incorrect', 'state', 'classcommitcamilleri']",{'incorrect': 100}
"['incorrect', 'usage', 'predicate', 'lexer', 'powershellexistence', 'powershell', 'lexervalue', 'expression', 'state', 'regularwritten', 'predicatecommit']",{'incorrect': 100}
"['support', 'resolution', 'scope', 'lexer', 'operatorinherits', 'majority', 'lexerapproach', 'reduces', 'issueassumption', 'issue', 'causeoccurs', 'resolution', 'scope', 'issuetreat', 'contains', 'lexer', 'statementotherwise', 'colon', 'statement', 'assumption', 'occurcorrect', 'resolution', 'scopewithin', 'colon', 'lexer', 'createsscope', 'resolution', 'negative', 'lookahead', 'matchingresolution', 'scope', 'operator', 'matchingstatement']",{'issue': 100}
"['update', 'generation', 'keywordnumber', 'generate', 'keywordsactual', 'error', 'range', 'language', 'particulardeprecation', 'includesbuilt', 'keywords']",{'generation': 100}
"['support', 'sparql', 'lexer', 'keywordvalid', 'sensitive', 'keywordsparql', 'recognise', 'lexererror', 'turtle', 'lexer']",{'Sensitive': 100}
"['methodvarious', 'kernel', 'issue', 'rouge', 'global', 'maximumcompatibility', 'replacesupdate', 'kernel', 'qualifiedobject']",{'issue': 100}
"['generic', 'state', 'lexer', 'string', 'pythonliteral', 'string', 'python', 'unicodepython', 'lexer', 'multiple', 'contains', 'stateerror', 'approach', 'pronestringregister', 'class', 'differentrecord', 'stack', 'lexer', 'string', 'pythonpossible', 'token', 'state', 'appropriate', 'stringstate']",{'stack': 100}
"['lexer', 'supportnumber', 'heredoc', 'issue', 'syntax', 'labelwould', 'incorrectlysupportbinary', 'numbernumber', 'separatoryield', 'keywordunicode', 'syntax', 'codepointpartial', 'hintingkeywords', 'followingclass', 'callable', 'instanceofinsteadof', 'traitkeywords', 'followingvirtual', 'empty', 'stdclasssimplifies']",{'issue': 100}
"['python', 'lexer', 'operatorlexes', 'consistentnumber', 'specification', 'issue', 'pythoninstead']",{'issue': 100}
"['update', 'github', 'setting', 'issuesection', 'setting', 'update', 'issue', 'rougeprevents', 'request', 'lexer', 'issue', 'markedstale', 'markedsuggests', 'sample']",{'issue': 100}
"['handlebar', 'attribute', 'lexer', 'issue', 'control', 'attribute', 'whitespace']",{'issue': 100}
"['label', 'probot', 'exemptcertain', 'issue', 'label', 'probot', 'github', 'exclude', 'markedsubject']",{'issue': 100}
"['issue', 'stale']",{'issue': 100}
"['close', 'stale', 'issue', 'stale', 'probot', 'githubactivity', 'exempts', 'period']",{'issue': 100}
"['support', 'literal', 'separator', 'lexer', 'integersupport', 'lexerseparator', 'integer']",{'integer': 100}
"['template', 'issue', 'duplicate']",{'issue': 100}
"['common', 'lexer', 'crash', 'common', 'lexer', 'unmatched', 'closingparenthesis', 'stack', 'stackleast', 'state', 'bottom', 'poppingstack', 'error', 'empty', 'thrown', 'stateguard', 'stack', 'checkparenthesis', 'generate', 'unmatched', 'closingerror']","{'crash': 100, 'stack': 100}"
"['integer', 'python', 'sample', 'visual']",{'integer': 100}
"['integer', 'python', 'lexer', 'literal']",{'integer': 100}
"['update', 'system', 'installtravis', 'issue']",{'issue': 100}
"['enable', 'closetoken', 'formatter', 'representation', 'formattoken', 'stream', 'specifytoken', 'commandtoken', 'rougifyrouge', 'integer', 'tokenrouge', 'operator', 'tokenrouge', 'integer', 'tokenrouge']",{'integer': 100}
"['mergerequest', 'jneen', 'makefile', 'issue']",{'issue': 100}
"['makefile', 'issue']",{'issue': 100}
"['mergerequest', 'jneen', 'mergeremove', 'consolelexer', 'issue']",{'issue': 100}
"['consolelexer', 'issue']",{'issue': 100}
"['mergebreakout', 'regex', 'lexer', 'incorrect']",{'incorrect': 100}
"['aafdc', 'mergerequest', 'issue', 'mojavelinuxresolve', 'keywords']",{'issue': 100}
"['mergerequest', 'issue']",{'issue': 100}
"['mergerequest', 'oliver', 'permission', 'mergepermission']",{'permission': 100}
"['afacf', 'mergerequest', 'abalkin', 'issuelexer', 'issue']",{'issue': 100}
"['system', 'issue']",{'issue': 100}
"['symbol', 'issue']",{'issue': 100}
"['special', 'issue']",{'issue': 100}
"['keywords', 'issue']",{'issue': 100}
"['valid', 'issue']",{'issue': 100}
"['integer', 'distinguish', 'lexer', 'float']",{'integer': 100}
"['error', 'issue', 'month', 'turtle', 'lexer', 'similar', 'rouge']",{'issue': 100}
"['positive', 'token', 'number', 'actionscriptnumber', 'integer']",{'integer': 100}
"['lexer', 'issue']",{'issue': 100}
"['example', 'struct', 'issue']",{'issue': 100}
"['insensitive', 'filename']",{'Sensitive': 90}
"['wrong', 'length', 'square', 'regexp', 'string', 'bracketcomment']",{'length': 100}
"['improvement', 'apache', 'lexerfaster', 'lookup', 'keyworderror', 'directive', 'issue', 'unknownsection', 'directive', 'documentation', 'insensitive', 'issue', 'apachehandle', 'window']","{'issue': 100, 'Sensitive': 90}"
"['mergerequest', 'issue', 'token', 'precedence']",{'issue': 100}
"['revoke', 'claimgithub', 'claim', 'possible', 'filename', 'language', 'issue', 'rouge', 'lexer', 'shell']",{'issue': 100}
"['prolog', 'request', 'mumuki', 'issuecamelcase', 'prolog', 'lexer', 'issue']",{'issue': 100}
"['camelcase', 'prolog', 'lexer', 'issue', 'fixingcamelcase', 'predicate', 'functor', 'consideredwould', 'camel', 'camelcaseatom', 'highlightedcamelcaseatom']",{'issue': 100}
"['support', 'filename', 'drupal', 'lexer', 'extensiongitlabhq', 'issue']",{'issue': 100}
"['lexerpatch', 'lexer', 'rumpelsepp', 'douwe', 'rugments', 'issue']",{'issue': 100}
"['lexer', 'improvelexer', 'correctlypatch', 'email', 'ensuresproblem', 'error', 'furthermore', 'removedremove', 'trivial', 'ratherrugments', 'rumpelsepp', 'issue']",{'issue': 100}
"['lexer', 'issue']",{'issue': 100}
"['point', 'interpolation', 'value', 'issue']",{'issue': 100}
"['dependencyexplicit', 'rubinius', 'dependencyissuecomment', 'rubinius', 'issue']",{'issue': 100}
"['travis', 'rubiniustemporary', 'issue']",{'issue': 100}
"['comment', 'issue']",{'issue': 100}
"['regexlexer', 'reset', 'stack']",{'stack': 100}
"['internals', 'expose', 'theme']",{'expose': 100}
"['scanner', 'introduce', 'stack', 'encapsulates']",{'stack': 100}
