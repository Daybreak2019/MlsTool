message,fuzzy
"['current', 'issuelibtomcrypt', 'libtom', 'issue']",{'issue': 100}
"['integer', 'iteration']",{'integer': 100}
"['limitpotential', 'stack', 'sequence', 'overflowerror']",{'stack': 100}
"['stream', 'zeromem', 'function', 'cipher']",{'cipher': 100}
"['testcase', 'issue']",{'issue': 100}
"['order', 'argumenterror', 'buffer', 'leadingmessage', 'failingvector', 'enable', 'defaultallows', 'struct', 'encryptincorrect', 'field', 'previouslydecrypt', 'encrypt', 'repeatedlyminimalalign', 'function', 'closelyvariable', 'commonminor', 'armccurdy', 'andre', 'mccurdy']",{'buffer': 100}
"['check', 'function', 'rangestructure', 'check', 'properlycontain', 'number', 'round', 'positivesubtractedinteger', 'structure', 'underflow', 'resultinitializedround', 'valid', 'valueerror', 'return', 'readingboundaryjoakim', 'signedmartijn']",{'underflow': 100}
"['eafad', 'mergerequest', 'compile', 'issue']",{'issue': 100}
"['compile', 'issue']",{'issue': 100}
"['generation', 'update']",{'generation': 100}
"['encryption', 'exampleexample', 'bracket', 'comment', 'encryption']",{'encryption': 100}
"['ecdsa', 'format', 'signature', 'initial', 'commitsignature', 'ifdef', 'formatupdatereviewmemcmp', 'xmemcmp', 'xstrcmp', 'check', 'source', 'strcmp', 'replacedefines', 'checkxstrcmp', 'sprintf', 'literal', 'formatreview', 'changerework', 'decodingencodingmacrosingle', 'return', 'pointxstrncpy', 'definingreviewreview', 'tweakpossible', 'buffer', 'ensuretrack', 'pointer']","{'Sprintf': 100, 'buffer': 100}"
"['mergerequest', 'stream', 'crypt', 'function', 'libtomsingle', 'stream', 'function', 'crypt']",{'crypto': 91}
"['print', 'flexi', 'debug', 'stack', 'input']",{'stack': 100}
"['legacy', 'generation']",{'generation': 100}
"['parameter', 'clang', 'inconsistent', 'warning', 'issue', 'readability', 'declaration']",{'issue': 100}
"['libtomprivate', 'check', 'buffer', 'input']",{'buffer': 100}
"['private', 'check', 'buffer', 'input']",{'buffer': 100}
"['libtomincorrect', 'length']",{'length': 100}
"['incorrect', 'length']","{'incorrect': 100, 'length': 100}"
"['length', 'checkdecodestyle', 'check', 'overflowwritten', 'check', 'building', 'lengthproblem']",{'length': 100}
"['function', 'length']",{'length': 100}
"['problem', 'occurs', 'conditiondecryptiondecrypt', 'ciphertext', 'length', 'multiple', 'block', 'whosedecryptiondecrypt', 'ciphertext', 'length', 'multiple', 'whoseblockfirstlysometimes', 'decryption', 'resulttetsuya', 'tetsuya', 'yoshizakivictor']","{'length': 100, 'encryption': 90}"
"['problem', 'occurs', 'conditiondecryptiondecrypt', 'ciphertext', 'length', 'multiple', 'block', 'whosedecryptiondecrypt', 'ciphertext', 'length', 'multiple', 'whoseblockfirstlysometimes', 'decryption', 'resulttetsuya', 'tetsuya', 'yoshizakivictor']","{'length': 100, 'encryption': 90}"
"['efbdf', 'mergerequest', 'libtom', 'rabbitstream', 'rabbit', 'cipher']",{'cipher': 100}
"['libtomfails', 'buffer', 'process', 'input']",{'buffer': 100}
"['libtomfails', 'buffer', 'process', 'input']",{'buffer': 100}
"['buffer', 'process', 'input']",{'buffer': 100}
"['mergerequest', 'cipher', 'serpent', 'libtomserpent', 'cipher']",{'cipher': 100}
"['serpent', 'cipher']",{'cipher': 100}
"['template', 'issue']",{'issue': 100}
"['libtomexport', 'crypto']",{'crypto': 100}
"['check', 'length', 'revertcommit', 'reverts']",{'length': 100}
"['check', 'length']",{'length': 100}
"['openssl', 'compilation']",{'OpenSSL': 100}
"['review', 'stream', 'cipher']",{'cipher': 100}
"['stream', 'cipher']",{'cipher': 100}
"['wrong', 'length', 'wycheproof']",{'length': 100}
"['block', 'cipher']",{'cipher': 100}
"['function', 'string', 'decryption']",{'encryption': 90}
"['expose', 'structs']",{'expose': 100}
"['testvector', 'generation']",{'generation': 100}
"['nonce', 'check', 'length']",{'length': 100}
"['crypt', 'ltcrypt']",{'crypto': 91}
"['prngs', 'check', 'cipher']",{'cipher': 100}
"['travis', 'support', 'pthread']",{'thread': 92}
"['support', 'pthread']",{'thread': 92}
"['warning', 'comparison', 'integer']",{'integer': 100}
"['error', 'spurious', 'entropy', 'hopefullysecure', 'generation', 'function', 'ensure', 'applicationimplement']","{'entropy': 100, 'generation': 100}"
"['check', 'descriptor', 'cipher']",{'cipher': 100}
"['crypt', 'ltcrypt', 'renamecrypt', 'clash', 'binary', 'creates', 'entire', 'functionality']",{'crypto': 91}
"['mergerequest', 'crypt', 'libtomimprove', 'hashsum']",{'crypto': 91}
"['clean', 'stack']",{'stack': 100}
"['process', 'updateremoveignore', 'generatedsilent', 'generation']",{'generation': 100}
"['generation', 'doxygen']",{'generation': 100}
"['generation', 'verbosity', 'setting']",{'generation': 100}
"['stack', 'blakeb']",{'stack': 100}
"['timezone', 'generalizedtime', 'support', 'offsetgeneration', 'length']",{'length': 100}
"['openssl', 'compatible']",{'OpenSSL': 100}
"['visual', 'snprintf']",{'Sprintf': 93}
"['integer', 'sjaeckel', 'issue']","{'integer': 100, 'issue': 100}"
"['meaningless', 'issue']",{'issue': 100}
"['possible', 'overflow', 'issue']","{'overflow': 100, 'issue': 100}"
"['macro', 'setbit', 'redefinition', 'issue']",{'issue': 100}
"['authenticationinput', 'buffer', 'createversion', 'verificationplaintext', 'output']",{'buffer': 100}
"['printerror', 'output', 'short', 'integer']",{'integer': 100}
"['encryption', 'decryption', 'testcase']",{'encryption': 90}
"['enable', 'decryption', 'multipletweaktweaktweakconcat', 'tweak', 'bufferpatch', 'tweak', 'outputtweakmodification', 'brand', 'pascal']",{'encryption': 90}
"['check', 'length', 'decode']",{'length': 100}
"['check', 'function', 'length', 'function', 'lengthblock', 'inputtrack', 'length', 'inputsince', 'length', 'function', 'function', 'mightmight', 'clever', 'minor', 'problem', 'security', 'attackerlonger', 'message', 'hashedprocessor', 'macro', 'problem', 'couldcheck', 'overflow']","{'length': 100, 'Security': 100, 'overflow': 100}"
"['sprintf', 'snprintf']",{'Sprintf': 93}
"['params', 'generation']",{'generation': 100}
"['unregister', 'cipher']",{'cipher': 100}
"['parameter', 'possibility', 'cipher']",{'cipher': 100}
"['bswap', 'inline', 'clobber', 'memorycamellia', 'cipher', 'causingmacro', 'versionthink', 'compiler', 'ubuntu', 'accesssolves', 'memory', 'clobbersuspect', 'specify', 'constraintcould', 'memorycompiler', 'version', 'supportbswap', 'builtins']",{'cipher': 100}
"['libtomlicensingdbbcb', 'libtom', 'thread', 'group']",{'thread': 100}
