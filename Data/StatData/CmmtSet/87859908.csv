message,fuzzy
"['error', 'dynatracesupport', 'event', 'verificationevent', 'verification', 'componenterrorlogger', 'setting', 'factory', 'default', 'improveinject', 'method', 'javadoc', 'factoryfixinglogger', 'injection']",{'injection': 100}
"['possibleproject', 'framework', 'issue', 'spring']",{'issue': 100}
"['initial', 'issuetemplate', 'result', 'enhancement', 'information', 'issue', 'understanding', 'communication', 'report']",{'issue': 100}
"['support', 'dynatracedynatrace', 'metric', 'exporter', 'package', 'separatedynatrace', 'metric', 'exporter', 'package', 'separateexporter', 'dynatrace', 'renamedynatracepublicformattingfactory', 'exporter', 'thread', 'rename', 'class', 'versionconvention', 'implementation', 'delegateupdate', 'config', 'validationvariable', 'renameimport', 'unusedvalidation', 'splitcheck', 'apiversionapiversion', 'update', 'comment', 'duplicate', 'checklogic', 'dynatraceconfig', 'validate', 'validationsupport', 'interface', 'private', 'method', 'publicdynatrace', 'method', 'consistentlogger', 'string', 'class', 'basedthreadpool', 'startlicenseimport', 'staticcircular', 'dependencyexporter', 'dynatrace', 'armin', 'ruechresult', 'invalid', 'ingestion', 'mightreview', 'comment', 'addressconcise', 'exporter', 'libraryconsistent', 'configuration', 'dependency', 'makingparenthesis', 'groovydynatraceconfig', 'licensevariable', 'config', 'local', 'fieldorder', 'refactor', 'visibility', 'dynatraceformattingcreatemeterline', 'method', 'refactorimplement', 'config', 'fallbackcommit', 'cherry', 'fbbbbaaefbddccctoken', 'configuration', 'warning', 'unlikely', 'checkcommit', 'cherry', 'georg', 'pirklbauerimprove', 'roundinstead', 'mockclocksetup', 'improveimproveimprove', 'roundmeter', 'custominvalid', 'dedupenullable', 'static', 'probleminitialize', 'definedempty', 'enablingaddingjavadocblank', 'georg', 'pirklbauerblank', 'georg', 'pirklbauerpercentile', 'armin', 'ruech']",{'thread': 100}
"['dynatrace', 'refactordynatrace', 'metric', 'exporter', 'package', 'separatedynatrace', 'metric', 'exporter', 'package', 'separateexporter', 'dynatrace', 'renamedynatracepublicformattingfactory', 'exporter', 'thread', 'rename', 'class', 'versionconvention', 'implementation', 'delegateupdate', 'config', 'validationvariable', 'renameimport', 'unusedvalidation', 'splitcheck', 'apiversionapiversion', 'update', 'comment', 'duplicate', 'checklogic', 'dynatraceconfig', 'validate', 'validationsupport', 'interface', 'private', 'method', 'publicdynatrace', 'method', 'consistentlogger', 'string', 'class', 'basedthreadpool', 'startlicenseimport', 'staticcircular', 'georg', 'pirklbauer']",{'thread': 100}
"['issue', 'fffdeafadbcafdd']",{'issue': 100}
"['maximum', 'length', 'value', 'dimensiontruncate', 'dynatrace', 'length', 'error', 'value', 'dimension', 'limit', 'avoidingresolve']",{'length': 100}
"['logic', 'jvmgcmetrics', 'refactor', 'collectorsupport', 'counter', 'special', 'regardless', 'openj', 'refactor', 'generational', 'collector', 'metric']",{'generation': 91}
"['checkstyle', 'issue']",{'issue': 100}
"['checkstyle', 'issue']",{'issue': 100}
"['executorservice', 'access', 'thrown', 'issue']",{'issue': 100}
"['concurrent', 'cycle', 'phase', 'shenandoahcorrect', 'concurrent', 'cycle', 'pause', 'align', 'notification', 'phase', 'shenandoahresolve']",{'concurrent': 100}
"['false', 'metric', 'valueissuecomment', 'micrometer', 'issue', 'metric']",{'issue': 100}
"['slack', 'micrometerredirect', 'slack', 'issue', 'invite']",{'issue': 100}
"['support', 'garbage', 'generational', 'collector', 'metricyoung', 'openjdk', 'jvmgcmetrics', 'example', 'garbage', 'collector', 'metric', 'shenandoahresolveresolve']",{'generation': 91}
"['kafkametrics', 'daemon', 'threadblock', 'thread', 'background', 'pressingresolve']",{'thread': 100}
"['logbackmetrics', 'ignore', 'ignoremetricsreset', 'logback', 'ignoremetrics', 'exception', 'setting', 'logbackmetrics', 'ignore', 'thrown', 'metricmicrometer', 'issue', 'metric']",{'issue': 100}
"['check', 'class', 'ensures', 'management', 'classloaderclose', 'micrometer', 'issue', 'metric']",{'issue': 100}
"['jetty', 'request', 'clientjetty', 'length', 'request', 'client', 'content']",{'length': 100}
"['config', 'highresolution', 'option', 'issue']",{'issue': 100}
"['longtasktimer', 'publish', 'issue', 'statsd']",{'issue': 100}
"['longtasktimer', 'publish', 'statistic', 'issue', 'wavefront', 'distribution']",{'issue': 100}
"['incorrect', 'opentsdb', 'histogram', 'bucket']",{'incorrect': 100}
"['configuration', 'metric', 'additionalgauge', 'threadissuecomment', 'micrometer', 'issue', 'metric']",{'issue': 100}
"['customize', 'spring', 'thread', 'constructor', 'harderresolve']",{'thread': 100}
"['depenencies', 'switch', 'jerseycentral', 'maven', 'metadata', 'resolvable', 'issue', 'version']",{'issue': 100}
"['window', 'revert', 'issue']",{'issue': 100}
"['caeefbranch', 'mergeconflictdatadog', 'implementation', 'micrometer', 'registryelastic', 'implementation', 'micrometer', 'registryopentsdb', 'implementation', 'micrometer', 'registryopentsdb', 'package', 'implementation', 'micrometer', 'registryopentsdb', 'implementation', 'micrometer', 'registryinternal', 'statsd', 'implementation', 'micrometer', 'registryinstrument', 'binder', 'micrometer', 'packagejetty', 'instrument', 'binder', 'micrometerjetty', 'instrument', 'binder', 'micrometerjetty', 'instrument', 'binder', 'micrometerjetty', 'instrument', 'binder', 'micrometerjetty', 'instrument', 'binder', 'micrometerinstrument', 'micrometerlegacy', 'micrometer', 'springlegacy', 'micrometer', 'springasync', 'legacy', 'micrometer', 'springasync', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'spring', 'micrometerautoconfigure', 'legacy', 'spring', 'appoptics', 'micrometerautoconfigure', 'legacy', 'spring', 'appoptics', 'micrometerautoconfigure', 'legacy', 'spring', 'appoptics', 'micrometerautoconfigure', 'legacy', 'spring', 'atlas', 'micrometerautoconfigure', 'legacy', 'spring', 'atlas', 'micrometerautoconfigure', 'legacy', 'spring', 'atlas', 'micrometerautoconfigure', 'legacy', 'spring', 'micrometer', 'azuremonitorautoconfigure', 'legacy', 'spring', 'micrometer', 'azuremonitorautoconfigure', 'legacy', 'spring', 'micrometer', 'azuremonitorautoconfigure', 'datadog', 'legacy', 'spring', 'micrometerautoconfigure', 'datadog', 'legacy', 'spring', 'micrometerautoconfigure', 'datadog', 'legacy', 'spring', 'micrometerautoconfigure', 'legacy', 'dynatrace', 'spring', 'micrometerautoconfigure', 'legacy', 'dynatrace', 'spring', 'micrometerautoconfigure', 'legacy', 'dynatrace', 'spring', 'micrometerautoconfigure', 'legacy', 'elastic', 'spring', 'micrometerautoconfigure', 'legacy', 'elastic', 'spring', 'micrometerautoconfigure', 'legacy', 'elastic', 'spring', 'micrometerautoconfigure', 'legacy', 'ganglion', 'spring', 'micrometerautoconfigure', 'legacy', 'ganglion', 'spring', 'micrometerautoconfigure', 'legacy', 'ganglion', 'spring', 'micrometerautoconfigure', 'legacy', 'graphite', 'spring', 'micrometerautoconfigure', 'legacy', 'graphite', 'spring', 'micrometerautoconfigure', 'legacy', 'graphite', 'spring', 'micrometerautoconfigure', 'legacy', 'humio', 'spring', 'micrometerautoconfigure', 'legacy', 'humio', 'spring', 'micrometerautoconfigure', 'legacy', 'humio', 'spring', 'micrometerautoconfigure', 'legacy', 'micrometerautoconfigure', 'legacy', 'micrometerautoconfigure', 'legacy', 'micrometerautoconfigure', 'legacy', 'spring', 'micrometerautoconfigure', 'legacy', 'spring', 'micrometerautoconfigure', 'legacy', 'spring', 'micrometerautoconfigure', 'legacy', 'spring', 'kairos', 'micrometerautoconfigure', 'legacy', 'spring', 'kairos', 'micrometerautoconfigure', 'legacy', 'spring', 'kairos', 'micrometerautoconfigure', 'spring', 'micrometerautoconfigure', 'spring', 'micrometerautoconfigure', 'spring', 'micrometerautoconfigure', 'legacy', 'spring', 'newrelic', 'micrometerautoconfigure', 'legacy', 'spring', 'newrelic', 'micrometerautoconfigure', 'legacy', 'spring', 'newrelic', 'micrometerautoconfigure', 'legacy', 'spring', 'prometheus', 'micrometerautoconfigure', 'legacy', 'spring', 'prometheus', 'micrometerautoconfigure', 'legacy', 'spring', 'prometheus', 'micrometerautoconfigure', 'property', 'legacy', 'spring', 'micrometerautoconfigure', 'property', 'legacy', 'spring', 'micrometerautoconfigure', 'property', 'legacy', 'spring', 'micrometerautoconfigure', 'legacy', 'signalfx', 'spring', 'micrometerautoconfigure', 'legacy', 'signalfx', 'spring', 'micrometerautoconfigure', 'legacy', 'signalfx', 'spring', 'micrometerautoconfigure', 'legacy', 'spring', 'micrometer', 'simpleautoconfigure', 'legacy', 'spring', 'micrometer', 'simpleautoconfigure', 'legacy', 'spring', 'micrometer', 'simpleautoconfigure', 'legacy', 'stackdriver', 'spring', 'micrometerautoconfigure', 'legacy', 'stackdriver', 'spring', 'micrometerautoconfigure', 'legacy', 'stackdriver', 'spring', 'micrometerautoconfigure', 'legacy', 'spring', 'statsd', 'micrometerautoconfigure', 'legacy', 'spring', 'statsd', 'micrometerautoconfigure', 'legacy', 'spring', 'statsd', 'micrometerautoconfigure', 'legacy', 'spring', 'wavefront', 'micrometerautoconfigure', 'legacy', 'spring', 'wavefront', 'micrometerautoconfigure', 'legacy', 'spring', 'wavefront', 'micrometerautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'jersey', 'spring', 'micrometerautoconfigure', 'legacy', 'kafka', 'spring', 'consumer', 'micrometerautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'spring', 'client', 'micrometerautoconfigure', 'jetty', 'legacy', 'spring', 'micrometerautoconfigure', 'legacy', 'servlet', 'spring', 'micrometerautoconfigure', 'legacy', 'tomcat', 'spring', 'micrometercache', 'legacy', 'micrometer', 'springlegacy', 'spring', 'prometheus', 'micrometerlegacy', 'spring', 'prometheus', 'micrometerlegacy', 'micrometer', 'integration', 'springlegacy', 'micrometer', 'legacy', 'micrometer', 'springclient', 'legacy', 'micrometer', 'springclient', 'legacy', 'micrometer', 'springclient', 'legacy', 'micrometer', 'springclient', 'legacy', 'micrometer', 'springclient', 'legacy', 'micrometer', 'springjetty', 'legacy', 'micrometer', 'springservlet', 'legacy', 'micrometer', 'springservlet', 'legacy', 'micrometer', 'springservlet', 'legacy', 'micrometer', 'springservlet', 'legacy', 'micrometer', 'springlegacy', 'micrometer', 'tomcat', 'springlegacy', 'configuration', 'additional', 'spring', 'resource', 'micrometerlegacy', 'micrometer', 'springlegacy', 'micrometer', 'springlegacy', 'micrometer', 'springasync', 'legacy', 'micrometer', 'springasync', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'spring', 'micrometerautoconfigure', 'legacy', 'spring', 'appoptics', 'micrometerautoconfigure', 'legacy', 'spring', 'appoptics', 'micrometerautoconfigure', 'legacy', 'spring', 'appoptics', 'micrometerautoconfigure', 'legacy', 'humio', 'spring', 'micrometerautoconfigure', 'legacy', 'spring', 'kairos', 'micrometerautoconfigure', 'legacy', 'spring', 'kairos', 'micrometerautoconfigure', 'legacy', 'spring', 'kairos', 'micrometerautoconfigure', 'legacy', 'spring', 'prometheus', 'micrometerautoconfigure', 'property', 'legacy', 'spring', 'micrometerautoconfigure', 'property', 'legacy', 'spring', 'micrometerautoconfigure', 'legacy', 'stackdriver', 'spring', 'micrometerautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'jersey', 'spring', 'micrometerautoconfigure', 'legacy', 'kafka', 'spring', 'consumer', 'micrometerautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'spring', 'client', 'micrometerautoconfigure', 'legacy', 'spring', 'client', 'micrometerautoconfigure', 'jetty', 'legacy', 'spring', 'micrometerautoconfigure', 'legacy', 'servlet', 'spring', 'micrometerautoconfigure', 'legacy', 'tomcat', 'spring', 'micrometercache', 'legacy', 'micrometer', 'springlegacy', 'spring', 'prometheus', 'micrometerlegacy', 'spring', 'prometheus', 'micrometerlegacy', 'micrometer', 'integration', 'springlegacy', 'micrometer', 'springlegacy', 'micrometer', 'legacy', 'micrometer', 'legacy', 'micrometer', 'springlegacy', 'micrometer', 'security', 'springclient', 'legacy', 'micrometer', 'springclient', 'legacy', 'micrometer', 'springclient', 'legacy', 'micrometer', 'springlegacy', 'server', 'jersey', 'spring', 'micrometerservlet', 'legacy', 'micrometer', 'springservlet', 'legacy', 'micrometer', 'springservlet', 'legacy', 'micrometer', 'springservlet', 'legacy', 'micrometer', 'springresource', 'legacy', 'micrometer', 'springresource', 'sample', 'micrometerresource', 'sample', 'micrometer', 'application']",{'Security': 100}
"['mergebranch', 'mergeconflictinstrument', 'micrometerinstrument', 'micrometerinstrument', 'binder', 'micrometerinstrument', 'binder', 'micrometerinstrument', 'binder', 'micrometerinstrument', 'micrometermicrometerautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'micrometer', 'springautoconfigure', 'legacy', 'graphite', 'spring', 'micrometerautoconfigure', 'legacy', 'spring', 'client', 'micrometerlegacy', 'micrometer', 'integration', 'springlegacy', 'micrometer', 'legacy', 'micrometer', 'springlegacy', 'micrometer', 'security', 'springservlet', 'legacy', 'micrometer', 'springservlet', 'legacy', 'micrometer', 'spring']",{'Security': 100}
"['refresh', 'metric', 'periodicallyscheduler', 'previous', 'update', 'change', 'issue', 'approach', 'background', 'metric', 'performance']",{'issue': 100}
"['functiontimerissuecomment', 'micrometer', 'issue', 'metric']",{'issue': 100}
"['victoriametrics', 'opentsdb', 'prometheus', 'issue', 'polish', 'implementation']",{'issue': 100}
"['value', 'issue']",{'issue': 100}
"['reference', 'issue']",{'issue': 100}
"['issue', 'client']",{'issue': 100}
"['cloudwatch', 'limitation', 'handlecloudwatch', 'reject', 'dimension', 'empty', 'length', 'convention', 'constraint', 'unexpectedapireference', 'latestclose']",{'length': 100}
"['rewrite', 'statsdonnext', 'directprocessor', 'server', 'processor', 'fluxsink', 'upgrade', 'multi', 'reactor', 'registry', 'version', 'configurable', 'client', 'buffer', 'bufferingflux', 'processor', 'memory', 'queue', 'capacity', 'metric', 'method', 'mitigation', 'linesink', 'johnny', 'izeye']",{'buffer': 100}
"['stackdriver', 'limit', 'value', 'length']",{'length': 100}
"['truncate', 'stackdriver', 'length', 'reference', 'stackdriver', 'tagvalue', 'limit', 'metric']",{'length': 100}
"['delimiter', 'append', 'buffer', 'messagecommit', 'cherry', 'pickedresolve']",{'buffer': 100}
"['sendoptions', 'usagereactor', 'issue', 'netty']",{'issue': 100}
"['publisher', 'metric', 'hystrix', 'thread']",{'thread': 100}
"['encryption', 'command', 'quote']",{'encryption': 100}
"['delimiter', 'append', 'buffer', 'message']",{'buffer': 100}
"['update', 'snapshot', 'passwordimproves', 'decryption', 'digest', 'message', 'encryption']",{'encryption': 100}
"['buffer', 'specify', 'statsd', 'measurement']",{'buffer': 100}
"['trace', 'stack', 'stackdriver', 'successful', 'debug']",{'stack': 100}
"['central', 'maven', 'timeout', 'minute', 'outputconceivable', 'increase', 'artifact', 'minute', 'timeout', 'article', 'output', 'default', 'limit', 'plugins', 'bintray', 'minute', 'timeout', 'spring', 'plugin', 'issue', 'circleci', 'client', 'making']",{'issue': 100}
"['statsd', 'meterregistry', 'histogram', 'infinity', 'issue', 'buffer', 'violation', 'calculation', 'infinity', 'bucket']","{'issue': 100, 'buffer': 100}"
"['pause', 'default', 'nopausedetector', 'switchknown', 'configure', 'pause', 'nopausedetector', 'default', 'issue']",{'issue': 100}
"['resttemplate', 'config', 'builder', 'metricproject', 'issue', 'spring']",{'issue': 100}
"['binder', 'meter', 'registryproject', 'issue', 'spring']",{'issue': 100}
"['support', 'revert', 'injection', 'violation', 'checkstyleproject', 'spring']",{'injection': 100}
"['available', 'metric', 'hibernate', 'configuringproject', 'issue', 'spring']",{'issue': 100}
"['value', 'bufferingflux', 'flush', 'shorter', 'interval', 'bufferingflux', 'issue', 'metric']",{'issue': 100}
"['thread', 'default']",{'thread': 100}
"['commonproject', 'issue', 'spring']",{'issue': 100}
"['issue', 'multigauge']",{'issue': 100}
"['support', 'configuration', 'spring', 'align', 'appopticsproject', 'issue', 'spring']",{'issue': 100}
"['support', 'pushgateway', 'spring', 'prometheus', 'alignproject', 'issue', 'spring']",{'issue': 100}
"['supportproject', 'issue', 'springproject', 'issue', 'spring']",{'issue': 100}
"['interface', 'tagsprovider', 'introduction', 'revert', 'issue']",{'issue': 100}
"['support', 'kairosdb', 'issue']",{'issue': 100}
"['implementation', 'appoptics', 'issue']",{'issue': 100}
"['support', 'tomcat', 'configuration', 'spring', 'align', 'metricproject', 'issue', 'springissuecomment', 'project', 'issue', 'spring']",{'issue': 100}
"['jetty', 'support', 'configuration', 'spring', 'align', 'metricproject', 'issue', 'spring']",{'issue': 100}
"['injection', 'httpclient', 'builder', 'method', 'registry']",{'injection': 100}
"['state', 'value', 'thread']",{'thread': 100}
"['deprecate', 'meterbinders', 'enabledproject', 'issue', 'springproject', 'issue', 'spring']",{'issue': 100}
"['interface', 'injection', 'registryupdate', 'reactor', 'nettyregeneratehttpclientokhttp', 'httpclient', 'implementation', 'initial', 'reactorlogback', 'configuration', 'repos']",{'injection': 100}
"['structural', 'issue', 'meter', 'registry']",{'issue': 100}
"['support', 'application', 'azure', 'insight', 'issue']",{'issue': 100}
"['daemon', 'thread', 'threadfactory']",{'thread': 100}
"['concurrent', 'hystrix', 'thread', 'polish', 'metric']","{'concurrent': 100, 'thread': 100}"
"['ensure', 'orderedcloseproject', 'issue', 'spring']",{'issue': 100}
"['polish', 'javadocmicrometer', 'issue', 'metric']",{'issue': 100}
"['timegauge', 'issue']",{'issue': 100}
"['prometheus', 'conform', 'messagepushgateway', 'metric', 'error', 'prometheus', 'issue', 'micrometererror', 'machine', 'family', 'virtual', 'epoch', 'metric', 'processmicrometer', 'issue', 'metric']",{'issue': 100}
"['prometheus', 'conform', 'messagepushgateway', 'metric', 'error', 'prometheus', 'issue', 'micrometererror', 'machine', 'family', 'virtual', 'epoch', 'metric', 'processmicrometer', 'issue', 'metric']",{'issue': 100}
"['decryption', 'failureexplicit', 'making', 'openssl', 'digest', 'protects', 'circleci', 'choice', 'versiondoesnt', 'decryption', 'openssl', 'encryption', 'question', 'different', 'version']","{'encryption': 100, 'OpenSSL': 100}"
"['issue', 'builder', 'statsd']",{'issue': 100}
"['improvementzoneidcorrect', 'parameter', 'substitutionconstantbetter', 'string', 'usage', 'buffer']",{'buffer': 100}
"['improvement', 'smalluppercamelcase', 'character', 'string', 'twiceuppercase', 'alreadycamelcase', 'buffer']",{'buffer': 100}
"['improvement', 'smalluppercamelcase', 'character', 'string', 'twiceuppercase', 'alreadycamelcase', 'buffer']",{'buffer': 100}
"['special', 'character', 'issue', 'implementation']",{'issue': 100}
"['meter', 'registration', 'benchmark', 'issue']",{'issue': 100}
"['issue', 'metric']",{'issue': 100}
"['thread', 'statsd', 'metric', 'registry', 'breakdown']",{'thread': 100}
"['meterfilter', 'timer', 'issue']",{'issue': 100}
"['package', 'issue', 'histogram', 'distribution', 'rename']",{'issue': 100}
"['issue', 'rename']",{'issue': 100}
"['mechanism', 'loggercontext', 'retrieve', 'turbofilter', 'logbackmetrics', 'issue']",{'issue': 100}
"['daemon', 'shutdown', 'orderly', 'thread']",{'thread': 100}
"['upgrade', 'reactor', 'issue', 'netty']",{'issue': 100}
"['javadocs', 'issue']",{'issue': 100}
"['issue', 'mustfind']",{'issue': 100}
"['property', 'structure', 'filter', 'issue', 'meter']",{'issue': 100}
"['signalfx', 'client', 'issue']",{'issue': 100}
"['legacy', 'dependency', 'spring', 'issue', 'micrometer', 'force', 'version']",{'issue': 100}
"['renametags', 'meter', 'filter', 'issue']",{'issue': 100}
"['signalfx', 'capitalization', 'issue']",{'issue': 100}
"['support', 'signalfx', 'initial', 'issue']",{'issue': 100}
"['buffer', 'histogramconfig']",{'buffer': 100}
"['timer', 'buffer']",{'buffer': 100}
"['pause', 'issue', 'implementation']",{'issue': 100}
"['property', 'datadogconfig', 'issue', 'spring']",{'issue': 100}
"['datadog', 'metadata', 'request', 'issue', 'metric']",{'issue': 100}
"['tomcat', 'registration', 'issue']",{'issue': 100}
"['update', 'issue']",{'issue': 100}
"['meterfilter', 'issue']",{'issue': 100}
"['meter', 'builder', 'issue']",{'issue': 100}
"['issue', 'rename']",{'issue': 100}
"['issue', 'histogram']",{'issue': 100}
"['diagnose', 'pushgateway', 'problem', 'sample', 'prometheus', 'issue', 'description']",{'issue': 100}
"['timer', 'histogram', 'percentile', 'prometheus', 'issue', 'report']",{'issue': 100}
"['reference', 'issue', 'settype']",{'issue': 100}
"['removecomplete', 'meteriterate', 'consumermanner', 'thread', 'meter', 'overhead']",{'thread': 100}
"['meterregistry', 'safety', 'issue', 'threadmotivationreturn', 'exposevalue', 'collection', 'withoutremove', 'meter', 'caller', 'callermodificationinstead', 'metermap', 'hashmapcommentefficiency', 'improveclean', 'removal', 'package', 'class', 'removal', 'class', 'redundant', 'method', 'staticbrace', 'missinglocation', 'javadoc', 'incorrectinstead', 'enummap', 'applicable', 'hashmapresultsafety', 'threadcontention', 'potentiallyloophole']",{'issue': 100}
"['threadmotivationhistogram', 'timewindow', 'latency', 'threadthreadproper', 'rotation', 'bucketinstead', 'catchhdrhistogram', 'throwresultsafety', 'thread']",{'thread': 100}
"['spring', 'request', 'issue', 'login', 'securityredirection', 'explosion', 'certain', 'dimensional', 'response', 'circuit']",{'issue': 100}
"['transformation', 'config', 'issue', 'meter', 'histogram']",{'issue': 100}
"['counter', 'expose', 'cusomt', 'description', 'gauge']",{'expose': 100}
"['application', 'composite', 'issue', 'registry']",{'issue': 100}
"['partial', 'actuator', 'absence', 'issue']",{'issue': 100}
"['custom', 'issue', 'implementation', 'meterregistry']",{'issue': 100}
"['timer', 'function', 'addedcache', 'hazelcast', 'issue', 'metric']",{'issue': 100}
"['support', 'jcache', 'issue', 'metric', 'ehcache']",{'issue': 100}
"['binder', 'ignore', 'additional', 'issue']",{'issue': 100}
"['prometheus', 'issue', 'histogram']",{'issue': 100}
"['property', 'histogram', 'percentile', 'clamp', 'summary', 'builder', 'issue', 'drive']",{'issue': 100}
"['inclusive', 'cumulative', 'right', 'issue', 'histogram', 'bucket']",{'issue': 100}
"['positive', 'accumulate', 'percentile', 'cumulative', 'observation', 'issue', 'histogram', 'infinity']",{'issue': 100}
"['percentile', 'prometheus', 'issue', 'histogram', 'bucket']",{'issue': 100}
"['cumulative', 'issue', 'histogram', 'bucket']",{'issue': 100}
"['support', 'percentile', 'addition', 'request', 'issue', 'automatic', 'client']",{'issue': 100}
"['class', 'metric', 'prefix', 'thread']",{'thread': 100}
"['issue', 'implementation', 'histogram']",{'issue': 100}
"['normal', 'contains', 'expose', 'meter']",{'expose': 100}
"['summary', 'issue', 'distribution']",{'issue': 100}
"['prometheus', 'meter', 'issue', 'getdescription']",{'issue': 100}
"['tagformatter', 'issue']",{'issue': 100}
"['meter', 'issue']",{'issue': 100}
"['issue', 'meter', 'absence', 'optional']",{'issue': 100}
"['ebbbaecfbaafedd', 'injection', 'metric', 'micrometer', 'comment', 'commitcomment', 'method', 'constructor']",{'injection': 100}
"['starter', 'issue']",{'issue': 100}
"['support', 'ganglion', 'graphite', 'construction', 'issue', 'polish', 'registry']",{'issue': 100}
"['initial', 'dropwizard', 'issue']",{'issue': 100}
"['operand', 'exception', 'stack']",{'stack': 100}
"['thread', 'content', 'computeifabsent', 'registry']",{'thread': 100}
"['support', 'timer', 'quantiles', 'summary', 'issue', 'distribution']",{'issue': 100}
"['executor', 'thread', 'single']",{'thread': 100}
"['internal', 'thread', 'prometheus', 'registry', 'meter', 'safety']",{'thread': 100}
"['memory', 'binder', 'buffer', 'thread']","{'buffer': 100, 'thread': 100}"
